"use strict";(self.webpackChunkcardano_scaling_website=self.webpackChunkcardano_scaling_website||[]).push([[4232],{4615:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"2025-08","metadata":{"permalink":"/monthly/2025-08","editUrl":"https://github.com/cardano-scaling/website/tree/master/monthly/2025-08-monthly.md","source":"@site/monthly/2025-08-monthly.md","title":"August 2025","description":"This is a monthly report on the progress of \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects since August 2025. It serves as preparation for, and a written summary of, the monthly stakeholder review meeting. The meeting is announced on our Discord channels and held on Google Meet. This month, the meeting took place on August 27, 2025, using the slides provided here, and the recording is available here.","date":"2025-08-29T09:28:55.000Z","formattedDate":"August 29, 2025","tags":[{"label":"monthly","permalink":"/monthly/tags/monthly"}],"readingTime":6.06,"hasTruncateMarker":false,"authors":[{"name":"Jean-Philippe Raynaud","title":"Software Engineering Lead, IOG","url":"https://github.com/jpraynaud","imageURL":"https://github.com/jpraynaud.png","key":"jpraynaud"},{"name":"Noon van der Silk","title":"Software Engineering Lead, IOG","url":"https://github.com/noonio","imageURL":"https://github.com/noonio.png","key":"noonio"},{"name":"Sebastian Nagel","title":"Software Engineering Lead, IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"}],"frontMatter":{"title":"August 2025","slug":"2025-08","authors":["jpraynaud","noonio","ch1bo"],"tags":["monthly"]},"unlisted":false,"nextItem":{"title":"June 2025","permalink":"/monthly/2025-06"}},"content":"This is a monthly report on the progress of \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects since August 2025. It serves as preparation for, and a written summary of, the monthly stakeholder review meeting. The meeting is announced on our Discord channels and held on Google Meet. This month, the meeting took place on August 27, 2025, using the slides provided [here][slides], and the recording is available [here][recording].\\n\\n## Mithril\\n\\n[Issues and pull requests closed in August](https://github.com/input-output-hk/mithril/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2025-08-01..2025-08-31)\\n\\n### Roadmap\\n\\nBelow are the latest updates on our roadmap:\\n\\n- **DMQ signature diffusion prototype** [#2402](https://github.com/input-output-hk/mithril/issues/2402). We have implemented a end to end test of the DMQ protocol for the Mithril nodes, and the networking team has kept implementing the mini-protocols in the Haskell DMQ node\\n- **Simple aggregation Halo2 \u2013 prototype** [#2526](https://github.com/input-output-hk/mithril/issues/2526). We collaborated with the innovation team on developing a prototype for a SNARK circuit for Mithril certificates based on Halo2\\n- **Refactor STM library** [#2567](https://github.com/input-output-hk/mithril/issues/2567). We continued the second phase of the STM library refactoring.\\n\\n### DMQ implementation update\\n\\nHere is the current status of the DMQ implementation:\\n\\n| **Mini-protocols** | **Pallas** | **Mithril Signer** | **Mithril Aggregator** | **Mithril Relay** | **Haskell DMQ Node** |\\n| ------------------ | :--------: | :----------------: | :--------------------: | :---------------: | :------------------: |\\n| N2C Submission     |     \u2713      |         \u2713          |           -            |  \u2713<sup>\\\\*</sup>   |    _In progress_     |\\n| N2C Notification   |     \u2713      |      Planned       |           \u2713            |  \u2713<sup>\\\\*</sup>   |    _In progress_     |\\n| N2N Diffusion      |  Planned   |         -          |           -            |         -         |    _In progress_     |\\n\\n<i><sup>\\\\*</sup>: for testing purpose only</i>\\n\\nThe network team has kept implementing the DMQ mini-protocols in the Haskell DMQ node. In the mean time, we have implemented a fake DMQ node which allowed us to test the Mithril nodes implementation of the DMQ protocol in an end to end test. This fake DMQ node is implemented in the Mithril relay which now exposes the server sides of the n2c submission and notification mini-protocols. Once the Haskell DMQ node is ready, we will replace the fake DMQ node with the real implementation.\\n\\n### Prototyping SNARK circuit for Mithril certificates\\n\\nWe worked on creating a Mithril certificate with a multi-signature that meets specific requirements for on-chain deployment. The current concatenation proof approach does not meet these constraints, as it exceeds 150 kB with a full stake distribution of approximately 2,000 individual signatures. This size is too large for on-chain storage (our target is < 16 kB).\\n\\n#### Requirements and solution\\n\\nOur target requirements for the new approach are:\\n\\n- Certificate storage on-chain with size under **16 kB**\\n- Fast verification performance (**few milliseconds**)\\n- Relatively fast generation time (**few minutes**)\\n- On-chain verification capability.\\n\\nWe selected a SNARK generated with Halo2 as our solution, which provides:\\n\\n- Expected multi-signature size of **1-10 kB**\\n- Expected verification time of **1-10 ms**\\n- Expected generation time of **1-10 min**\\n- Available primitives for smart contracts.\\n\\n#### Implementation approaches\\n\\n**Faithful circuit transcription**: Our initial approach attempted to create a circuit that faithfully replicates the actual concatenation proof, including BLS verification of aggregated signatures, Merkle proof inclusion in signer registration, and eligibility check with lottery. However, this proved unrealistic as just the BLS verification alone required approximately **50 seconds** with **2^19 constraints** on a **48 CPU / 384 GB** machine.\\n\\n**Modified circuit transcription**: We then developed a circuit that verifies all individual signatures one by one and makes sure that the lottery indices reach the quorum. We needed to modify the curve, individual signatures, hash function, and lottery function. This approach proved very efficient for approximately **2,000** signatures, achieving a certificate size of **4 kB**, verification time of **7 ms**, and generation time of **6 minutes**.\\n\\n**ALBA proof circuit**: We also tested an ALBA proof implementation and this approach proved even more efficient, maintaining the same **4 kB** certificate size and **7 ms** verification time while reducing generation time to just **1.5 minutes**.\\n\\nAdditionally, we also tested IVC (recursive SNARK) to limit the number of constraints, though this showed no substantial gain over the other approaches.\\n\\n#### Roadmap\\n\\n**Short term**: Assess the minimal modifications needed for STM implementation, create a full report, adapt the STM library for SNARK compatibility (a breaking change that will require a Mithril era upgrade), and verify a Mithril certificate in a smart contract.\\n\\n**Mid term**: Deploy a SNARK for Mithril certificates on mainnet, audit both the STM and SNARK implementations, and implement ALBA, *Fait accompli*, and their corresponding SNARKs.\\n\\n**Long term**: Evaluate folding and recursive techniques for creating a SNARK of the entire certificate chain.\\n\\n### Protocol status\\n\\nThe protocol operated smoothly on the `release-mainnet` network with the following metrics:\\n\\n- **Registered stake**: `4.7B\u20b3` (`22%` of the Cardano network)\\n- **Registered SPOs**: `249` (`9%` of the Cardano network)\\n- **Full Cardano database restorations**: `710` restorations\\n- **Signer software adoption**: `82.9%` of the SPOs are running a recent version (one of the last three releases).\\n\\nYou can find more information on the [Mithril protocol insights dashboard](https://lookerstudio.google.com/s/mbL23-8gibI).\\n\\n## Hydra\\n\\n[Issues and pull requests closed in August](https://github.com/cardano-scaling/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2025-08-01..2025-08-31)\\n\\n![The roadmap with features and ideas](./img/hydra-roadmap-2025-06.png)\\n<small><center>Snapshot of the new [roadmap](https://github.com/orgs/cardano-scaling/projects/7/views/6) with features and ideas</center></small>\\n\\nThis month, notable [roadmap](https://github.com/orgs/cardano-scaling/projects/7/views/6) updates include:\\n\\n### [0.22.4 Release](https://github.com/cardano-scaling/hydra/releases/tag/0.22.4)\\n\\nThis release builds on 0.22.0 and includes many important fixes\\nobserved while testing Hydra for a large operational use case. In particular, we:\\n\\n- Fixed the API not correctly dealing with log rotation\\n- Reduced message spam in the presence of mirror nodes\\n- Fix a bug with an internal queue causing a deadlock\\n- Fixed an issue with `etcd` lease renewal\\n- Implemeneted a workaround for a blocking bug observed with `etcd`\\n- Fixed a bug where the hydra-node could stall after a restart (during `ReplayingState`)\\n- Dropped transactions that could lead to a stuck head.\\n\\n\\n### Partial Ada commits\\n\\nNot yet released, but on `master` you can now commit part of the UTXO input:\\n[#2140](https://github.com/cardano-scaling/hydra/issues/2140). Thanks to\\naniadev for the great feature request!\\n\\n### Hydra Doom at RareEvo (again!)\\n\\n[hydra-doom](https://github.com/cardano-scaling/hydra-doom) returned to Rare Evo 2025. This time running on hydra 0.22.4 on a public network (preprod).\\n\\nThis ran on an ASUS NUC 14 with an N97 chip and 16 GB of RAM, allowing us to run both the Hydra head and a full preprod node directly on the device using the UTxO-HD on-disk backend from cardano-node.\\n\\n\\n### Example grafana dashboard for node operators\\n\\nWe delivered a minimal monitoring setup using Prometheus and Grafana to provide insight into Hydra node activity, including snapshot processing and peer connectivity.\\n\\nThis was added as part of the _Getting Started_ tutorial, making it easier for users to quickly visualize the exposed node metrics.\\n\\n> The setup focused exclusively on metrics exposed by Hydra nodes and did not include system-level metrics such as CPU, memory, disk, or network usage.\\n\\n![](img/2025-08-hydra-monitoring.png)\\n\\n**Acknowledgment:** This dashboard was largely based on the work originally done by @jmagan \u2014 thanks for laying the groundwork! \ud83d\ude4f\\n\\n### Roadmap update\\n\\n- Delivered all the essential features for the Glacier Drop\\n- Working towards a lightweight Hydra node PoC\\n- Working towards inter-head payments via a HTLC PoC\\n- Investigating partial fanout.\\n\\n![](img/2025-08-hydra-roadmap.png)\\n\\n## Links\\n\\nThe monthly review meeting for August 2025 took place on August 27, 2025, via Google Meet.\\nThe presentation [slides][slides] and the [recording][recording] are available for review.\\n\\n[slides]: https://docs.google.com/presentation/d/1yQKsqoTv1MAV4g6Ujt42dRKeT714v75Tqgmnd-y7VuE/edit?usp=sharing\\n[recording]: https://drive.google.com/file/d/1D3kIhjlL-8fNeYVDktm4l9qyyGKcJD3k/view?usp=sharing"},{"id":"2025-06","metadata":{"permalink":"/monthly/2025-06","editUrl":"https://github.com/cardano-scaling/website/tree/master/monthly/2025-06-monthly.md","source":"@site/monthly/2025-06-monthly.md","title":"June 2025","description":"This is a monthly report on the progress of \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects since June 2025. It serves as preparation for, and a written summary of, the monthly stakeholder review meeting. The meeting is announced on our Discord channels and held on Google Meet. This month, the meeting took place on June 25, 2025, using these slides, and you can see the recording here.","date":"2025-07-15T10:27:56.000Z","formattedDate":"July 15, 2025","tags":[{"label":"monthly","permalink":"/monthly/tags/monthly"}],"readingTime":4.8,"hasTruncateMarker":false,"authors":[{"name":"Jean-Philippe Raynaud","title":"Software Engineering Lead, IOG","url":"https://github.com/jpraynaud","imageURL":"https://github.com/jpraynaud.png","key":"jpraynaud"},{"name":"Noon van der Silk","title":"Software Engineering Lead, IOG","url":"https://github.com/noonio","imageURL":"https://github.com/noonio.png","key":"noonio"},{"name":"Sebastian Nagel","title":"Software Engineering Lead, IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"}],"frontMatter":{"title":"June 2025","slug":"2025-06","authors":["jpraynaud","noonio","ch1bo"],"tags":["monthly"]},"unlisted":false,"prevItem":{"title":"August 2025","permalink":"/monthly/2025-08"},"nextItem":{"title":"May 2025","permalink":"/monthly/2025-05"}},"content":"This is a monthly report on the progress of \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects since June 2025. It serves as preparation for, and a written summary of, the monthly stakeholder review meeting. The meeting is announced on our Discord channels and held on Google Meet. This month, the meeting took place on June 25, 2025, using these [slides][slides], and you can see the [recording here][recording].\\n\\n## Mithril\\n\\n[Issues and pull requests closed in June](https://github.com/input-output-hk/mithril/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2025-06-01..2025-06-30)\\n\\n### Roadmap\\n\\nBelow are the latest updates on our roadmap:\\n\\n- **DMQ signature diffusion prototype** [#2402](https://github.com/input-output-hk/mithril/issues/2402). We have started the second phase of the implementation of the DMQ signature diffusion prototype\\n- **Redesign the website and improve documentation** [#2051](https://github.com/input-output-hk/mithril/issues/2051). The new home page has been deployed on the website\\n- **Refactor STM library** [#2567](https://github.com/input-output-hk/mithril/issues/2567). We have completed the first phase of the refactoring of the STM library, and we have started the second phase.\\n\\n### Distributions\\n\\nIn June, we have completed the following events:\\n\\n- Released the new distribution [`2524`](https://github.com/input-output-hk/mithril/releases/tag/2524.0)\\n- Activated support for UTXO-HD in the Mithril client CLI\\n- Prepared for the switch to the new Cardano database certification backend.\\n\\nIn July, the following events are planned:\\n\\n- Release of a new distribution (`2529`).\\n\\n### Dev blog\\n\\nWe have published the following post:\\n\\n- [Switching to Cardano database incremental certification](https://mithril.network/doc/dev-blog/2025/06/17/client-cli-cardano-database-backends)\\n- [UTXO-HD ledger state snapshot converter command in client CLI](https://mithril.network/doc/dev-blog/2025/06/16/client-cli-utxo-snapshot-converter-command)\\n- [Distribution `2524` is now available](https://mithril.network/doc/dev-blog/2025/06/16/distribution-2524).\\n\\n### New website homepage\\n\\nWe launched a redesigned [homepage](https://mithril.network) with a modern look, improved navigation, and better accessibility.\\n\\n![The new homepage](./img/2025-06-mithril-website.png)\\n<small><center>Snapshot of the new homepage</center></small>\\n\\n### DMQ implementation update\\n\\nHere is the current status of the DMQ implementation:\\n\\n| **Mini-protocols** | **Pallas** | **Mithril Signer** | **Mithril Aggregator** | **Haskell DMQ Node** |\\n| ------------------ | :--------: | :----------------: | :--------------------: | :------------------: |\\n| N2C Submission     |     \u2713      |         \u2713          |           -            |    _In progress_     |\\n| N2C Notification   |     \u2713      |         -          |           \u2713            |    _In progress_     |\\n| N2N Diffusion      |     -      |         -          |           -            |    _In progress_     |\\n\\nNext, we will complete an end to end test with a fake DMQ node and gradually replace it with the real Haskell DMQ node implementation. Our goal is to operate the DMQ network on a testnet.\\n\\n### Cardano database certification backend update\\n\\nThe Cardano node database v2 certification offers incremental verification and greater efficiency compared to the original method. It will progressively replace the current certification process for the Cardano node internal database.\\n\\nIn particular, the `cardano-db` command in the Mithril client CLI has been updated to support the new incremental certification process and eventually a seamless switch to the new backend. A new `--backend` option has been added to the command, allowing users to specify the certification version:\\n\\n- `--backend v1` uses the original Cardano node database certification (this remains the default)\\n- `--backend v2` enables the new incremental Cardano node database certification.\\n\\nWe will progressively switch to the new backend in the coming months, a full schedule is available in this blog post: [Switching to Cardano database incremental certification](https://mithril.network/doc/dev-blog/2025/06/17/client-cli-cardano-database-backends).\\n\\n### UTxO-HD ledger state snapshot converter command in client CLI\\n\\nWith the release of the new 2524 distribution, the `tools` command has been added to the Mithril client CLI. The new `tools utxo-hd snapshot-converter` subcommand simplifies node bootstrapping by converting the restored ledger state snapshot into the required UTxO-HD flavor (`LMDB` or `Legacy`).\\n\\nThe following command can be used to convert a restored ledger state snapshot into the UTXO-HD flavor:\\n\\n```bash\\n./mithril-client --unstable tools utxo-hd snapshot-converter --db-directory $DB_DIRECTORY --cardano-node-version 10.1.4 --utxo-hd-flavor $UTXO_HD_FLAVOR --cardano-network $CARDANO_NETWORK\\n```\\n\\nMore information is available in the [UTXO-HD ledger state snapshot converter command in client CLI](https://mithril.network/doc/dev-blog/2025/06/16/client-cli-utxo-snapshot-converter-command) dev blog post.\\n\\n### Verify existing Cardano database with client CLI\\n\\nWe have created a new command in the Mithril client CLI to verify an existing Cardano database. This command allows users to check the integrity of their Cardano node database and ensure it is authentic. The tool has not been released yet, but it is available in the [`unstable`](https://github.com/input-output-hk/mithril/releases/tag/unstable) release of the Mithril client CLI.\\n\\nHere is an example of how to use the command:\\n\\n```bash\\n./mithril-client --unstable cardano-db verify --db-directory $DB_DIRECTORY\\n```\\n\\n### Protocol status\\n\\nThe protocol operated smoothly on the `release-mainnet` network with the following metrics:\\n\\n- **Registered stake**: `4.7B\u20b3` (`21%` of the Cardano network)\\n- **Registered SPOs**: `247` (`9%` of the Cardano network)\\n- **Full Cardano database restorations**: `185` restorations\\n- **Signer software adoption**: `81.1%` of the SPOs are running a recent version (one of the last three releases).\\n\\nYou can find more information on the [Mithril protocol insights dashboard](https://lookerstudio.google.com/s/mbL23-8gibI).\\n\\n## Hydra\\n\\n[Issues and pull requests closed in June](https://github.com/cardano-scaling/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2025-06-01..2025-06-30)\\n\\n![The roadmap with features and ideas](./img/hydra-roadmap-2025-06.png)\\n<small><center>Snapshot of the new [roadmap](https://github.com/orgs/cardano-scaling/projects/7/views/6) with features and ideas</center></small>\\n\\nThis month, notable [roadmap](https://github.com/orgs/cardano-scaling/projects/7/views/6) updates include:\\n\\n### [0.22.0 Release](https://github.com/cardano-scaling/hydra/releases/tag/0.22.0)\\n\\n- Important security fix for security advisory: [Dangerous L1 event finality assumptions and Failed transactions not considered](https://github.com/cardano-scaling/hydra/security/advisories/GHSA-qr9f-mpgf-wp25)\\n- Event log rotation feature; `--persistence-rotate-after 10000` to rotate after seeing 10k events\\n- The `etcd` binary is now embedded into the binary, and _used by default_\\n  Disable with `--use-system-etcd`\\n- New `/head` HTTP endpoint to get status of the head\\n- UX improvements to diagnose `etcd` connection problems.\\n\\n### New working group\\n\\nHydra working group \u2192 Layer 2 working group!\\n\\nMore details here: [wg-layer2](https://github.com/cardano-scaling/wg-layer2).\\n\\n### Roadmap update\\n\\n- We are focused on supporting the Glacier Drop, and are working on improving\\n  our failure resilience\\n- We are also working on improving the UX around etcd/networking errors\\n- We are aiming to implement a HTLC between Hydra heads, to form a pathway to Bitcoin lightning integration.\\n\\n## Links\\n\\nThe monthly review meeting for June 2025 took place on June 25, 2025, via Google Meet.\\nThe presentation [slides][slides] and the [recording][recording] are available for review.\\n\\n[slides]: https://docs.google.com/presentation/d/1rkEr9zPWY7MH7sRACYZ2ENDLQtccUYeBPJaC-za7-Ew/edit?slide=id.g1f87a7454a5_0_1392#slide=id.g1f87a7454a5_0_1392\\n[recording]: https://drive.google.com/file/d/1lpUWYeWjHFqHjCu3USjf8rtj4t7OJ2fA/view?usp=drive_link"},{"id":"2025-05","metadata":{"permalink":"/monthly/2025-05","editUrl":"https://github.com/cardano-scaling/website/tree/master/monthly/2025-05-monthly.md","source":"@site/monthly/2025-05-monthly.md","title":"May 2025","description":"This is a monthly report on the progress of \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects since April 2025. It serves as preparation for, and a written summary of, the monthly stakeholder review meeting. The meeting is announced on our Discord channels and held on Google Meet. This month, the meeting took place on May 28, 2025, using these slides, and you can see the recording here.","date":"2025-06-18T17:01:19.000Z","formattedDate":"June 18, 2025","tags":[{"label":"monthly","permalink":"/monthly/tags/monthly"}],"readingTime":6.49,"hasTruncateMarker":false,"authors":[{"name":"Jean-Philippe Raynaud","title":"Software Engineering Lead, IOG","url":"https://github.com/jpraynaud","imageURL":"https://github.com/jpraynaud.png","key":"jpraynaud"},{"name":"Noon van der Silk","title":"Software Engineering Lead, IOG","url":"https://github.com/noonio","imageURL":"https://github.com/noonio.png","key":"noonio"},{"name":"Sebastian Nagel","title":"Software Engineering Lead, IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"}],"frontMatter":{"title":"May 2025","slug":"2025-05","authors":["jpraynaud","noonio","ch1bo"],"tags":["monthly"]},"unlisted":false,"prevItem":{"title":"June 2025","permalink":"/monthly/2025-06"},"nextItem":{"title":"April 2025","permalink":"/monthly/2025-04"}},"content":"This is a monthly report on the progress of \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects since April 2025. It serves as preparation for, and a written summary of, the monthly stakeholder review meeting. The meeting is announced on our Discord channels and held on Google Meet. This month, the meeting took place on May 28, 2025, using these [slides][slides], and you can see the [recording here][recording].\\n\\n## Mithril\\n\\n[Issues and pull requests closed in May](https://github.com/input-output-hk/mithril/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2025-05-01..2025-05-30)\\n\\n### Roadmap\\n\\nBelow are the latest updates on our roadmap:\\n\\n- **DMQ signature diffusion prototype** [#2402](https://github.com/input-output-hk/mithril/issues/2402): We have started the second phase of the implementation of the DMQ signature diffusion prototype\\n- **Cardano database incremental snapshots MVP** [#2047](https://github.com/input-output-hk/mithril/issues/2047): We have activated the incremental snapshots on the `release-mainnet` network\\n- **Redesign the website and improve documentation** [#2051](https://github.com/input-output-hk/mithril/issues/2051): The home page redesign is in progress.\\n\\n### Distributions\\n\\nIn May, we have completed the following events:\\n\\n- Release of the new distribution [`2517`](https://github.com/input-output-hk/mithril/releases/tag/2517.1)\\n- Release of the security advisory [`GHSA-qv97-5qr8-2266`](https://github.com/input-output-hk/mithril/security/advisories/GHSA-qv97-5qr8-2266)\\n- Activation of the incremental Cardano database certification (Cardano DB v2) on the `release-mainnet` network.\\n\\nIn June, the following events are planned:\\n\\n- Release of a new distribution (`2523`).\\n\\n### Dev blog\\n\\nWe have published the following post:\\n\\n- [Mithril Cardano database snapshots security advisory](https://mithril.network/doc/dev-blog/2025/05/07/client-security-advisory)\\n- [Breaking changes in client library and CLI](https://mithril.network/doc/dev-blog/2025/05/06/client-breaking-change)\\n- [Distribution `2517` is now available](https://mithril.network/doc/dev-blog/2025/05/05/distribution-2517).\\n\\n### Signing ancillary files of the Cardano database\\n\\nHere is a summary of the recent changes related to the signing of ancillary files in the Cardano database, and of the next steps for signing them with the Mithril protocol:\\n\\n#### Cardano database certification (v1 and v2)\\n\\n- The Cardano database files, including ledger state snapshots and the last immutable file, differ across signers, which prevents Mithril from signing them.\\n- This inconsistency poses a risk, as it may be exploited in long-range attacks, especially when multiple aggregators are involved.\\n- A security alert has been published regarding this issue: GHSA-qv97-5qr8-2266.\\n\\n#### Signing ancillary files with IOG key\\n\\n- The aggregator now signs ancillary files using GCP KMS and the IOG (Ancillary) key.\\n- The same `Ed25519` scheme as Genesis key signing is used for this process.\\n- This change introduces a breaking change in the latest Mithril client, affecting both the Library and CLI.\\n- Users now have the option to download immutable files either with or without ancillary files.\\n\\n#### Signing ledger state snapshot with Mithril STM\\n\\n- Signing the ledger state snapshot with Mithril STM requires synchronized snapshots across all Cardano nodes.\\n- If the process is deterministic, it becomes vulnerable to targeted attacks; therefore, a random delay per node should be used.\\n- The signing should occur only once per epoch, and a new data type for signing will be introduced.\\n\\n#### All nodes must truncate the last immutable file at the same point at signing time\\n\\n- The existing tools for this include the `db-truncater` CLI, which is complex and requires database duplication.\\n- Another available tool is Pallas `Hardano` from TxPipe, which can be used for chunk and index truncation.\\n- Alternatively, it is possible to avoid embedding the last immutable file altogether.\\n\\n#### Implementation in a multi-node implementations ecosystem\\n\\n- Implementing this in a multi-node ecosystem requires canonical formats for ledger state snapshots and immutable files.\\n- These canonical formats must be portable across all Cardano node implementations.\\n- A new CIP (Cardano Improvement Proposal) is currently being developed to standardize these formats.\\n\\n### Protocol status\\n\\nThe protocol operated smoothly on the `release-mainnet` network with the following metrics:\\n\\n- **Registered stake**: `4.6B\u20b3` (`21%` of the Cardano network)\\n- **Registered SPOs**: `240` (`9%` of the Cardano network)\\n- **Full Cardano database restorations**: `600` restorations\\n- **Signer software adoption**: `72.2%` of the SPOs are running a recent version (one of the last three releases).\\n\\nYou can find more information on the [Mithril protocol insights dashboard](https://lookerstudio.google.com/s/mbL23-8gibI).\\n\\n## Hydra\\n\\n[Issues and pull requests closed in May](https://github.com/cardano-scaling/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2025-05-01..2025-05-30)\\n\\n![The roadmap with features and ideas](./img/2025-05-hydra-roadmap.png)\\n<small><center>Snapshot of the new [roadmap](https://github.com/orgs/cardano-scaling/projects/7/views/6) with features and ideas</center></small>\\n\\nThis month, notable [roadmap](https://github.com/orgs/cardano-scaling/projects/7/views/6) updates include:\\n\\n### [0.21.0 Release](https://github.com/cardano-scaling/hydra/releases/tag/0.21.0)\\n\\nWe\'re very excited about this one as it is a huge release incorporating the\\ncompletely new networking layer via etcd. This means a few changes to the\\ncommand-line arguments (which you can read about in the [release\\nnotes](https://github.com/cardano-scaling/hydra/releases/tag/0.21.0)).\\nOther important features are bounded memory usage, and some important bugfixes\\naround the observation of increments; but there is much more to read about in\\nthe changelog! Go and grab the latest version now!\\n\\n### Deposit fixes\\n\\nOver the last two months, we have been fixing the incremental commit workflow and making it more robust against various edge cases related to rollbacks. Before, the `hydra-node` was very optimistic when observing a deposit posted to the chain, while possibility of double spends of the deposited funds must be prevented in presence of rollbacks. \\n\\nThis is now done by introducing a deposit period, which limits the minimum and maximum age of a deposit to be considered. The `--deposit-period` command line option supersedes `--deposit-deadline` which was only setting the time before a deposit may be picked up. The picture below shows the life cycle of a deposit which is only considered **active** after one deposit period has passed, and it is considered **expired** if less then a deposit period is left before the deadline; from where onwards a user may recover the funds. The upper validity bound of the deposit transaction is used as a starting point and we also added server outputs to signal activation and expiry of deposits. A query endpoint to list all known deposits is not avaiable right now, but likely introduced in course of doing [hydra#1812](https://github.com/cardano-scaling/hydra/issues/1812).\\n\\n![](./img/2025-05-hydra-deposits.jpg)\\n\\nSee also the [developer documentation](https://hydra.family/head-protocol/unstable/docs/dev/protocol#rollback-resistance) for more details about rollback resistance, while the [user manual](https://hydra.family/head-protocol/unstable/docs/configuration#deposit-period) has more practical advice on how to configure the deposit period.\\n\\n### Blockfrost integration\\n\\nAfter making posible to publish hydra scripts using Blockfrost we continued\\nwith the integration so now `hydra-node` can run using a Blockfrost backend.\\nThis option makes running the `hydra-node` a bit easier since one does not need\\nto run local `cardano-node` to connect to which greatly simplifies the setup.\\n\\nBlockfrost is videly used so making this integration possible in `hydra-node`\\nshould make experimenting and prototyping with Hydra more approachable.\\n\\n### Event log rotation\\n\\nEvent log rotation was introduced to improve recovery times by reducing the number of events that need to be replayed on startup. This is achieved by periodically replacing the current event log with a new one that starts from a checkpoint event, which captures the latest aggregated head state.\\n\\nOnly the rotated logs are saved with an incrementing logId, while the main state file name remains unchanged to preserve backward compatibility. Rotation can be enabled via the new optional --persistence-rotate-after command line option, which specifies the number of events after which rotation should occur.\\n\\nAdditionally, a server output was added to notify external agents when a checkpoint occurs, enabling them to perform archival or cleanup actions without interrupting the Hydra head.\\n\\n### Coding standards as a flake module\\n\\nIn order to better standardise code quality across multiple repositories, we have extracted\\nall of our quality control tooling to a flake-parts module called [hydra-coding-standards](https://github.com/cardano-scaling/hydra-coding-standards).\\nThis contains all kinds of formatting checks, dead code elimination, and static analysis checks\\nfor haskell and nix, as well as typo checking. We are rolling these standardisation checks to more\\ncardano-scaling repositories, which will enable a more uniform experience for active and external contributors.\\n\\n### Roadmap update\\n\\nWe continue to focus on UX improvements and better logging/errors, while also\\nstarting to tackle more of the user-reported bugs and feature requests.\\n\\n## Links\\n\\nThe monthly review meeting for May 2025 took place on May 28, 2025, via Google Meet.\\nThe presentation [slides][slides] and the [recording][recording] are available for review.\\n\\n[slides]: https://docs.google.com/presentation/d/1iWbN_V3gku4Uwbvl1F8x8Dhi5M_E2nuidrb7oi1XjwE/edit?slide=id.g1f87a7454a5_0_1392#slide=id.g1f87a7454a5_0_1392\\n[recording]: https://drive.google.com/file/d/1qdOu_3WXXxEbQg-IhVdgZFENgJKX2o6A/view?usp=sharing"},{"id":"2025-04","metadata":{"permalink":"/monthly/2025-04","editUrl":"https://github.com/cardano-scaling/website/tree/master/monthly/2025-04-monthly.md","source":"@site/monthly/2025-04-monthly.md","title":"April 2025","description":"This is a monthly report on the progress of \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects since March 2025. It serves as preparation for, and a written summary of, the monthly stakeholder review meeting. The meeting is announced on our Discord channels and held on Google Meet. This month, the meeting took place on April 24, 2025, using these slides, and you can see the recording here.","date":"2025-05-21T15:03:17.000Z","formattedDate":"May 21, 2025","tags":[{"label":"monthly","permalink":"/monthly/tags/monthly"}],"readingTime":4.9,"hasTruncateMarker":false,"authors":[{"name":"Jean-Philippe Raynaud","title":"Software Engineering Lead, IOG","url":"https://github.com/jpraynaud","imageURL":"https://github.com/jpraynaud.png","key":"jpraynaud"},{"name":"Noon van der Silk","title":"Software Engineering Lead, IOG","url":"https://github.com/noonio","imageURL":"https://github.com/noonio.png","key":"noonio"},{"name":"Sebastian Nagel","title":"Software Engineering Lead, IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"}],"frontMatter":{"title":"April 2025","slug":"2025-04","authors":["jpraynaud","noonio","ch1bo"],"tags":["monthly"]},"unlisted":false,"prevItem":{"title":"May 2025","permalink":"/monthly/2025-05"},"nextItem":{"title":"March 2025","permalink":"/monthly/2025-03"}},"content":"This is a monthly report on the progress of \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects since March 2025. It serves as preparation for, and a written summary of, the monthly stakeholder review meeting. The meeting is announced on our Discord channels and held on Google Meet. This month, the meeting took place on April 24, 2025, using these [slides][slides], and you can see the [recording here][recording].\\n\\n## Mithril\\n\\n[Issues and pull requests closed in April](https://github.com/input-output-hk/mithril/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2025-04-01..2025-04-30)\\n\\n### Roadmap\\n\\nBelow are the latest updates on our roadmap:\\n\\n- **Mithril/ALBA aggregation proof system PoC** [#2403](https://github.com/input-output-hk/mithril/issues/2403): we have completed the proof of concept for the implementation of the new aggregation proof system based on ALBA\\n- **DMQ signature diffusion prototype** [#2402](https://github.com/input-output-hk/mithril/issues/2402): we have started the first phase of the implementation of the DMQ signature diffusion prototype\\n- **Cardano database incremental snapshots MVP** [#2047](https://github.com/input-output-hk/mithril/issues/2047): we have rolled-out the feature on the `pre-release-preview` and `release-preprod` networks, The activation of the incremental snapshots on the `release-mainnet` network is planned for next month\\n- **Multiple aggregators on a Mithril Network PoC** [#2238](https://github.com/input-output-hk/mithril/issues/2238): we have adapted the infrastructure to support this feature on selected test networks\\n- **Redesign the website and improve documentation** [#2051](https://github.com/input-output-hk/mithril/issues/2051): the home page redesign is in progress.\\n\\n### Distributions\\n\\nIn May, the following events are planned:\\n\\n- Release of a new distribution (`2517`)\\n- Activation of the incremental Cardano database certification (Cardano DB v2) on the `release-mainnet` network.\\n\\n### Dev blog\\n\\nWe have published the following post:\\n\\n- [Certification of Cardano node database v2](https://mithril.network/doc/dev-blog/2025/04/14/cardano-node-database-v2-certification)\\n\\n### New aggregation proof system with ALBA (PoC)\\n\\nThe current proof system used for Mithril aggregation is the Concatenation proof system, which has the following properties:\\n\\n- The size of the multi-signature increases quasi-linearly with the number of signers\\n- Verification is efficient, requiring only a single pairing operation, regardless of how many signers are involved\\n- It is not SNARK-friendly.\\n\\n[![The Concatenation aggregation proof system](./img/2025-04-mithril-concatenation-aggregation.jpg)](./img/2025-04-mithril-concatenation-aggregation.jpg)\\n<small><center>The Concatenation aggregation proof system</center></small>\\n\\nDuring the development of this proof of concept, we explored the following questions:\\n\\n- Is it possible to utilize the ALBA proof system to reduce the size of the multi-signature while maintaining fast verification?\\n- Can different proof systems, such as Concatenation and Centralized ALBA, be combined within an aggregator\'s certificate chain?\\n- What are the implications of introducing a new aggregation proof system on the overall Mithril network?\\n\\nUsing the **Centralized ALBA proof system**, we\'ve been able to draw the following conclusions::\\n\\n- Mithril multi-signatures can be compressed to reduce their size while still enabling fast verification\\n- No changes are needed on the Mithril signer side, simplifying deployment\\n- It is possible to combine different types of proofs within a single certificate chain\\n- Different aggregators within the same Mithril network can operate using distinct proof systems\u2014for instance, a leader using the Concatenation proof system while a follower uses the Centralized ALBA proof system.\\n\\nThis proof of concept has surfaced several important questions and challenges:\\n\\n- Further research is needed to align Mithril and ALBA protocol parameters, ensuring equivalent levels of security and reliability\\n- Additional investigation is required to assess the achievable compression ratio of the Centralized ALBA proof system given the stake distribution on the Cardano mainnet\\n- We aim to explore the Decentralized ALBA proof system to determine whether it can offer improved compression while maintaining the same security and reliability \u2013 though this would involve significant changes to both the Mithril signer and aggregator due to a different lottery mechanism\\n\\n[![The Centralized ALBA aggregation proof system](./img/2025-04-mithril-centralized-alba-aggregation.jpg)](./img/2025-04-mithril-centralized-alba-aggregation.jpg)\\n<small><center>The Centralized ALBA aggregation proof system</center></small>\\n\\n### Protocol status\\n\\nThe protocol has operated smoothly on the `release-mainnet` network with the following metrics:\\nThe protocol operated smoothly on the `release-mainnet` network with the following metrics:\\n\\n- **Registered stake**: `4.8B\u20b3` (`21%` of the Cardano network)\\n- **Registered SPOs**: `247` (`9%` of the Cardano network)\\n- **Full Cardano database restorations**: `260` restorations\\n- **Signer software adoption**: `86.3%` of the SPOs are running a recent version (one of the last three releases).\\n\\nYou can find more information on the [Mithril protocol insights dashboard](https://lookerstudio.google.com/s/mbL23-8gibI).\\n\\n## Hydra\\n\\n[Issues and pull requests closed in April](https://github.com/cardano-scaling/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2025-04-01..2025-04-30)\\n\\n![The roadmap with features and ideas](./img/2025-04-hydra-roadmap.png)\\n<small><center>Snapshot of the new [roadmap](https://github.com/orgs/cardano-scaling/projects/7/views/6) with features and ideas</center></small>\\n\\nThis month, notable [roadmap](https://github.com/orgs/cardano-scaling/projects/7/views/6) updates include:\\n\\n- Bounded memory [#1618](https://github.com/cardano-scaling/hydra/issues/1618)\\n- Side-load of fully-signed snapshot [#1858](https://github.com/cardano-scaling/hydra/issues/1858)\\n- Etcd control via environment variables [#1883](https://github.com/cardano-scaling/hydra/issues/1883)\\n- Fixed memory bug when loading large state file [#1917](https://github.com/cardano-scaling/hydra/issues/1917)\\n- Investigated mirror nodes [#1910](https://github.com/cardano-scaling/hydra/pull/1910).\\n\\n### New metric, `peers_connected`\\n\\nWe created a new metric to be observed, `peers_connected`, which shows [the\\nnumber of peers presently connected to this\\nnode](https://hydra.family/head-protocol/unstable/docs/how-to/operating-hydra#monitoring).\\n\\n### Side-load snapshot tutorial\\n\\nA new tutorial showing how to use the \\"Sideload Snapshot\\" feature: [Sideload\\nSnapshot\\nTutorial](https://hydra.family/head-protocol/unstable/docs/how-to/sideload-snapshot).\\n\\n### Publish scripts with blockfrost\\n\\nThe hydra scripts can now be published by providing a blockfrost API key to\\nthe hydra-node. This is foreshadowing a full implementation of following the chain\\nwith Blockfrost! Stay tuned :)\\n\\n### Fixed memory leak\\n\\nA [one-character (!)] fix resulting in wildly less memory usage:\\n\\n![](./img/2025-04-memory.png)\\n\\n### API changes\\n\\nThe [transaction field has been removed from\\n`TxValid`](https://github.com/cardano-scaling/hydra/pull/1947), and support\\nfor Kupo has been restored pending the merging of this PR: [Fix Hydra\\nintegration](https://github.com/CardanoSolutions/kupo/pull/189).\\n\\n### Bugfixes/Release\\n\\n- Incremental commits to be considered a _beta_ feature since 0.20. Fixes\\n  incoming.\\n- Multiple other fixes:\\n  - Not observe invalid transactions [#1953](https://github.com/cardano-scaling/hydra/pull/1953)\\n  - Change default contestation period and deposit deadline [#1932](https://github.com/cardano-scaling/hydra/pull/1932)\\n  - Deposit not fanned out / observed wrong [#1915](https://github.com/cardano-scaling/hydra/issues/1915)\\n  - Transaction observation should not depend on off-chain state [#1895](https://github.com/cardano-scaling/hydra/issues/1895)\\n  - HeadIsFinalised event not reporting the UTXOs as observed on L1 [#1913](https://github.com/cardano-scaling/hydra/issues/1913)\\n\\n### Roadmap update\\n\\n- Focusing on Blockfrost and more memory fixes\\n- Working on deposit fixes and other UX improvements\\n\\n### Hiring\\n\\nJoin us!\\n\\n- [Product Manager](https://wrkbl.ink/8wAmz8A)\\n- [Software Engineer](https://wrkbl.ink/19Qk0M4)\\n\\n## Links\\n\\nThe monthly review meeting for April 2025 took place on April 24, 2025, via Google Meet.\\nThe presentation [slides][slides] and the [recording][recording] are available for review.\\n\\n[slides]: https://docs.google.com/presentation/d/1B8FM4k1EmUYSDdeIXhRiYMEIK9KiDoOQ-lMHVN9SzRs/edit?usp=sharing\\n[recording]: https://drive.google.com/file/d/1yFzWel2FzuOMG11-jkwODfazqN58s47W/view?usp=drive_link"},{"id":"2025-03","metadata":{"permalink":"/monthly/2025-03","editUrl":"https://github.com/cardano-scaling/website/tree/master/monthly/2025-03-monthly.md","source":"@site/monthly/2025-03-monthly.md","title":"March 2025","description":"This is a monthly report on the progress of \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects since February 2025.  It serves as preparation for, and a written summary of, the monthly stakeholder review meeting. The meeting is announced on our Discord channels and held on Google Meet. This month, the meeting took place on March 26, 2025, using these slides, and you can see the recording here.","date":"2025-04-10T05:36:29.000Z","formattedDate":"April 10, 2025","tags":[{"label":"monthly","permalink":"/monthly/tags/monthly"}],"readingTime":7.025,"hasTruncateMarker":false,"authors":[{"name":"Jean-Philippe Raynaud","title":"Software Engineering Lead, IOG","url":"https://github.com/jpraynaud","imageURL":"https://github.com/jpraynaud.png","key":"jpraynaud"},{"name":"Noon van der Silk","title":"Software Engineering Lead, IOG","url":"https://github.com/noonio","imageURL":"https://github.com/noonio.png","key":"noonio"},{"name":"Sebastian Nagel","title":"Software Engineering Lead, IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"}],"frontMatter":{"title":"March 2025","slug":"2025-03","authors":["jpraynaud","noonio","ch1bo"],"tags":["monthly"]},"unlisted":false,"prevItem":{"title":"April 2025","permalink":"/monthly/2025-04"},"nextItem":{"title":"February 2025","permalink":"/monthly/2025-02"}},"content":"This is a monthly report on the progress of \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects since February 2025.  It serves as preparation for, and a written summary of, the monthly stakeholder review meeting. The meeting is announced on our Discord channels and held on Google Meet. This month, the meeting took place on March 26, 2025, using these [slides][slides], and you can see the [recording here][recording].\\n\\n## Mithril\\n\\n[Issues and pull requests closed in March](https://github.com/input-output-hk/mithril/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2025-03-01..2025-03-31)\\n\\n### Roadmap\\n\\nBelow are the latest updates on our roadmap:\\n\\n- **Cardano database incremental snapshots MVP** [#2047](https://github.com/input-output-hk/mithril/issues/2047): we completed the implementation of the MVP for incremental snapshots of the Cardano database and plan to start releasing it on test networks next month.\\n- **Multiple aggregators on a Mithril Network PoC** [#2238](https://github.com/input-output-hk/mithril/issues/2238): we finalized the proof of concept (PoC) for multiple aggregators on a Mithril network. We are adapting the infrastructure to support this feature on selected test networks.\\n- **Redesign the website and improve documentation** [#2051](https://github.com/input-output-hk/mithril/issues/2051): the Home page redesign is in progress.\\n\\n### Distributions\\n\\nWe released Mithril distribution [`2513.0`](https://github.com/input-output-hk/mithril/releases/tag/2513.0), which includes:\\n\\n- \u26a0\ufe0f **Breaking** changes in Mithril nodes:\\n  - The **minimum required** `glibc` version for pre-built Linux binaries has been upgraded from `2.31` to `2.35`\\n  - Mithril signers running versions `<=0.2.200` **must be updated** due to the removal of Thales era legacy code\\n  - The `with_snapshot_uploader` function in the Mithril client library has been renamed to `with_file_uploader`\\n- Added support for Cardano node `10.2.1` in the signer and aggregator\\n- Ended support for **macOS x64 pre-built binaries** for the client CLI\\n- Bug fixes and performance improvements.\\n\\nIn April, the following events are planned:\\n\\n- Release of a new distribution\\n- Activation of the incremental Cardano database certification (Cardano DB v2) on the `pre-release-preview` and `release-preprod` network.\\n\\n### Dev blog\\n\\nWe have published the following post:\\n\\n- [Distribution `2513` is now available](https://mithril.network/doc/dev-blog/2025/03/28/distribution-2513)\\n\\n### Signer registration with multiple aggregators\\n\\nWe explored solutions for running multiple aggregators on the same Mithril network. This is a complex problem that requires consensus on signer registration among enough signers and aggregators so that at least the required quorum can be achieved. Currently, the aggregator stores signer registration payloads and distributes them back to signers a couple of epochs later. This is a centralized approach (a single point of failure) that may be subject to censorship, but there is no trust assumption on the aggregator because every party in the protocol independently verifies the cryptographic proofs included in the payloads.\\n\\nWe identified three possible solutions:\\n\\n1. **Extend the centralized approach to multiple aggregators**: slave aggregators pull signer registration payloads from the master aggregator at every epoch change, rejecting any registrations sent directly to their API. We prototyped this solution, which unlocks decentralized signature diffusion while maintaining a central authority for registration. 2.**Use the Cardano chain**: aggregators create a transaction to store their Mithril keys on chain at the start of each epoch. This approach is fully decentralized but more complex operationally. It requires SPOs to maintain a hot wallet for transaction creation, adding cost and maintenance. This is likely the more natural long-term solution.\\n2. **Use the DMQ**: the DMQ (Decentralized Message Queue as described in the [CIP-0137](https://github.com/cardano-scaling/CIPs/tree/master/CIP-0137)) is authenticated which means that we can detect adversary signers which would equivocate their signer registration (i.e. send different payloads to different peers on the network to create a split of the network and thus prevent reaching the quorum needed to create a Mithril multi-signature). Any peer on the network that would receive two different payloads from the same signer would create a proof of equivocation and broadcast it on the network. Upon reception of a valid equivocation proof, the other peers of the network would discard the registration from the adversary and reach an agreement on the signer registration. This solution would be fully decentralized and would not incur any cost for the SPOs. It is at a very early stage of exploration and we will keep working on it.\\n3. **Use the DMQ**: the DMQ (Decentralized Message Queue) described in [CIP-0137](https://github.com/cardano-scaling/CIPs/tree/master/CIP-0137) is authenticated, so the network can detect adversaries who equivocate signer registrations. If a signer attempts to submit conflicting payloads, other peers can broadcast a proof of equivocation, causing the network to discard the adversary\u2019s registration. This approach is fully decentralized and does not impose additional costs on SPOs. Exploration is in progress.\\n   [![The proposed signer registrations](./img/2025-03-mithril-signer-registration.jpg)](./img/2025-03-mithril-signer-registration.jpg)\\n   <small><center>The proposed signer registrations</center></small>\\n\\n### Protocol status\\n\\nThe protocol has operated smoothly on the `release-mainnet` network with the following metrics:\\nThe protocol operated smoothly on the `release-mainnet` network with the following metrics:\\n\\n- **Registered stake**: `4.6B\u20b3` (`21%` of the Cardano network)\\n- **Registered SPOs**: `246` (`9%` of the Cardano network)\\n- **Full Cardano database restorations**: `500` restorations\\n- **Signer software adoption**: `98.6%` of the SPOs are running a recent version (one of the last three releases).\\n\\nYou can find more information on the [Mithril protocol insights dashboard](https://lookerstudio.google.com/s/mbL23-8gibI).\\n\\n## Hydra\\n\\n[Issues and pull requests closed in March](https://github.com/cardano-scaling/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2025-03-01..2025-03-31)\\n\\n![The roadmap with features and ideas](./img/2025-03-hydra-roadmap.png)\\n<small><center>Snapshot of the new [roadmap](https://github.com/orgs/cardano-scaling/projects/7/views/6) with features and ideas</center></small>\\n\\nThis month, notable [roadmap](https://github.com/orgs/cardano-scaling/projects/7/views/6) updates include:\\n\\n- Bounded memory [#1618](https://github.com/cardano-scaling/hydra/issues/1618)\\n- Side-load of fully-signed snapshot [#1858](https://github.com/cardano-scaling/hydra/issues/1858)\\n- Etcd control via environment variables [#1883](https://github.com/cardano-scaling/hydra/issues/1883)\\n- Fixed memory bug when loading large state file [#1917](https://github.com/cardano-scaling/hydra/issues/1917)\\n- Investigated mirror nodes [#1910](https://github.com/cardano-scaling/hydra/pull/1910).\\n\\n### Etcd-based networking\\n\\nFeature: [#1720](https://github.com/cardano-scaling/hydra/issues/1720)\\n\\nThe `etcd`-based networking feature is now fully merged and has undergone several improvements. Highlights include bug fixes, [improved observability](https://github.com/cardano-scaling/hydra/pull/1884), [protocol version checking](https://github.com/cardano-scaling/hydra/pull/1914), and a breaking [change in command line options](https://github.com/cardano-scaling/hydra/pull/1891) (`--listen` and `--advertise`) see release notes for more details.\\n\\nExtensive testing through our friends working on the Midnight glacier drop makes us confident to release this soon as a cornerstone of the [`0.21.0` release](https://github.com/cardano-scaling/hydra/milestone/22?closed=1).\\n\\n### Bounded memory\\n\\nAfter preliminary work on bounding memory by [streaming events](https://github.com/cardano-scaling/hydra/pull/1808) and implementing the [API server as an event sink](https://github.com/cardano-scaling/hydra/pull/1860) last month, we achieved fully bounded memory usage of `hydra-node` when processing millions of transactions and loading from disk ([#1920](https://github.com/cardano-scaling/hydra/pull/1920)).\\n\\nA typical memory profile of a `hydra-node` using **~1GB** of memory when loading millions of transactions from the `state` file before this work:\\n\\n![](./img/2025-03-profile-before.svg)\\n\\nWhich indicates a Haskell-classic space leak because of thunk build-up. Indeed we spotted that `allTxs` in the `HeadState` was not fully forced when loading events from disk and with an additional strictness annotation, loading the same `state` file now while only using **12MB** of memory:\\n\\n![](./img/2025-03-profile-after.svg)\\n\\n### Mirror nodes\\n\\nWe explored mirror nodes to improve fault tolerance for Hydra heads. A participant can run multiple instances of `hydra-node` using the same `--hydra-signing-key` and `--cardano-signing-key`, allowing snapshot signing to continue even if one node goes down.\\n\\nPreliminary experiments showed this approach works without modifications to `hydra-node`, but:\\n - Each additional node increases the number of messages submitted through the Hydra network \\n - Too many mirrors of one party could imbalance the etcd quorum and make the network unavailable overall although there would be enough signers for the Hydra consensus.\\n\\n### Side-load snapshots\\n\\nFeature: [#1858](https://github.com/cardano-scaling/hydra/issues/1858)\\n\\nOriginally, we wanted to address so-called \'stuck\' heads to address ledger state divergence among Hydra nodes, we introduced [snapshot sideloading]( https://github.com/cardano-scaling/hydra/pull/1864). This mechanism allows nodes to adopt a confirmed snapshot to regain consensus when misalignment occurs, preventing the Hydra head from getting stuck and ensuring a consistent state across all nodes.\\n\\n### Withdraw zero trick\\n\\nFeature: [#1795](https://github.com/cardano-scaling/hydra/issues/1795)\\n\\nThis feature was requested by multiple users in [GitHub](https://github.com/cardano-scaling/hydra/issues/1795) and on our Discord channel, and it was identified as beneficial for the Midnight glacier drop.\\n\\nThe so-called \'withdraw zero trick\' is a common technique to achieve verification on a transaction level (once per tx). In fact, it\'s the only way to do this until [CIP-112](https://github.com/cardano-foundation/CIPs/blob/master/CIP-0112/README.md) gets implemented by the `cardano-ledger` (and `plutus`).\\n\\nWhile the layer 2 ledger in Hydra is isomorphic to Cardano with respect to the EUTXO ledger model, this excludes Cardano\'s proof-of-stake features. Consequently, one could not register scripts as reward accounts and use withdrawing `0 lovelace` as a trick to have those scripts validate transactions.\\n\\nTo implement this feature, @coll78 and @ch1bo found that the `hydra-node` can mock `RewardAccount`s for each `0 lovelace` withdrawal observed in a transaction on-the-fly. This results in the script being evaluated, and even does not require the script to be registered via a stake delegation certificate beforehand.\\n\\nSee [this new How-to](https://hydra.family/head-protocol/unstable/docs/how-to/withdraw-zero) for more details.\\n\\n## Links\\n\\nThe monthly review meeting for March 2025 took place on March 26, 2025, via Google Meet.\\nThe presentation [slides][slides] and the [recording][recording] are available for review.\\n\\n[slides]: https://docs.google.com/presentation/d/18MEu5jCGnNwkwKqEZ1HKj7mJeBB8sIgIfkJB4gGWmUk/edit\\n[recording]: https://drive.google.com/file/d/1WltowNB2APEM-gkS-7JAbYK57MeCkHqL/view"},{"id":"2025-02","metadata":{"permalink":"/monthly/2025-02","editUrl":"https://github.com/cardano-scaling/website/tree/master/monthly/2025-02-monthly.md","source":"@site/monthly/2025-02-monthly.md","title":"February 2025","description":"This is a monthly report on the progress of \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects since January 2025. This document serves as a preparation for and a written summary of the monthly stakeholder review meeting, which is announced on our Discord channels and held on Google Meet. This month, the meeting took place on February 26, 2025, using these slides, and you can see the recording here.","date":"2025-03-07T13:53:53.000Z","formattedDate":"March 7, 2025","tags":[{"label":"monthly","permalink":"/monthly/tags/monthly"}],"readingTime":4.12,"hasTruncateMarker":false,"authors":[{"name":"Jean-Philippe Raynaud","title":"Software Engineering Lead, IOG","url":"https://github.com/jpraynaud","imageURL":"https://github.com/jpraynaud.png","key":"jpraynaud"},{"name":"Noon van der Silk","title":"Software Engineering Lead, IOG","url":"https://github.com/noonio","imageURL":"https://github.com/noonio.png","key":"noonio"}],"frontMatter":{"title":"February 2025","slug":"2025-02","authors":["jpraynaud","noonio"],"tags":["monthly"]},"unlisted":false,"prevItem":{"title":"March 2025","permalink":"/monthly/2025-03"},"nextItem":{"title":"January 2025","permalink":"/monthly/2025-01"}},"content":"This is a monthly report on the progress of \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects since January 2025. This document serves as a preparation for and a written summary of the monthly stakeholder review meeting, which is announced on our Discord channels and held on Google Meet. This month, the meeting took place on February 26, 2025, using these [slides][slides], and you can see the [recording here][recording].\\n\\n## Mithril\\n\\n[Issues and pull requests closed in February](https://github.com/input-output-hk/mithril/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2025-02-01..2025-02-28)\\n\\n\\n### Roadmap\\n\\nBelow are the latest updates on our roadmap:\\n\\n- **Cardano database incremental snapshots MVP** [#2047](https://github.com/input-output-hk/mithril/issues/2047): we have started the optimization and production readiness phase on the MVP for incremental snapshots of the Cardano database\\n- **Redesign the website and improve documentation** [#2051](https://github.com/input-output-hk/mithril/issues/2051): the **Mithril certification** section has been created. Home page redesign is in progress.\\n\\n### Distributions\\n\\nWe released Mithril distribution [`2506.0`](https://github.com/input-output-hk/mithril/releases/tag/2506.0), which includes:\\n\\n- \u26a0\ufe0f **Security**:\\n  - This distribution embeds a fix for the **Mithril certificate chain could be manipulated by an adversarial signer** security advisory [GHSA-724h-fpm5-4qvr](https://github.com/input-output-hk/mithril/security/advisories/GHSA-724h-fpm5-4qvr)\\n  - All users running a **client library, client CLI or client WASM** are **strongly encouraged** to update them to the latest version\\n- Stable support for **Cardano node** `10.1.4` in the signer and the aggregator\\n- Dropped support for `Thales` era in the signer and the aggregator\\n- Stable support for traffic compression in signer, aggregator and client\\n- Bug fixes and performance improvements.\\n\\nIn February, the following events have taken place:\\n\\n- Switch to the **Pythagoras** era on the `release-mainnet` network (which occurred at transition to epoch `539`)\\n- Re-genesis of the certificate chain of the `release-mainnet` network (which occurred at the end of epoch `539`).\\n\\nIn March, the following events are planned:\\n\\n- Release of a new distribution\\n\\n### Dev blog\\n\\nWe have published the following posts:\\n\\n- [Minimum required `glibc` version bump](https://mithril.network/doc/dev-blog/2025/02/04/glibc-minimum-requirement-change)\\n- [Distribution `2506` is now available](https://mithril.network/doc/dev-blog/2025/02/14/distribution-2506)\\n- [Mithril certificate chain security advisory](https://mithril.network/doc/dev-blog/2025/02/14/client-security-advisory)\\n- [Decommissioning the `testing\u2011sanchonet` network](https://mithril.network/doc/dev-blog/2025/02/18/testing-sanchonet-decommission)\\n- [Ending support for macOS x64 pre-built binaries](https://mithril.network/doc/dev-blog/2025/02/18/end-of-support-macos-x64).\\n\\n### Incremental Cardano DB certification\\n\\nWe have worked on the implementation of the client library, CLI and WASM to support the incremental Cardano DB certification. This feature allows the Mithril client to restore a partial Cardano database rather than the full one, by providing a range of immutable files:\\n\\n- Restoration up to a given immutable file\\n- Restoration from a given immutable file\\n- Restoration for a range of immutable files\\n- Full restoration of all the immutable files.\\n\\nWe will keep working on stabilizing and optimizing the feature to make it ready for production.\\n\\n### New \'Mithril certification\' section on the website\\n\\nWe have created a new section on the website to provide a better understanding of the Mithril certification process. You can find it on the [Mithril certification page](https://mithril.network/doc/mithril/advanced/mithril-certification/).\\n\\nThe section includes:\\n\\n- **Mithril certification**: an overview of the Mithril certification process\\n- **Cardano transactions**: a detailed description of the Cardano transactions certification process\\n- **Cardano stake distribution**: a detailed description of the Cardano stake distribution certification process\\n- **Cardano node database**: a detailed description of the Cardano database certification process\\n- **Cardano node database v2**: a detailed description of the upcoming incremental Cardano database certification process.\\n\\n![Mithril certification section on the documentation website](./img/2025-02-mithril-certification-website.png)\\n<small><center>The Cardano transactions certification page on the new \'Mithril certification\' section</center></small>\\n\\n### Protocol status\\n\\nThe protocol has operated smoothly on the `release-mainnet` network with the following metrics:\\n\\n- **Registered stake**: `4.7B\u20b3` (`22%` of the Cardano network)\\n- **Registered SPOs**: `248` (`9%` of the Cardano network)\\n- **Full Cardano database restorations**: `325` restorations\\n- **Signer software adoption**: `99.9%` of the SPOs are running a recent version (one of the last three releases).\\n\\nYou can find more information on the [Mithril protocol insights dashboard](https://lookerstudio.google.com/s/mbL23-8gibI).\\n\\n## Hydra\\n\\nWe have released incremental commits in version\\n[0.20.0](https://github.com/cardano-scaling/hydra/releases/tag/0.20.0).\\n\\n[Issues and pull requests closed in January](https://github.com/cardano-scaling/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2025-01-01..2025-01-31)\\n\\n![The roadmap with features and ideas](./img/2025-02-hydra-roadmap.png)\\n<small><center>Snapshot of the new [roadmap](https://github.com/orgs/cardano-scaling/projects/7/views/1) with features and ideas</center></small>\\n\\nThis month, some notable [roadmap](https://github.com/orgs/cardano-scaling/projects/7/views/1) updates include:\\n\\n- Multiple-version support in [Hydra Explorer](http://explorer.hydra.family/)\\n- etcd-based networking [#1720](https://github.com/cardano-scaling/hydra/issues/1720)\\n- Progress on bounded memory [#1618](https://github.com/cardano-scaling/hydra/issues/1618).\\n\\n### Multiple versions in Hydra explorer\\n\\nStarting from version 0.19.1 (a backport), we now list all known versions of Hydra on the explorer.\\n\\n![Multiple versions in Hydra](./img/2025-02-hydra-roadmap.png)\\n\\n### Etcd-based networking\\n\\nA breaking change in command-line arguments and system requirements (see release notes) is currently unreleased but available on the `master` branch. This update significantly improves the networking architecture, leading to greater stability (ie, fewer stuck heads!). Please try it out!\\n\\n### Bounded memory for hydra-node\\n\\nIn combination with the etcd-based networking, we have been [working on bounding\\nthe memory](https://github.com/cardano-scaling/hydra/pull/1860) of the\\nhydra-node by switching to an event-streaming model, instead of loading and\\nkeeping all events in memory. This should allow for the long-term running of\\nhydra nodes. This work remains in progress.\\n\\n## Links\\n\\nThe monthly review meeting for February 2025 took place on February 26, 2025, via Google Meet.\\nThe presentation [slides][slides] and the [recording][recording] are available for review.\\n\\n[slides]: https://docs.google.com/presentation/d/13f3H5QXzagiOB5JIy-7k2eZtsVWHGIo3bnWqMtRtyj0/edit\\n[recording]: https://drive.google.com/file/d/1WltowNB2APEM-gkS-7JAbYK57MeCkHqL/view"},{"id":"2025-01","metadata":{"permalink":"/monthly/2025-01","editUrl":"https://github.com/cardano-scaling/website/tree/master/monthly/2025-01-monthly.md","source":"@site/monthly/2025-01-monthly.md","title":"January 2025","description":"This is a monthly report on the progress of \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects since December 2024. This document serves as a preparation for and a written summary of the monthly stakeholder review meeting, which is announced on our Discord channels and held on Google Meet. This month, the meeting was held on 2025-01-29 using these slides and you can see the recording here.","date":"2025-02-11T10:36:41.000Z","formattedDate":"February 11, 2025","tags":[{"label":"monthly","permalink":"/monthly/tags/monthly"}],"readingTime":5.41,"hasTruncateMarker":false,"authors":[{"name":"Jean-Philippe Raynaud","title":"Software Engineering Lead, IOG","url":"https://github.com/jpraynaud","imageURL":"https://github.com/jpraynaud.png","key":"jpraynaud"},{"name":"Noon van der Silk","title":"Software Engineering Lead, IOG","url":"https://github.com/noonio","imageURL":"https://github.com/noonio.png","key":"noonio"}],"frontMatter":{"title":"January 2025","slug":"2025-01","authors":["jpraynaud","noonio"],"tags":["monthly"]},"unlisted":false,"prevItem":{"title":"February 2025","permalink":"/monthly/2025-02"},"nextItem":{"title":"November 2024","permalink":"/monthly/2024-11"}},"content":"This is a monthly report on the progress of \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects since December 2024. This document serves as a preparation for and a written summary of the monthly stakeholder review meeting, which is announced on our Discord channels and held on Google Meet. This month, the meeting was held on 2025-01-29 using these [slides][slides] and [you can see the recording here][recording].\\n\\n## Mithril\\n\\n[Issues and pull requests closed in January](https://github.com/input-output-hk/mithril/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2025-01-01..2025-01-31)\\n\\n### Roadmap\\n\\nBelow are the latest updates on our roadmap:\\n\\n- **Cardano stake distribution certification** [#955](https://github.com/input-output-hk/mithril/issues/955): the feature has been activated on `mainnet`\\n- **Cardano database incremental snapshots MVP** [#2047](https://github.com/input-output-hk/mithril/issues/2047): we have kept working on the MVP for incremental snapshots of the Cardano database\\n- **Redesign the website and improve documentation** [#2051](https://github.com/input-output-hk/mithril/issues/2051): the **User manual** and **About Mithril** sections have been restructured. The redesign is in progress.\\n\\n### Distributions\\n\\nWe released Mithril distribution [`2450.0`](https://github.com/input-output-hk/mithril/releases/tag/2450.0), which includes:\\n\\n- \ud83d\udd25 **Breaking changes in the Mithril client library, CLI, and WASM** with the removal of the deprecated `network` field from the internal `CardanoDbBeacon` in Mithril certificates\\n- Stable support for **Cardano node** `10.1.3` in the signer and the aggregator\\n- Stable support for one line shell installation script of the Mithril nodes\' pre-built binaries\\n- Bug fixes and performance improvements.\\n\\nIn February, the following events are planned:\\n\\n- Switch to the **Pythagoras** era on the `release-mainnet` network (at the transition to epoch `539`)\\n- Re-genesis of the certificate chain of the `release-mainnet` network (at the end of epoch `539`)\\n- Release of a new distribution at epoch `540`.\\n\\n### Dev blog\\n\\nWe have published the following posts:\\n\\n- [Era switch to Pythagoras](https://mithril.network/doc/dev-blog/2024/12/17/era-switch-pythagoras)\\n- [Distribution `2450` is now available](https://mithril.network/doc/dev-blog/2024/12/17/distribution-2450).\\n\\n### Incremental Cardano DB certification\\n\\nWe have worked on the signature and artifact production processes of the incremental Cardano DB certification. The features are now deployed on the developer networks and are being tested.\\n\\nThe incremental certification will provide the following benefits:\\n\\n- Faster certification of the Cardano DB on the aggregator\\n- Capability to restore a partial Cardano database instead of the full one (by providing a range of missing immutable files)\\n- Capability to support an evolutive range of artifact storages, particularly decentralized storages (eg, IPFS or BitTorrent).\\n\\n![Design of the incremental certification of the Cardano database](./img/2025-01-mithril-cardano-db-incremental-certification.jpg)\\n<small><center>Design of the incremental certification of the Cardano database</center></small>\\n\\n![Signature and verification of the Cardano database](./img/2025-01-mithril-cardano-db-incremental-signature-verification.jpg)\\n<small><center>Signature and verification of the Cardano database</center></small>\\n\\n### Website new structure\\n\\nWe have restructured the main sections of the website:\\n\\n- the [**User manual**](https://mithril.network/doc/manual/welcome) section has been restructured to make the content more accessible and provide entries for each user profile\\n- the [**About Mithril**](https://mithril.network/doc/mithril/intro) section has been restructured to provide information for beginner and advanced user audiences.\\n\\n### SPO participation\\n\\nWe have worked on a plan to reach the full participation of SPOs in the Mithril network, which is essential for the security of the protocol:\\n\\n- **Phase 0: Guild Operators\u2019 scripts adjustment**\\n  - Install Mithril by default (currently opt-in)\\n- **Phase 1: node integration**\\n  - Bundle Mithril with the Cardano node\\n  - Seamless integration\\n  - Opt-out option\\n- **Phase 2: centralized incentive mechanism**\\n  - Centralized reward distribution\\n  - Treasury funded via external funds\\n- **Phase 3: on-chain incentive mechanism**\\n  - On-chain reward distribution mechanism\\n  - Treasury funded through revenues.\\n\\n### Protocol status\\n\\nThe protocol has operated smoothly on the `release-mainnet` network with the following metrics:\\n\\n- **Registered stake**: `4.9B\u20b3` (`25%` of the Cardano network)\\n- **Registered SPOs**: `250` (`9%` of the Cardano network)\\n- **Full Cardano database restorations**: `600` restorations\\n- **Signer software adoption**: `94%` of the SPOs are running a recent version (one of the last three releases).\\n\\nMore information is available at the [**Mithril protocol insights dashboard**](https://lookerstudio.google.com/s/mbL23-8gibI).\\n\\n## Hydra\\n\\nWe\'ve released incremental commits in version\\n[0.20.0](https://github.com/cardano-scaling/hydra/releases/tag/0.20.0).\\n\\n[Issues and pull requests closed in January](https://github.com/cardano-scaling/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2025-01-01..2025-01-31)\\n\\n![The roadmap with features and ideas](./img/2025-01-hydra-roadmap.png)\\n<small><center>Snapshot of the new [roadmap](https://github.com/orgs/cardano-scaling/projects/7/views/1) with features and ideas</center></small>\\n\\nNotable updates on our [roadmap](https://github.com/orgs/cardano-scaling/projects/7/views/1) this month include:\\n\\n- Released incremental commits [#199](https://github.com/cardano-scaling/hydra/issues/199)\\n- Verifyed custom-ledger support [#1727](https://github.com/cardano-scaling/hydra/issues/1727)\\n- Full transaction in `SnapshotConfirmed` [#1685](https://github.com/cardano-scaling/hydra/pull/1685)\\n- Raw CBOR datum in transaction outputs [#1543](https://github.com/cardano-scaling/hydra/issues/1543)\\n\\n### Hydra Doom finale\\n\\nOn January 24, 2025, the Hydra Doom tournament concluded with its finale at the [C-Play Summit event](https://lu.ma/cplay?tk=RqNYcG) at the HyperX Arena in Las Vegas. This live e-sports event featured finalists from previous hydra-doom stages battling in a multiplayer deathmatch on stage, using our reimagining of the 1993 first-person shooter _Doom_. For a high-level summary, see this [Hackernoon article](https://hackernoon.com/hydra-achieves-1-million-tps-validating-cardano-as-the-fastest-blockchain).\\n\\nLet\u2019s look a bit under the hood at what was deployed for this finale. Previous installments of the `hydra-doom` application processed player inputs and game state updates as Cardano transactions on a fleet of remotely hosted `hydra-node` processes and Hydra heads. This time, our fork of the _Doom_ [doom-wasm](https://github.com/cardano-scaling/doom-wasm) port used Hydra to create a [net_module_t](https://github.com/cardano-scaling/doom-wasm/blob/9375223120772539e21165907cff8a1a9cf19bc3/src/net_hydra.c#L193-L196) that converts _Doom_ multiplayer network packets to Cardano transactions and uses the Cardano ledger in a Hydra head to exchange them between multiple players. On top of this, each player\u2019s kills were also recorded \'on-chain\' from similar transactions as used in the past. This allowed a referee Hydra participant to use the datum on-chain to update a \'Series\' smart contract and gather kill totals as a datum in a Cardano UTXO (on layer 2).\\n\\nGiven the results of three deathmatch rounds, a winner was determined, and all finalists received prize tokens for 1st to 4th place. These tokens were minted before the finale on layer 1, committed into the head, and distributed to known finalist addresses _in the head_. Closing and finalizing this head onto mainnet distributed the prize NFTs.\\n\\nThe tournament\u2019s head ID was `d3ad8ab3bbaf06ccadd7076ff3a84eaca0771bb9dcea8bcce239eca9`, and you can view the [associated transactions here](https://cexplorer.io/policy/d3ad8ab3bbaf06ccadd7076ff3a84eaca0771bb9dcea8bcce239eca9/tx#data). [This is the fanout transaction](https://cexplorer.io/tx/09010ab28996c6e75fb3fcda998f7190d71357eec31a110906bfdb6127a23392) that distributed the prize tokens.\\n\\nUsing these tokens, the winners could redeem their prize money from smart contracts where the USDM prize money for the finale was locked, as seen [here for the 1st place trophy](https://cexplorer.io/tx/99864dd973d1fe45e69e8b94dbbca4a4533b60dbe34517d1c8d8928fbabd945b).\\n\\n### Incremental commits\\n\\nThe incremental commits feature has been released in version 0.20.0. We invite community members to test-drive this feature. The goal is to ensure the best user experience and identify potential bugs.\\n\\n### Hydra + custom ledger experiment\\n\\nWe have verified that we can run a Hydra head with a [customized layer 2\\nledger](https://github.com/cardano-scaling/hydra/issues/1727). [We merged a\\ntest](https://github.com/cardano-scaling/hydra/pull/1796) that can be used for\\nfuture interested parties to test this with their own forks.\\n\\n## Links\\n\\nThe monthly review meeting for January 2025 was held on 2025-01-29 via Google Meet,\\npresenting these [slides][slides] and this [recording][recording].\\n\\n[slides]: https://docs.google.com/presentation/d/1_-B2CF1YA-xwwfskmiqqBcctha3VyNEHAHN5C87tOh4\\n[recording]: https://drive.google.com/file/d/1Hq2rYVB6xR-RNP5U0P_n2s8pAUbS2A_G/view?usp=drive_link"},{"id":"2024-11","metadata":{"permalink":"/monthly/2024-11","editUrl":"https://github.com/cardano-scaling/website/tree/master/monthly/2024-11-monthly.md","source":"@site/monthly/2024-11-monthly.md","title":"November 2024","description":"This is a monthly report on the progress of \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects since October 2024. This document serves as a preparation for and a written summary of the monthly stakeholder review meeting, which is announced on our Discord channels and held on Google Meet. This month, the meeting was held on 2024-12-09 using these slides and you can see the recording here.","date":"2024-12-18T09:55:54.000Z","formattedDate":"December 18, 2024","tags":[{"label":"monthly","permalink":"/monthly/tags/monthly"}],"readingTime":5.515,"hasTruncateMarker":false,"authors":[{"name":"Jean-Philippe Raynaud","title":"Software Engineering Lead, IOG","url":"https://github.com/jpraynaud","imageURL":"https://github.com/jpraynaud.png","key":"jpraynaud"},{"name":"Noon van der Silk","title":"Software Engineering Lead, IOG","url":"https://github.com/noonio","imageURL":"https://github.com/noonio.png","key":"noonio"},{"name":"Sasha Bogicevic","title":"Senior Software Engineer, IOG","url":"https://github.com/v0d1ch","imageURL":"https://github.com/v0d1ch.png","key":"v0d1ch"}],"frontMatter":{"title":"November 2024","slug":"2024-11","authors":["jpraynaud","noonio","v0d1ch"],"tags":["monthly"]},"unlisted":false,"prevItem":{"title":"January 2025","permalink":"/monthly/2025-01"},"nextItem":{"title":"October 2024","permalink":"/monthly/2024-10"}},"content":"This is a monthly report on the progress of \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects since October 2024. This document serves as a preparation for and a written summary of the monthly stakeholder review meeting, which is announced on our Discord channels and held on Google Meet. This month, the meeting was held on 2024-12-09 using these [slides][slides] and [you can see the recording here][recording].\\n\\n## Mithril\\n\\n[Issues and pull requests closed in November](https://github.com/input-output-hk/mithril/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2024-11-01..2024-11-30)\\n\\n### Roadmap\\n\\nHere\u2019s the latest on our roadmap:\\n\\n- **Cardano stake distribution certification** [#955](https://github.com/input-output-hk/mithril/issues/955): the feature is pending activation on `mainnet`\\n- **Protocol usage metrics/statistics** [#2028](https://github.com/input-output-hk/mithril/issues/2028): the feature is completed and has been released in November\\n- **Explore signer registration solutions** [#2029](https://github.com/input-output-hk/mithril/issues/2029): we are exploring the signer registration options and preparing a document summarizing them\\n- **Cardano database incremental snapshots PoC** [#2047](https://github.com/input-output-hk/mithril/issues/2047): we have started working on a proof of concept for incremental snapshots of the Cardano database.\\n\\n### Distributions\\n\\nWe released Mithril distribution [`2445.0`](https://github.com/input-output-hk/mithril/releases/tag/2445.0), which includes:\\n\\n- \ud83d\udd25 **Breaking changes in the Mithril client library, CLI, and WASM** with the removal of deprecated beacon in Mithril certificates\\n- Stable support for **Cardano node** `10.1.2` in the signer and the aggregator\\n- Stable support for **Cardano stake distribution client library, CLI, and WASM**\\n- Stable support for the **Prometheus metrics** endpoint in the aggregator\\n- Bug fixes and performance improvements.\\n\\n#### Future distributions\\n\\nWe plan to release new distributions in December:\\n\\n- `2450`:\\n  - Availability of NodeJS and bundler targets in the Mithril client WASM npm package\\n  - Stable support for **Cardano node** `10.1.3` in the signer and the aggregator\\n  - Execution rights of pre-built binaries in GitHub releases.\\n\\n### Dev blog\\n\\nWe have published the following posts:\\n\\n- [One line installer for Mithril binaries](https://mithril.network/doc/dev-blog/2024/11/25/one-line-binaries-installer)\\n- [New Protocol Insights Dashboard released](https://mithril.network/doc/dev-blog/2024/11/18/new-protocol-insights-dashboard)\\n- [Mithril aggregator Prometheus endpoint is available](https://mithril.network/doc/dev-blog/2024/11/07/mithril-aggregator-prometheus-endpoint).\\n\\n### Protocol Insights Dashboard v2\\n\\nWe have created a new version of the Mithril Protocol Insights Dashboard, which is now available [here](https://lookerstudio.google.com/s/mbL23-8gibI). It provides a comprehensive view of the Mithril network and its performance metrics.\\n\\nThe Protocol Insights Dashboard is a valuable tool for monitoring the network and understanding its behavior:\\n\\n- Participation metrics\\n- Usage metrics\\n- Health metrics\\n- Artifacts metrics\\n- Software metrics.\\n\\n![](img/2024-11-mithril-protocol-dashboard.gif)\\n<small><center>The new Mithril Protocol Insights Dashboard on the Cardano `mainnet`</center></small>\\n\\n### One line installer for Mithril binaries\\n\\nTo facilitate the installation and updating of Mithril binaries, we have created a one line installer that downloads and installs the Mithril binaries and supports Linux and macOS. It is available for the Mithril signer, Mithril aggregator, and Mithril CLI.\\n\\nHere is an example command to download the **latest Mithril signer** binary in the current directory:\\n\\n```shell\\ncurl --proto \'=https\' --tlsv1.2 -sSf https://raw.githubusercontent.com/input-output-hk/mithril/refs/heads/main/mithril-install.sh | sh -s -- -c mithril-signer -d latest -p $(pwd)\\n```\\n\\nThis will download the latest signer binary for the correct platform and architecture (if available) in the current directory:\\n\\n```shell\\nFetching release information from https://api.github.com/repos/input-output-hk/mithril/releases/latest...\\nDownloading mithril-signer to latest from https://github.com/input-output-hk/mithril/releases/download/2445.0/mithril-2445.0-linux-x64.tar.gz...\\nCongrats! mithril-signer has been upgraded to 0.2.209+67dc6e4 from distribution latest and installed at ./home/user!\\n```\\n\\n### Client NPM package compatible with NodeJS\\n\\nWe have created a new version of the **npm package for the Mithril client WASM**, which is now compatible with NodeJS and bundler targets. This feature was requested by the community and will be released in the next `2550` distribution.\\n\\n### New explorer status\\n\\nWe have enhanced the Mithril Explorer with a new status section that provides some key metrics and insights about the Mithril network. This new section is currently available on testing networks and will be generally available with the release of the next `2550` distribution.\\n\\n![](img/2024-11-mithril-explorer-status.png)\\n<small><center>The new Mithril Explorer status section</center></small>\\n\\n### Nightly and backward compatibility workflows\\n\\nWe have implemented nightly and backward compatibility workflows to ensure more reliable and consistent releases. The nightly workflow builds Mithril Docker images every night and runs the backward compatibility workflow, which checks the compatibility of the upcoming Mithril distribution with previous versions, summarizing the changes.\\n\\n![](img/2024-11-mithril-backward-compatibility.png)\\n<small><center>The backward compatibility summary created by the workflow</center></small>\\n\\n## Hydra\\n\\nWe continued working on incremental commits, began supporting multiple versions in the Hydra Explorer, and started moving the `hydra-explorer` out of the monorepo.\\n\\n[Issues and pull requests closed in November](https://github.com/cardano-scaling/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2024-11-01..2024-11-30)\\n\\n![The roadmap with features and ideas](./img/2024-11-hydra-roadmap.png)\\n<small><center>Snapshot of the new [roadmap](https://github.com/orgs/cardano-scaling/projects/7/views/1) with features and ideas</center></small>\\n\\nNotable updates on our [roadmap](https://github.com/orgs/cardano-scaling/projects/7/views/1) this month include:\\n\\n- Progress on incremental commits [#199](https://github.com/cardano-scaling/hydra/issues/199)\\n- Hydra + Midnight support [#1727](https://github.com/cardano-scaling/hydra/issues/1727)\\n- Continued support of Hydra Doom, especially around the tournament!\\n\\n### Hydra Explorer\\n\\nThe hydra-explorer has been [moved to its own repository](https://github.com/cardano-scaling/hydra-explorer/pull/5) with independent deployment. As a result, supporting multiple versions of the `hydra-node` in the explorer is now necessary, and we are [currently working on it](https://github.com/cardano-scaling/hydra/issues/1282).\\n\\n### Hydra Doom\\n\\nFollowing the success of Hydra Doom at Rare Evo and as an activation at various events organized by Input | Output (IO) **and others(!)**, the Hydra Doom project has taken a significant step forward with the launch of a tournament offering 100,000 USDM. The prize is intended to be distributed automatically to the winners based on the outcome of the game as measured in the Hydra heads used for the finale.\\n\\nIn launching the tournament, we reached several milestones and pushed Hydra to its very limits in many ways. This included testing the performance of individual Hydra heads, which supported a multi-player game where every frame of each participant\u2019s game session submitted smart contract transactions. At its peak (on December 3), the system processed 1.04 million transactions per second. Over a 24-hour period, it handled more than 15.5 billion transactions in total. This was achieved with a mix of real player traffic from around the world and artificial load generated by bots running the game, contributing transactions to more than 14,000 Hydra Heads.\\n\\nWhile more work remains, this marks an impressive milestone, and the overall reception has been positive.\\n\\nhttps://github.com/user-attachments/assets/c9546d61-212b-490f-88b8-a3b15229aa15\\n\\n\\n\\n### Incremental commits\\n\\nThe incremental commits feature is nearly ready for release. As a final step, we invite community members to test-drive this feature. The goal is to ensure the best user experience and identify potential bugs. The remaining tasks include improving documentation and testing and updating the protocol specification to reflect these changes.\\n\\n### Hydra + Midnight\\n\\nWe\u2019ve been collaborating with the Midnight team to explore how Hydra can align with their goals. As part of this effort, we\u2019re developing a version of Hydra with a custom ledger to support arbitrary built-in operations that validators may need. [This work is ongoing.](https://github.com/cardano-scaling/hydra/issues/1727)\\n\\n\\n## Links\\n\\nThe monthly review meeting for November 2024 was held on 2024-12-09 via Google Meet,\\npresenting these [slides][slides] and this [recording][recording].\\n\\n[slides]: https://docs.google.com/presentation/d/1erEcuVNtYsCecJEX-QVXVtxzQMl8G6EVQbs98KPjxmI/edit?usp=sharing\\n[recording]: https://drive.google.com/file/d/1a9UOldEuNSg19GB2CXUbNIHITJodZOqr/view?usp=drive_link"},{"id":"2024-10","metadata":{"permalink":"/monthly/2024-10","editUrl":"https://github.com/cardano-scaling/website/tree/master/monthly/2024-10-monthly.md","source":"@site/monthly/2024-10-monthly.md","title":"October 2024","description":"This is a monthly report on the progress of \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects since September 2024. This document serves as a preparation for and a written summary of the monthly stakeholder review meeting, which is announced on our Discord channels and held on Google Meet. This month, the meeting was held on 2024-10-23 using these slides and you can see the recording here.","date":"2024-10-31T14:34:36.000Z","formattedDate":"October 31, 2024","tags":[{"label":"monthly","permalink":"/monthly/tags/monthly"}],"readingTime":4.995,"hasTruncateMarker":false,"authors":[{"name":"Jean-Philippe Raynaud","title":"Software Engineering Lead, IOG","url":"https://github.com/jpraynaud","imageURL":"https://github.com/jpraynaud.png","key":"jpraynaud"},{"name":"Noon van der Silk","title":"Software Engineering Lead, IOG","url":"https://github.com/noonio","imageURL":"https://github.com/noonio.png","key":"noonio"},{"name":"Daniel Firth","title":"Senior Software Engineer, IOG","url":"https://github.com/locallycompact","imageURL":"https://github.com/locallycompact.png","key":"locallycompact"}],"frontMatter":{"title":"October 2024","slug":"2024-10","authors":["jpraynaud","noonio","locallycompact"],"tags":["monthly"]},"unlisted":false,"prevItem":{"title":"November 2024","permalink":"/monthly/2024-11"},"nextItem":{"title":"September 2024","permalink":"/monthly/2024-09"}},"content":"This is a monthly report on the progress of \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects since September 2024. This document serves as a preparation for and a written summary of the monthly stakeholder review meeting, which is announced on our Discord channels and held on Google Meet. This month, the meeting was held on 2024-10-23 using these [slides][slides] and [you can see the recording here][recording].\\n\\n## Mithril\\n\\n[Issues and pull requests closed in October](https://github.com/input-output-hk/mithril/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2024-10-01..2024-10-31)\\n\\n### Roadmap\\n\\nHere\u2019s the latest on our roadmap:\\n\\n- **Cardano transactions signature/proving MVP** [#1457](https://github.com/input-output-hk/mithril/issues/1457): the feature has been activated on `mainnet`\\n- **Cardano stake distribution certification** [#955](https://github.com/input-output-hk/mithril/issues/955): the feature has been activated on `preview`, `pre-production` and is pending activation on `mainnet`\\n- **Decentralization of signature orchestration** [#1777](https://github.com/input-output-hk/mithril/issues/1777): the feature has been activated on `preview`, `pre-production` and `mainnet`\\n- **CIP for Mithril signature diffusion through the Cardano network** [#1775](https://github.com/input-output-hk/mithril/issues/1775): the draft CIP has received the number **CIP-0137** and is in final review stage\\n- **Protocol usage metrics/statistics** [#2028](https://github.com/input-output-hk/mithril/issues/2028): the feature is being implemented and will be released in November.\\n\\n![](img/2024-10-mithril-features-distributions.png)\\n<small><center>Feature activation and distribution schedule for Mithril</center></small>\\n\\n### Distributions\\n\\nWe released Mithril distribution [`2442.0`](https://github.com/input-output-hk/mithril/releases/tag/2442.0), which includes:\\n\\n- Stable support for **decentralized signature orchestration**\\n- Stable support for **Cardano transaction client library, CLI, and WASM**\\n- Stable support for new **Pythagoras** Mithril era\\n- Bug fixes and performance improvements.\\n\\n#### Future distributions\\n\\nWe plan to release new distributions in November:\\n\\n- `2444`:\\n  - Stable clients for **Cardano stake distribution** certification\\n  - Stable support for Prometheus metrics endpoint in the aggregator.\\n\\n### Dev blog\\n\\nWe have published the following posts:\\n\\n- [Certification of Cardano stake distribution](https://mithril.network/doc/dev-blog/2024/10/15/cardano-stake-distribution-certification)\\n- [Certification of Cardano transactions](https://mithril.network/doc/dev-blog/2024/07/30/cardano-transaction-certification) (updated).\\n\\n### Protocol status\\n\\n![](img/2024-10-mithril-protocol-status.png)\\n<small><center>The latest status of the Mithril protocol on Cardano `mainnet`</center></small>\\n\\n### Decentralized signature orchestration\\n\\nTo enable multiple aggregators on the same Mithril network, the **signature orchestration** must be decentralized to run independently across all signers and aggregators.\\n\\nWe have implemented and deployed this feature on`mainnet` with the signer released in [`2442.0`](https://github.com/input-output-hk/mithril/releases/tag/2442.0) distribution:\\n\\n- The signer and aggregator nodes can independently compute the beacon, which determines the messages to sign and certify\\n- The aggregator no longer advertises the pending certificates; the pending certificate is deprecated and temporarily kept alive for legacy signer nodes until sufficient adoption of the new version is reached\\n- The aggregator buffers the individual signatures received from signers until it has computed the associated beacon and will try to aggregate them thereafter.\\n\\n### Aggregator usage metrics and Grafana dashboard\\n\\nWe have been working on a new Prometheus endpoint for the aggregator, which provides detailed insights about the production of artifacts and certificates, the events received from the signers, and the artifacts and proofs served to the clients. The feature can be easily activated with some configuration parameters.\\n\\nAdditionally, we created a Grafana template to easily set up a dashboard for this Prometheus endpoint.\\n\\n![](img/2024-10-mithril-prometheus-metrics.png)\\n<small><center>The aggregator Grafana dashboard</center></small>\\n\\n## Hydra\\n\\n[Issues and pull requests closed in October](https://github.com/cardano-scaling/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2024-10-01..2024-10-31)\\n\\n![The roadmap with features and ideas](./img/2024-10-hydra-roadmap.png)\\n<small><center>Snapshot of the new [roadmap](https://github.com/orgs/cardano-scaling/projects/7/views/1) with features and ideas</center></small>\\n\\nNotable updates on our [roadmap](https://github.com/orgs/cardano-scaling/projects/7/views/1) this month include:\\n\\n- Added the raw CBOR datum in transaction outputs [#1543](https://github.com/cardano-scaling/hydra/issues/1543)\\n- Used Aiken for commit validator [#1680](https://github.com/cardano-scaling/hydra/pull/1680)\\n- Updated to `cardano-api` 9.4 [#1706](https://github.com/cardano-scaling/hydra/pull/1706)\\n- Implemented the off-chain user journey for incremental commits [#1522](https://github.com/cardano-scaling/hydra/issues/1522) and made good progress on the on-chain validators\\n- Added Blockfrost mode to the hydra-chain-observer [#1631](https://github.com/cardano-scaling/hydra/pull/1631).\\n\\n### Argentina\\n\\nIOG attended a local satellite Cardano Summit event, as well as Tech Expo \u2013 a multichain Web3-focused event \u2013 in Argentina on October 18 and 19. During both events, the Hydra Doom demo was showcased on-site, using locally built cabinets and a new setup with a computer as an on-site server, connecting laptops to aggregate stats from multiple sessions. Many attendees had the chance to play and enjoy the demo, with our very own Tamara Haasen displaying true grit and remarkable skill! Notable attendees included ICP, Polkadot, OKX, ByBit, and the founder of Render Network. Overall, it was a fantastic event and a great opportunity to connect with Argentinian builders. Now it\u2019s time to prepare for the next leg of the Hydra Doom adventure and gear up for a return visit soon!\\n\\n### Aiken for commit validator\\n\\nWe began porting our validators to Aiken, starting with the `Commit` validator. This resulted in a saving of over 1Kb to the validator script and increased the maximum number of head participants from 6 to 9.\\n\\n### SnapshotConfirmed has the full Tx\\n\\nThe `SnapshotConfirmed` event now has the full transaction information,\\nwhich makes it much easier to build an app that watches for confirmed\\ntransactions and responds appropriately. For example, here is the change\\nrequired in [Hydraw](http://hydraw.hydra.family/):\\n\\n```diff\\ndiff --git a/hydraw/static/bundle.js b/hydraw/static/bundle.js\\nindex 1bea9e96fe7..326c69c39bc 100644\\n--- a/hydraw/static/bundle.js\\n+++ b/hydraw/static/bundle.js\\n@@ -13,19 +13,20 @@ let n = 0\\n client.addEventListener(\\"message\\", e => {\\n   const msg = JSON.parse(e.data);\\n   switch (msg.tag) {\\n-    case \\"TxValid\\":\\n-      // TODO: Should only draw pixels on SnapshotConfirmed\\n-      const cborHex = msg.transaction.cborHex;\\n-      console.log(\\"New transaction cborHex seen\\", cborHex);\\n-      const transaction = cbor.decodeFirstSync(cborHex);\\n-      const auxiliaryData = transaction[3]\\n-      if (auxiliaryData !== undefined && auxiliaryData !== null) {\\n-        console.log(\\"Transaction has auxiliary data\\", auxiliaryData);\\n-        const aux = auxiliaryData.value;\\n-        const [x, y, r, g, b] = (aux.get(0) || aux.get(1)).get(metadataLabel);\\n-        n += delay;\\n-        setTimeout(() => drawPixel(x, y, [r, g, b]), n);\\n-      }\\n+    case \\"SnapshotConfirmed\\":\\n+      msg.snapshot.confirmed.forEach( (tx, _) => {\\n+        const cborHex = tx.cborHex;\\n+        console.log(\\"New confirmed transaction cborHex seen\\", cborHex);\\n+        const transaction = cbor.decodeFirstSync(cborHex);\\n+        const auxiliaryData = transaction[3]\\n+        if (auxiliaryData !== undefined && auxiliaryData !== null) {\\n+          console.log(\\"Transaction has auxiliary data\\", auxiliaryData);\\n+          const aux = auxiliaryData.value;\\n+          const [x, y, r, g, b] = (aux.get(0) || aux.get(1)).get(metadataLabel);\\n+          n += delay;\\n+          setTimeout(() => drawPixel(x, y, [r, g, b]), n);\\n+        }\\n+      })\\n     default:\\n       console.log(\\"Irrelevant message\\", msg);\\n   }\\n```\\n\\n## Links\\n\\nThe monthly review meeting for October 2024 was held on 2024-10-23 via Google Meet,\\npresenting these [slides][slides] and this [recording][recording].\\n\\n[slides]: https://docs.google.com/presentation/d/1Ac11zpeJRpDPTMALakMc5wrpPGJHVSboGK04KvZtmuk/edit#slide=id.g1f87a7454a5_0_1392\\n[recording]: https://drive.google.com/file/d/1ZM2Pcxw3U1OwHHLCC7b9EK3h-YqfG3zI/view"},{"id":"2024-09","metadata":{"permalink":"/monthly/2024-09","editUrl":"https://github.com/cardano-scaling/website/tree/master/monthly/2024-09-monthly.md","source":"@site/monthly/2024-09-monthly.md","title":"September 2024","description":"This is a monthly report on the progress of \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects since August 2024. This document serves as a preparation for and a written summary of the monthly stakeholder review meeting, which is announced on our Discord channels and held on Google Meet. This month, the meeting was held on 2024-09-25 using these slides and you can see the recording here.","date":"2024-10-04T16:01:24.000Z","formattedDate":"October 4, 2024","tags":[{"label":"monthly","permalink":"/monthly/tags/monthly"}],"readingTime":8.665,"hasTruncateMarker":false,"authors":[{"name":"Sebastian Nagel","title":"Software Engineering Lead, IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"},{"name":"Noon van der Silk","title":"Software Engineering Lead, IOG","url":"https://github.com/noonio","imageURL":"https://github.com/noonio.png","key":"noonio"},{"name":"Jean-Philippe Raynaud","title":"Software Engineering Lead, IOG","url":"https://github.com/jpraynaud","imageURL":"https://github.com/jpraynaud.png","key":"jpraynaud"},{"name":"Sasha Bogicevic","title":"Senior Software Engineer, IOG","url":"https://github.com/v0d1ch","imageURL":"https://github.com/v0d1ch.png","key":"v0d1ch"},{"name":"Franco Testagrossa","title":"Senior Software Engineer, IOG","url":"https://github.com/ffakenz","imageURL":"https://github.com/ffakenz.png","key":"ffakenz"}],"frontMatter":{"title":"September 2024","slug":"2024-09","authors":["ch1bo","noonio","jpraynaud","v0d1ch","ffakenz"],"tags":["monthly"]},"unlisted":false,"prevItem":{"title":"October 2024","permalink":"/monthly/2024-10"},"nextItem":{"title":"August 2024","permalink":"/monthly/2024-08"}},"content":"This is a monthly report on the progress of \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects since August 2024. This document serves as a preparation for and a written summary of the monthly stakeholder review meeting, which is announced on our Discord channels and held on Google Meet. This month, the meeting was held on 2024-09-25 using these [slides][slides] and [you can see the recording here][recording].\\n\\n## Mithril\\n\\n[Issues and pull requests closed in September](https://github.com/input-output-hk/mithril/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2024-09-01..2024-09-30)\\n\\n### Roadmap\\n\\nHere\u2019s the latest on our roadmap:\\n- **Cardano transactions signature/proving MVP** [#1457](https://github.com/input-output-hk/mithril/issues/1457): the feature is pending activation on `mainnet`\\n- **Cardano stake distribution certification** [#955](https://github.com/input-output-hk/mithril/issues/955): the feature is pending activation on `preview`, `preprod` and `mainnet`\\n- **Decentralization of signature orchestration** [#1777](https://github.com/input-output-hk/mithril/issues/1777): feature implementation is being finalized\\n- **CIP for Mithril signature diffusion through the Cardano network** [#1775](https://github.com/input-output-hk/mithril/issues/1775): the draft CIP is in review.\\n\\n![](img/2024-09-mithril-features-distributions.png)\\n<small><center>Feature activation and distribution schedule for Mithril</center></small>\\n\\n### Distributions\\n\\nWe released Mithril distribution [`2437.1`](https://github.com/input-output-hk/mithril/releases/tag/2437.1), which includes:\\n- **Breaking changes** in the **Mithril client WASM**:\\n  - Seamless transition from **unstable** to **stable** features\\n  - A new `unstable` option in the client allows using unstable features\\n  - The previous `client.unstable` implementation is not supported anymore and must be replaced with `client`\\n- Stable support for **Cardano transaction** certification in signer and aggregator\\n- Stable support for **Cardano stake distribution** certification in signer and aggregator\\n- Bug fixes and performance improvements.\\n\\n#### Future distributions\\n\\nWe plan to release new distributions in October:\\n- `2440`:\\n  - Stable clients for **Cardano transaction** certification\\n  - Activation of the certification of **Cardano stake distribution** in `pre-release-preview`, `release-preprod`, and `release-mainnet`\\n  - Stable support for new `Pythagoras` Mithril era\\n- `2443`:\\n  - Stable clients for **Cardano stake distribution** certification.\\n\\n### Dev blog\\n\\nWe have published the following posts:\\n- [Mithril client WASM breaking change](https://mithril.network/doc/dev-blog/2024/09/24/client-wasm-unstable-breaking-change)\\n- [Certification of Cardano transactions](https://mithril.network/doc/dev-blog/2024/07/30/cardano-transaction-certification) (Updated).\\n\\n### Protocol status\\n\\n![](img/2024-09-mithril-protocol-status.png)\\n<small><center>The latest status of the Mithril protocol on Cardano `mainnet`</center></small>\\n\\n### Decentralized message queue for Cardano\\n\\nWe continued working on the **decentralized message queue** (DMQ) for Cardano, as proposed in this [CIP draft](https://github.com/cardano-foundation/CIPs/pull/876).\\n\\nThe DMQ is designed to:\\n- Leverage the Cardano network layer\\n- Initially be used by Mithril for the diffusion of signatures from signers to aggregators\\n- Be adaptable for future Cardano protocols, each operating on a different DMQ topic.\\n\\nThe DMQ will be operated by a \'side\' node, known as the DMQ node, which will run a separate peer-to-peer network powered by the Ouroboros network stack. Here are some key technical details:\\n- It will run as an external process that exposes a Unix socket to support node-to-client mini-protocols\\n- It will implement node-to-client and node-to-node mini-protocols to allow for message local submission, local notification, and peer-to-peer submission\\n- It will retrieve the Cardano stake distribution from its local Cardano node to authenticate incoming messages\\n- It will retrieve other peers\' information about the peer-to-peer network from its local Cardano node (this topic is being investigated: either with a ledger hard fork, redirecting connections to the DMQ node, or leveraging the SRV record in the SPOs\' DNS)\\n- Each topic of the message queue will run a different DMQ node instantiated with a specific configuration.\\n\\nProducers and consumers exist for the DMQ topic running on some DMQ nodes. In the case of Mithril:\\n- The Mithril signers will be the producers of the message (Mithril individual signatures)\\n- The Mithril aggregators will be the consumers of the message (Mithril individual signatures).\\n\\nDMQ producers and consumers run on various DMQ nodes:\\n\\n![](img/2024-09-mithril-dmq-architecture.jpg)\\n<small><center>DMQ node architecture</center></small>\\n\\n## Hydra\\n\\n[Issues and pull requests closed in September](https://github.com/cardano-scaling/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2024-09-01..2024-09-30)\\n\\n![The roadmap with features and ideas](./img/2024-09-hydra-roadmap.jpeg)\\n<small><center>Snapshot of the new [roadmap](https://github.com/orgs/cardano-scaling/projects/7/views/1) with features and ideas</center></small>\\n\\nNotable updates on our [roadmap](https://github.com/orgs/cardano-scaling/projects/7/views/1) this month include:\\n- Released version [0.19.0](https://github.com/cardano-scaling/hydra/releases/tag/0.19.0) introducing Conway ledger support with compatibility for Babbage transactions [#1608](https://github.com/cardano-scaling/hydra/pull/1608)\\n- Completed the Hydra \'head-in-head\' spike [#1590](https://github.com/cardano-scaling/hydra/issues/1590)\\n- Investigated Raft consensus for networking [#1591](https://github.com/cardano-scaling/hydra/issues/1591)\\n- Added \'HeadId\' into the \'Greetings\' message [#1557](https://github.com/cardano-scaling/hydra/issues/1557)\\n- Implemented the initial suite of network-resilience tests [#1532](https://github.com/cardano-scaling/hydra/issues/1532)\\n- Changed network semantics to broadcast to everyone [#1624](https://github.com/cardano-scaling/hydra/pull/1624).\\n\\n### Spike: head-in-head\\n\\nWhen a Hydra head is opened, part of the underlying ledger state gets locked and made available off-chain to a small group of participants. While this already creates a \'small world\' to process transactions (which makes it fast and cheap), we encountered use cases where it would make sense to open additional heads with different or even smaller groups of participants on parts of the layer 2 state, forming layer 3 heads.\\n\\nOne example of this use case is the Hydra Doom demonstration we [presented at Rare Evo last month](/monthly/2024-08#hydra-doom). For example, individual multiplayer game sessions require low network latency from regionally close machines. If those machines run a game session head that, in turn, locks funds and game state from a slower global tournament head instance, we are discussing Hydra heads in heads.\\n\\nThis construction raises **many open questions about liveness**: what happens to the layer 3 head if the layer 2 head stops processing transactions? Such pessimistic scenarios can occur in any optimistic protocol and must be addressed, though not necessarily optimized for. Despite these and other uncertainties, we spent time this month exploring whether it\u2019s even possible as part of the spike issue [#1590](https://github.com/cardano-scaling/hydra/issues/1590).\\n\\nTechnically, this means that a `hydra-node` communicates with another `hydra-node` as its \'chain backend\', interpreting snapshots of the layer 2 head as blocks, observing transactions that open or close the head, and submitting its state transition transactions to the underlying layer 2 ledger. The spike issue provides more details and instructions on reproducing these findings. The following issues demonstrate this prototype `--inception` mode:\\n<center>\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/Y_Pw3MVooxg?si=6M2irHZgwPLiSQAo\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" referrerpolicy=\\"strict-origin-when-cross-origin\\" allowfullscreen></iframe>\\n</center>\\n\\n### Hydra \ud83e\udd1d Blockfrost: chain backend concept\\n\\nAs outlined in [#1305](https://github.com/cardano-scaling/hydra/issues/1305), we are considering an option to run the `hydra-node` in a more lightweight mode, without requiring the full `cardano-node`. This feature is particularly relevant when considering the use of Hydra with the pay-per-use Blockfrost API.\\n\\nTo complete this component, the Blockfrost chain layer must be capable of:\\n- Following the chain\\n- Submitting Hydra transactions\\n- Handling relevant internal wallet queries for the `hydra-node`.\\n\\nAs an initial step, we have developed:\\n- A Hydra chain observer that operates in Blockfrost mode (although it has not yet been integrated into the `hydra-node`)\\n- A variant of the `hydra-explorer` tailored to the Blockfrost-enabled Hydra chain observer.\\n\\nTo achieve this, we have used a straightforward roll-forward approach via the Blockfrost [HTTP API](https://docs.blockfrost.io/), relying on the following key API calls:\\n- `GET /blocks/{hash}`\\n  - *confirmations*: number of block confirmations\\n  - *next_block_hash*: (nullable) hash of the next block\\n- `GET /blocks/{hash}/txs`\\n- `GET /txs/{hash}/cbor`\\n> Basically, we continuously fetch specific blocks by their hash, using the number of confirmations to indicate the block\'s safety (minimizing the likelihood of a rollback). From there, we roll forward using the reference to the next block hash.\\n\\nWhile this mechanism might appear simplistic, it is highly effective for most use cases except scenarios involving exchanges.\\n\\nTo further optimize the performance of this new chain component, we\u2019ve raised two new issues on the Blockfrost side to support our work:\\n- [#209](https://github.com/blockfrost/blockfrost-backend-ryo/issues/209): add an endpoint to fetch all transaction CBORs in a block, reducing the number of API calls needed to retrieve Hydra head observations from block transactions\\n- [#67](https://github.com/blockfrost/blockfrost-haskell/issues/67): implement concurrent fetching to fully leverage parallel requests and enhance performance.\\n\\nMoving forward, our next objective is to enable the `hydra-node` to publish Hydra scripts via Blockfrost, as outlined in [#1668](https://github.com/cardano-scaling/hydra/issues/1668).\\n\\n### Spike: Raft-based networking\\n\\nLast month, we developed a new test suite [#1532](https://github.com/cardano-scaling/hydra/issues/1532) to assess the resilience of our network stack. Now that this is in place, we can start exploring different approaches to achieve our goal of a crash-tolerant network layer.\\n\\nRecently, we stumbled upon this [fairly old research paper](https://arxiv.org/pdf/1707.01873) that explored various consensus protocols used in blockchain space. It reminded us of the correspondence between consensus and broadcasts:\\n> The form of consensus relevant to blockchain is technically known as atomic broadcast\\n\\nAdditionally, it mentioned at least one early permissioned blockchain that achieved crash tolerance of `t < n/2` by using [etcd](https://etcd.io/) with its off-the-shelf [Raft](https://raft.github.io/) consensus algorithm. This prompted us to explore the possibility of replacing our custom network stack with this (arguably overkill) alternative in an experiment [#1591](https://github.com/cardano-scaling/hydra/issues/1591) to evaluate its performance.\\n\\nThe GitHub issue contains all the details, but it turns out that this idea might not be as exotic as we initially thought! Implementing `broadcast` functionality as `put` requests to the `etcd` cluster works well when combined with an outbound, persisted buffer that handles failed writes while disconnected (or only connected to a minority). Additionally, the `revision` mechanism of `etcd` and storing the last known revision on disk allow us to create a `hydra-node` that is fully resilient to crashes and network failures, as demonstrated in these [fault injection test runs](https://github.com/cardano-scaling/hydra/actions/runs/11067586032).\\n\\nEven the performance of this early prototype matches or exceeds our current implementation, especially when multi-threading performance is available. For example, using a low-powered container hosted on GitHub, we observed average confirmation times on the three-node benchmark decrease from `20ms to 100ms`, while on a desktop machine with 8+ cores, the same benchmark improved from `100ms to 50ms`. Since the starting numbers of the released version also vary widely between machines, these results are only indicative.\\n\\n### Incremental commits\\n\\nThe incremental commits feature is being developed, and we demonstrated the envisioned user workflow during the monthly meeting.\\n\\nNotably, users will first need to lock their UTXO in the Hydra deposit script. Once we have a signed snapshot on layer 2, the increment transaction will consume this output. Eventually, this will make the specified UTXO part of the head UTXO state on layer 2. In case of any issues, any Hydra node will be able to post a recovery transaction to unlock the UTXO.\\n\\nThe hydra-node API includes endpoints for depositing and recovering UTXOs, providing a convenient way to build and post these transactions. We aimed to create a user-friendly experience for these actions.\\n\\nNext steps involve implementing comprehensive on-chain security, along with documentation and tutorials, to ensure our users understand how to use this new feature.\\nThis is essential since many builders on Hydra have requested this feature.\\n\\n## Links\\n\\nThe monthly review meeting for September 2024 was held on 2024-09-25 via Google Meet,\\npresenting these [slides][slides] and this [recording][recording].\\n\\n[slides]: https://docs.google.com/presentation/d/1-_IFTibG1woAhVZohJh9gcZUO-YJyJqhH2sHv4PbJgc\\n[recording]: https://drive.google.com/file/d/1jygDX-AGNGIGU7pq4ljEDuG39KVkInlJ"},{"id":"2024-08","metadata":{"permalink":"/monthly/2024-08","editUrl":"https://github.com/cardano-scaling/website/tree/master/monthly/2024-08-monthly.md","source":"@site/monthly/2024-08-monthly.md","title":"August 2024","description":"This is a monthly report on the progress of the \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects since July 2024. This document serves as both preparation for and a written summary of the monthly stakeholder review meeting, announced on our Discord channels and held on Google Meet. This month, the meeting took place on 2024-08-28, using these slides and you can see the recording here.","date":"2024-08-27T08:00:14.000Z","formattedDate":"August 27, 2024","tags":[{"label":"monthly","permalink":"/monthly/tags/monthly"}],"readingTime":6.495,"hasTruncateMarker":false,"authors":[{"name":"Sebastian Nagel","title":"Software Engineering Lead, IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"},{"name":"Noon van der Silk","title":"Software Engineering Lead, IOG","url":"https://github.com/noonio","imageURL":"https://github.com/noonio.png","key":"noonio"},{"name":"Jean-Philippe Raynaud","title":"Software Engineering Lead, IOG","url":"https://github.com/jpraynaud","imageURL":"https://github.com/jpraynaud.png","key":"jpraynaud"},{"name":"Sasha Bogicevic","title":"Senior Software Engineer, IOG","url":"https://github.com/v0d1ch","imageURL":"https://github.com/v0d1ch.png","key":"v0d1ch"},{"name":"Franco Testagrossa","title":"Senior Software Engineer, IOG","url":"https://github.com/ffakenz","imageURL":"https://github.com/ffakenz.png","key":"ffakenz"}],"frontMatter":{"title":"August 2024","slug":"2024-08","authors":["ch1bo","noonio","jpraynaud","v0d1ch","ffakenz"],"tags":["monthly"]},"unlisted":false,"prevItem":{"title":"September 2024","permalink":"/monthly/2024-09"},"nextItem":{"title":"July 2024","permalink":"/monthly/2024-07"}},"content":"This is a monthly report on the progress of the \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects since July 2024. This document serves as both preparation for and a written summary of the monthly stakeholder review meeting, announced on our Discord channels and held on Google Meet. This month, the meeting took place on 2024-08-28, using these [slides][slides] and [you can see the recording here][recording].\\n\\n## Mithril\\n\\n[Issues and pull requests closed in August](https://github.com/input-output-hk/mithril/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2024-07-31..2024-08-31)\\n\\n### Roadmap\\n\\nHere is an update on our current roadmap:\\n- **Cardano transactions signature/proving MVP** [#1457](https://github.com/input-output-hk/mithril/issues/1457): the feature is finalized and the last step to completion is to release on the `mainnet`.\\n- **Cardano Stake Distribution certification** [#955](https://github.com/input-output-hk/mithril/issues/955): the feature is finalized and the last step is to release on `preview`, `preprod` and `mainnet`.\\n- **Mithril signature diffusion with Cardano network layer PoC** [#1837](https://github.com/input-output-hk/mithril/issues/1837): the proof-of-concept is completed.\\n- **Decentralization of signature orchestration** [#1777](https://github.com/input-output-hk/mithril/issues/1777): we have started implementing the feature with some preliminary works.\\n- **CIP for Mithril signature diffusion through Cardano network** [#1775](https://github.com/input-output-hk/mithril/issues/1775): the draft CIP has been published on the Cardano foundation CIPs repository and is under review.\\n\\n### Distributions\\n\\nWe have released the new Mithril distribution [`2430.0`](https://github.com/input-output-hk/mithril/releases/tag/2430.0). This distribution includes several critical updates and enhancements:\\n- Support for **Cardano node** `9.1.0`\\n- Support for **Cardano transactions** certification in `release-preprod` and `pre-release-preview`\\n- Bug fixes and performance improvements.\\n\\n#### Future distributions\\n\\nWe plan to release new distributions in September following the **Chang** hard fork:\\n- `2436`:\\n  - Activation of the certification of **Cardano transactions** in the `release-mainnet` network\\n  - Activation of the certification of **Cardano stake distribution** in `pre-release-preview`, `release-preprod`, and `release-mainnet`.\\n\\n### Protocol status\\n\\n![](img/2024-08-mithril-protocol-status.png)\\n<small><center>Latest status of the Mithril protocol on Cardano `mainnet`</center></small>\\n\\n### Cardano stake distribution certification\\n\\nWe have completed the implementation of the Cardano stake distribution certification with Mithril and are currently preparing for the rollout of this feature to production:\\n\\n- We have implemented a new type of data certified for the latest snapshot of the Cardano stake distribution done by the Cardano node at the end of each epoch.\\n- Under the hood, we use a Merkle tree representation of the stake distribution and sign its Merkle root.\\n- The Mithril clients (library, CLI and WASM) have the capability to download and verify a snapshot of the Cardano stake distribution.\\n- We are preparing to activate the feature in the `release-preview`, `release-preprod`, and `release-mainnet` networks with the release of the next Mithril distribution.\\n- We have created documentation and some example code implementation for developers.\\n\\n## Hydra\\n\\n[Issues and pull requests closed in August](https://github.com/cardano-scaling/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2024-07-31..2024-08-31)\\n\\n\\n![The roadmap with features and ideas](./img/2024-08-hydra-roadmap.jpg)\\n<small><center>Snapshot of the new [roadmap](https://github.com/orgs/cardano-scaling/projects/7/views/1) with features and ideas</center></small>\\n\\nNotable updates on our [roadmap](https://github.com/orgs/cardano-scaling/projects/7/views/1) this month include:\\n- Incremental decommits, Conway support fixes, and more were released in [0.18.0](https://github.com/cardano-scaling/hydra/releases/tag/0.18.0)\\n- New landing page, SSL support, and bug fixes around transaction pruning were released in [0.18.1](https://github.com/cardano-scaling/hydra/releases/tag/0.18.1)\\n- Incremental commits (coming in a 0.19 release) have pivoted to a deposit-based scheme based on [open discussions](https://github.com/cardano-scaling/hydra/issues/199) (thanks [@GeorgeFlerovsky!](https://github.com/GeorgeFlerovsky))\\n- Ready to shift ledger to Conway when hardfork is complete [#1338](https://github.com/cardano-scaling/hydra/pull/1338)\\n- Settled on [Partial Fanout](https://github.com/cardano-scaling/hydra/issues/1468) as a good solution to [a few known problems](https://hydra.family/head-protocol/docs/known-issues#head-protocol-limits)\\n- Initial work on a suite of network-resilience tests [#1552](https://github.com/cardano-scaling/hydra/pull/1552)\\n- The Hydra Doom demo yielded several ideas that need to be refined into features\\n\\n### Hydra Doom\\n\\nAt the Rare Evo event in Las Vegas, we showcased the Hydra Doom demo, a technology demonstration of Hydra where users could play the 1993 id software game Doom and for each frame of the game, a smart contract transaction was submitted to a Hydra head which recorded game state, user inputs, and validated game state transitions (as a proof of concept, using only some minor logic pertaining to the movement of the player and dying in-game).\\n\\n![At Rare Evo](https://github.com/user-attachments/assets/d897190d-ece6-4fa6-b0f0-ec214a58d0e2)\\n\\nPeople could connect remotely via https://doom.hydra.family or in person on two custom-made arcade cabinets we had constructed for the occasion. Each game session contributed 35 transactions per second. In aggregate, we processed 106 million transactions with Hydra during the 78 hours of operation, which is more than the entire history of Cardano mainnet. The peak was around 7,200 tps.\\n\\n![Last screen shot](https://github.com/user-attachments/assets/f0b1430a-1cdf-4c48-839d-b6d217c8279a)\\n\\nThe demo was very positively received on social media and seems to have rekindled the flames around the Hydra narrative both internally and externally, which hopefully bodes well for both future adoption interest among builders, as well as the prospects of securing funding for the continued development of Hydra from Intersect.\\n\\n### Network tests with fault injection\\n\\nWe have set up a simple yet effective [workflow](https://github.com/cardano-scaling/hydra/blob/master/.github/workflows/network-test.yaml) capable of simulating a Hydra cluster under high transaction loads and packet loss network failures.\\n\\nWith this, we aim to consistently reproduce and resolve issues that are causing the head to become stuck, as outlined in [#1436](https://github.com/cardano-scaling/hydra/issues/1436).\\n\\nThe workflow specifies a set of high-load scenarios, each of which spins up the same Hydra cluster on `devnet` used during the [getting started](https://hydra.family/head-protocol/docs/getting-started) tutorial and injects network faults using [Pumba](https://github.com/alexei-led/pumba).\\n\\nThe idea is to allow and encourage everyone to experiment with this workflow and collect summary results, which contain details about the performance within the head. Because these tests are performed with the `hydra-node` being a \'black box,\' it also allows us to explore alternative network stacks as a whole.\\n\\n### New landing page\\n\\nFor the Rare Evo event with the public Hydra doom demo (see above), we also figured it would be a good idea to improve the first impression new visitors get from the https://hydra.family website.\\n\\nThe marketing team at IOG collaborated on creating new content and design for the landing page. In addition to highlighting the key features and explaining the importance of the Hydra Head protocol, the updated landing page also includes an analogy of how Hydra works, using a cargo plane as an example.\\n\\n![](img/2024-08-hydra-landing-page.png)\\n<small><center>Screenshot of the new landing page</center></small>\\n\\nThe original design included an alternative color scheme using <span style={{color: \\"#12506C\\"}}>Teal</span> as the primary accent color and <span style={{color: \\"#721F41\\"}}>Plum</span> as the secondary. An example is included below. Do you think a new color scheme would be appealing or do you prefer the <span style={{color: \\"#6874e8\\"}}>Purple</span> main color as-is? Shoot us a message on Twitter (X) or [#ask-hydra on Discord](https://discord.com/invite/Qq5vNTg9PT) with your thoughts.\\n\\n<details>\\n<summary>Alternative color scheme example</summary>\\n\\n![](img/2024-08-hydra-other-color-scheme.png)\\n\\n</details>\\n\\n### Bug fix: layer 2 transactions during decommits\\n\\nAfter releasing the decommit feature that enables users to transfer funds from layer 2 to layer 1 while the head is operational, we quickly identified a bug. When a decommit is pending ( funds have not yet been withdrawn from the head) and a user attempts to create a new layer 2 transaction, the hydra-node attempts to re-apply the pending decommit to the local ledger state, resulting in an error.\\n\\nWe promptly realized that any pending decommit needs to match with the decommit in the new snapshot and should be preserved in the next snapshot(s) until it is observed. Without this fix, our decommit feature would be extremely fragile, so we made sure to quickly draft a failing [test](https://github.com/cardano-scaling/hydra/pull/1540/files#diff-3479844ad82c0fd2f7af59c36f930cdb540876b9cf4201d67a41da83688500a9R440) and do a proper fix.\\n\\n[This](https://github.com/cardano-scaling/hydra/pull/1540) is a pull request that fixes this bug and we also demonstrated this fix in one of our monthly meetings.\\n\\n## Conclusion\\n\\nThe monthly review meeting for August 2024 was held on 2024-08-28 via Google Meet,\\npresenting these [slides][slides] and this [recording][recording].\\n\\nThis month we saw demonstrations from both projects about new features and\\nimproved testing capabilities. Optimization results and test results underline\\nthe teams\' commitment to evidence-based engineering. The Hydra Doom demo was a\\ngreat success and we received good feedback from users and use cases.\\n\\nWhile roadmaps have not moved much over the last couple of months, but more\\nre-orientation is likely as plans for 2025 are coming together in the working\\ngroups and other Intersect committees.\\n\\n[slides]: https://docs.google.com/presentation/d/106NA1xtpuIcnC86HawBzpxY9VLexzOOxcfPD3dyoAg8\\n[recording]: https://drive.google.com/file/d/1Hi9AiI9cmIWXcN5xPTu3gl-KbyW-wm0K"},{"id":"2024-07","metadata":{"permalink":"/monthly/2024-07","editUrl":"https://github.com/cardano-scaling/website/tree/master/monthly/2024-07-monthly.md","source":"@site/monthly/2024-07-monthly.md","title":"July 2024","description":"This is a monthly report on the progress of \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects since June 2024. This document serves as a preparation for and a written summary of the monthly stakeholder review meeting, which is announced on our Discord channels and held on Google Meet. This month, the meeting was held on 2024-07-22 using these slides and you can see the recording here.","date":"2024-07-24T07:32:44.000Z","formattedDate":"July 24, 2024","tags":[{"label":"monthly","permalink":"/monthly/tags/monthly"}],"readingTime":6.32,"hasTruncateMarker":false,"authors":[{"name":"Sebastian Nagel","title":"Software Engineering Lead, IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"},{"name":"Jean-Philippe Raynaud","title":"Software Engineering Lead, IOG","url":"https://github.com/jpraynaud","imageURL":"https://github.com/jpraynaud.png","key":"jpraynaud"},{"name":"Marek Mahut","title":"CEO, Blockfrost","url":"https://github.com/mmahut","imageURL":"https://github.com/mmahut.png","key":"mmahut"}],"frontMatter":{"title":"July 2024","slug":"2024-07","authors":["ch1bo","jpraynaud","mmahut"],"tags":["monthly"]},"unlisted":false,"prevItem":{"title":"August 2024","permalink":"/monthly/2024-08"},"nextItem":{"title":"June 2024","permalink":"/monthly/2024-06"}},"content":"This is a monthly report on the progress of \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects since June 2024. This document serves as a preparation for and a written summary of the monthly stakeholder review meeting, which is announced on our Discord channels and held on Google Meet. This month, the meeting was held on 2024-07-22 using these [slides][slides] and [you can see the recording here][recording].\\n\\n## Mithril\\n\\n[Issues and pull requests closed in July](https://github.com/input-output-hk/mithril/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2024-06-30..2024-07-31)\\n\\n### Distributions\\n\\n#### 2423.0\\n\\nWe have released the new Mithril distribution [`2428.0`](https://github.com/input-output-hk/mithril/releases/tag/2428.0). This distribution includes several critical updates and enhancements:\\n- Support for **Cardano node** `9.0.0`.\\n- Database cleanup and optimization once per epoch.\\n- Bug fixes and performance improvements.\\n\\n#### Future distributions\\n\\n![](img/2024-07-mithril-distributions.png)\\n\\nWe have planned to release two new distributions in August:\\n- `2430` (before the **Chang** hardfork):\\n  - Activation of the certification of **Cardano transactions** in the `release-preprod` network.\\n  - Support for **Cardano node** `9.1.0` on **all networks**.\\n- `2434` (after the **Chang** hardfork):\\n  - Activation of the certification of **Cardano transactions** in the `release-mainnet` network.\\n\\n### Protocol status\\n\\nHere is the status of the Mithril protocol on the Cardano `mainnet`:\\n![](img/2024-07-mithril-protocol-status.png)\\n\\n### Transaction verification in Nami\\n\\nAs Blockfrost now supports the Mithril endpoints within their API, they have presented an implementation example.\\n\\n- The demo shows transaction verification within the Nami light wallet (using Blockfrost as its backend).\\n- This allows the light wallet user to verify that their transaction is on-chain with the high certainty provided by Mithril security.\\n- While it is just an experimental implementation, it might be accepted by the Nami upstream in the future.\\n\\n![https://ipfs.io/ipfs/bafybeiayaxyr6b442sz22n4ag5hfwjjnym2bwd4rpdzha3stdhrkbhzxye?filename=demo_blockfrost_mithrill_support.mp4](https://ipfs.io/ipfs/bafkreifxrd7pcby47ruutcdvjsv2q6tggfs7dnij2ve2brdzwcucoq6g7e?filename=ezgif-6-c33802f259.gif)\\n\\n### Transaction certification\\n\\nWe have continued working on the implementation of the Cardano transaction certification with Mithril and are currently preparing for the rollout of this feature to production:\\n\\n- We are finalizing the minimization of the signer footprint on the SPO infrastructure.\\n- We are preparing for activating the feature in the `release-preprod` network with the following release.\\n- We are preparing thorough documentation about the mechanism used to certify the transactions\\n- We have selected final parameters for signing the transactions:\\n  - `100` blocks from the tip of the chain (`~30 minutes`).\\n  - `30` blocks between snapshots certifying the transactions (`~10 minutes`).\\n  - With these parameters, we can consider the transactions final with very high probability.\\n  - These parameters are hot parameters that can be adjusted without requiring a new distribution\\n\\n![](img/2024-07-mithril-cardano-tx-roadmap.jpg)\\n\\n### Decentralized Message Queue CIP\\n\\nWe have been collaborating with the Cardano networking team to design a mechanism for implementing a decentralized message queue to decentralize the signature diffusion from Mithril signers to Mithril aggregators based on the Cardano network layer. The idea is to create a separate process for the decentralized message queue implementation:\\n\\n- A new dedicated process (aka \\"Mithril network node\\") based on the Ouroboros network stack\\n- More efficient handling of resource consumption (network and CPU) and reduced impact on the Cardano node performance and availability\\n- Enhanced security with no impact on the Cardano node\\n- Different release pace for both nodes\\n- Both nodes will be bundled in the Cardano node distribution release\\n- A hard fork for SPO registration of the port of their Mithril network node is likely needed.\\n\\n![](img/2024-07-mithril-cardano-decentralized-message-queue.jpg)\\n\\n## Hydra\\n\\n[Issues and pull requests closed in July](https://github.com/cardano-scaling/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2024-06-30..2024-07-31)\\n\\n\\n![The roadmap with features and ideas](./img/2024-07-hydra-roadmap.jpg)\\n<small><center>Snapshot of the new [roadmap](https://github.com/orgs/cardano-scaling/projects/7/views/1) with features and ideas</center></small>\\n\\nNotable updates on our [roadmap](https://github.com/orgs/cardano-scaling/projects/7/views/1) this month are:\\n- Completed incremental decommits, to be released separately as `0.18.0` after some remaining cleanup tasks and documentation updates\\n- Release `0.19.0` will be incremental decommits and, depending on the hard-fork date of Cardano mainnet, switching to Conway on the Hydra L2 ledger (see [March 2024](/monthly/2024-03#conway-support) for more details)\\n- Refined scope of \\"what is Hydra V1\\" through the Hydra working group\\n  - Added [SDK for wallet integration with Hydra #1509](https://github.com/cardano-scaling/hydra/issues/1509) to provide a better developer experience\\n  - Decided to implement [Directly open heads #1329](https://github.com/cardano-scaling/hydra/issues/1329) and [Partial fanout](https://github.com/cardano-scaling/hydra/issues/1468) to overcome our [known issue & limitations](https://hydra.family/head-protocol/docs/known-issues/) and supersede several other \ud83d\udcad ideas.\\n  - Prioritized [Optimistic head closure #198](https://github.com/cardano-scaling/hydra/issues/198) higher based on user feedback.\\n  - Declared [React to protocol parameter changes #195](https://github.com/cardano-scaling/hydra/issues/195) as not essential for a V1.\\n\\n### Incremental decommits completed\\n\\nThis month we finally finished the implementation of the [Incremental decommit #1057](https://github.com/cardano-scaling/hydra/issues/1057) feature.\\n\\nAs evident from the GitHub feature description, the number of comments\\nand linked pull requests, this was a complex change.\\n\\nLast month, we discussed why versioning the `open` state on-chain is necessary and the \\nsubsequent changes to the specification and implementation. After addressing these in\\n[hydra#1473](https://github.com/cardano-scaling/hydra/issues/1473) and in\\n[hydra#1474](https://github.com/cardano-scaling/hydra/issues/1474), a thorough\\nreview and requiring tests for all changes (compared to `master`) in\\n[hydra#1483](https://github.com/cardano-scaling/hydra/issues/1483) concluded in\\na last cleanup PR, which made the feature consistent in specification,\\nimplementation and documentation.\\n\\nIn the monthly review meeting we demonstrated the feature and the video below also shows how it works using a [small extension](https://github.com/cardano-scaling/hydra/pull/1517) to the `hydra-tui`:\\n\\n<center>\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube-nocookie.com/embed/8gy2JV02TuY?si=5ph1gE5ISre328RP\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" referrerpolicy=\\"strict-origin-when-cross-origin\\" allowfullscreen></iframe>\\n</center>\\n<br/>\\n\\n### Repository moved\\n\\nThis month, the Hydra repository was moved to the `cardano-scaling` GitHub organization: https://github.com/cardano-scaling/hydra.\\n\\nThis allows for a more flexible use and sharing of GitHub runners between the main repository and for example [hydra-explorer](https://github.com/cardano-scaling/hydra-explorer).\\n\\n:::info Docker registry changed \ud83d\udc0b\\nIf you are using docker images of the hydra project, new releases will be available under `ghcr.io/cardano-scaling/hydra-node`\\n:::\\n\\nMost links should be automatically redirected, but if you encounter broken links, just reach out on Discord or create an issue \ud83d\ude4f https://github.com/cardano-scaling/hydra/issues/new/choose\\n\\n:::info New roadmap \ud83d\uddfa\\nGitHub projects cannot be moved, so a copy of the Hydra roadmap was made and this version is used going forward: https://github.com/orgs/cardano-scaling/projects/7/views/1\\n:::\\n\\n### Working group updates\\n\\nThere were two Hydra working group meetings this month and multiple people showed interest in joining. Current member list can be found in the [charter](https://github.com/cardano-scaling/wg-hydra) and meeting notes of all meetings are kept in [the repository](https://github.com/cardano-scaling/wg-hydra/blob/main/meetings) too.\\n\\nThe working group started work on the first item \\"What is Hydra Head V1\\" and\\ngathered valuable feedback in discussions between fellow layer 2 architects and\\nHydra users.\\n\\nNotable inputs were the need for an SDK, wallet integration and the ability to\\noperate without a full cardano-node, which got captured in\\n[hydra#1509](https://github.com/cardano-scaling/hydra/issues/1509) and\\n[hydra#1305](https://github.com/cardano-scaling/hydra/issues/1305) respectively. Even brand new ideas emerged from these discussions like \\"resumable Hydra heads\\".\\n\\nThe immediate goal is to achieve a common understanding of what must be included for a Hydra Head V1 and consequently when/how this could be audited?\\n\\nDiscussions also revolved around discoverability of Hydra heads, specifically, but also general interoperability with off-chain ledgers (any layer 2). In that regards, the group is considering to work on a [CPS/CIP](https://github.com/cardano-foundation/CIPs) in the mid term.\\n\\n## Conclusion\\n\\nThe monthly review meeting for July 2024 was held on 2024-07-22 via Google Meet,\\npresenting these [slides][slides] and this [recording][recording].\\n\\nDespite the likely impact of summer breaks on attendance, it was great to have Blockfrost demonstrate their experiments using Mithril certificates delivered through Blockfrost in a forked Nami version. This demo clearly illustrates how light clients can benefit from Mithril verifiable transactions.\\n\\nOn the Hydra side, we are very pleased to have successfully merged and prepared the incremental decommits feature for release. Although this process took some time, it marks the first substantial feature not originally covered by the Hydra head paper, demonstrating the protocol\'s capacity to grow and meet user needs. We appreciate all the valuable input from the Hydra working group regarding the features we should develop next and are excited to see the growing community interest in Hydra\'s future.\\n\\n[slides]: https://docs.google.com/presentation/d/17T18tNIJZPTiEfc2Psb1C6GRxt04hRNj16E5BiAML_I\\n[recording]: https://drive.google.com/file/d/1sXYt1MZJtrq1jARha-MGLMWVORvSUjEv"},{"id":"2024-06","metadata":{"permalink":"/monthly/2024-06","editUrl":"https://github.com/cardano-scaling/website/tree/master/monthly/2024-06-monthly.md","source":"@site/monthly/2024-06-monthly.md","title":"June 2024","description":"This is a monthly report on the progress of \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects since May 2024. This document serves as a preparation for and a written summary of the monthly stakeholder review meeting, which is announced on our Discord channels and held on Google Meet. This month the meeting was held on 2024-06-24 using these slides and you can see the recording here.","date":"2024-06-25T11:10:44.000Z","formattedDate":"June 25, 2024","tags":[{"label":"monthly","permalink":"/monthly/tags/monthly"}],"readingTime":6.26,"hasTruncateMarker":false,"authors":[{"name":"Jean-Philippe Raynaud","title":"Software Engineering Lead, IOG","url":"https://github.com/jpraynaud","imageURL":"https://github.com/jpraynaud.png","key":"jpraynaud"},{"name":"Sasha Bogicevic","title":"Senior Software Engineer, IOG","url":"https://github.com/v0d1ch","imageURL":"https://github.com/v0d1ch.png","key":"v0d1ch"},{"name":"Reza Babaram","title":"Product Manager Scaling, IOG","url":"https://github.com/rezabaram","imageURL":"https://github.com/rezabaram.png","key":"rezabaram"},{"name":"Franco Testagrossa","title":"Senior Software Engineer, IOG","url":"https://github.com/ffakenz","imageURL":"https://github.com/ffakenz.png","key":"ffakenz"}],"frontMatter":{"title":"June 2024","slug":"2024-06","authors":["jpraynaud","v0d1ch","rezabaram","ffakenz"],"tags":["monthly"]},"unlisted":false,"prevItem":{"title":"July 2024","permalink":"/monthly/2024-07"},"nextItem":{"title":"May 2024","permalink":"/monthly/2024-05"}},"content":"This is a monthly report on the progress of \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects since May 2024. This document serves as a preparation for and a written summary of the monthly stakeholder review meeting, which is announced on our Discord channels and held on Google Meet. This month the meeting was held on 2024-06-24 using these [slides][slides] and [you can see the recording here][recording].\\n\\n## Mithril\\n\\n[Issues and pull requests closed in June](https://github.com/input-output-hk/mithril/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2024-05-31..2024-06-30)\\n\\nWe have released the new Mithril distribution [`2423.0`](https://github.com/input-output-hk/mithril/releases/tag/2423.0). This distribution includes several critical updates and enhancements:\\n- **BREAKING** changes in the **Mithril client CLI**:\\n  - The deprecated `snapshot` command has been **removed**\\n  - It has been superseded by the `cardano-db` command\\n- Bug fixes and optimizations.\\n\\nWe have also created a developer blog post about the [removal of the Mithril client CLI \'snapshot\' command](https://mithril.network/doc/dev-blog/2024/06/12/client-cli-removed-command).\\n\\nAdditionally, we have released a draft version of the [Mithril threat model analysis](https://mithril.network/doc/mithril/threat-model). We expect to receive external feedback and contributions before considering it final.\\n\\n### Transaction certification\\n\\nWe kept working on the implementation of the Cardano transaction certification with Mithril and made good progress with the development: \\n- Transactions are now retrieved with the chain sync mini-protocol using the [`Pallas`](https://github.com/txpipe/pallas) library\\n- The performance of the prover route of the aggregator has significantly improved.\\n\\n![](img/2024-06-mithril-cardano-tx-roadmap.jpg)\\n\\n#### Low latency certification\\n\\nThe transactions are imported using the native chain sync mini-protocol of the Cardano node. This has been made possible with the Pallas library, which fully supports this mini-protocol. This allowed us to retrieve transactions much closer to the tip of the chain and at more frequent intervals. To achieve this, we have enhanced the transaction importer to handle chain rollbacks, where some blocks previously recorded may be discarded at a later time, with an increased probability as we get closer to the tip of the chain.\\n\\nWe are currently calibrating the system parameters (depth from the tip and certification pace) before activating it on the mainnet.\\n\\n#### Increased prover performance\\n\\nWe have identified some bottlenecks in the computations of the merkelized proof for transaction membership of the transaction set as well as in the database access. These bottlenecks have been fixed, allowing us to achieve a new order of magnitude in the performance of the prover route. It is now able to consistently deliver **10,000** transaction hashes certification per second.\\n\\n![](img/2024-06-mithril-cardano-tx-prover-throughput.png)\\n\\n### Mithril/Cardano integration\\n\\nWe have been working with the Cardano networking team to design a closer integration of Mithril into Cardano. In particular, we have focused on decentralizing the signature diffusion from Mithril signers to Mithril aggregators based on the Cardano network layer. \\n\\nHere is the current roadmap:\\n- Assessing Cardano network bandwidth capacity to support Mithril signature diffusion\\n- Designing a node-to-node mini-protocol for signature diffusion\\n- Designing two node-to-client mini-protocols for signature submission and notification\\n- Preparing the submission of a CIP draft to the community.\\n\\n![](img/2024-06-mithril-cardano-integration.png)\\n\\n## Hydra\\n\\n[Issues and pull requests closed in\\nJune](https://github.com/input-output-hk/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2024-05-31..2024-06-30)\\n\\nHere is a high-level overview of the team\'s work over the past month:\\n\\n- **Incremental decommits.** We continued our work on incremental decommits, focusing on investigating adversarial attacks on the head script contract.\\n- **Specification update.** We updated our [specification](https://github.com/input-output-hk/hydra/pull/1479) with the latest changes following our exploration of adversarial attacks. These updates aim to enhance the security of the protocol.\\n- **Agda specification for the Hydra protocol.** Work has begun on writing an Agda specification for the Hydra protocol. You can follow the progress [here](https://github.com/cardano-scaling/hydra-formal-specification).\\n- **Incremental commit.** We discussed various options for the incremental commit work, including potential designs for a hydra-ledger to improve system efficiency and security.\\n- **Node compatibility.** The node has been successfully updated and is now compatible with cardano-node version 8.11-pre.\\n- **Website.** We updated our website tutorials and documentation to enhance expressivity and ease of use.\\n- **Committing internal wallet UTXOs.** We made breaking changes to the `hydra-node` API `/commit` endpoint [#1463](https://github.com/input-output-hk/hydra/pull/1463) to remove the check that prevented committing UTXOs from an internal `hydra-node` wallet.\\n\\nWe have not planned the next release, so our roadmap remains largely unchanged. Our current focus is on incremental decommits and commits and specifying our protocol in Agda.\\n\\n![The roadmap with features and ideas](./img/2024-06-hydra-roadmap.png)\\n<small><center>The latest roadmap with features and ideas</center></small>\\n\\n### Incremental decommit\\n\\nWe were about to release the incremental decommit feature when we discovered a bug during a demo. This bug related to handling the decommit snapshot in close/fanout. When one decided to decommit funds from the head and everyone signed the decommit snapshot, the same snapshot was used to close/fanout. If this snapshot contained some UTXOs to decommit but one already decommitted funds from the head, the fanout would distribute the decommit funds again.\\n\\nThis issue was significant, and although we have many tests around the decommit feature, we had not checked user balances upon head closure.\\n\\nWe have implemented a fix that involves adding versioned snapshots. This allows us to distinguish between two cases:\\n\\n- The decommit snapshot was signed, but the decommit was never observed\\n- The decommit snapshot was signed, and the decommit was also observed.\\n\\nWhen we observe the decommit transaction locally, we increment the version in the local state. This allows us to compare the snapshot version against the expected local version on-chain.\\n\\nWe also needed to keep extra data in the `Close` redeemer to successfully check for a valid snapshot signature while altering the close datum to remove the UTXOs to decommit if the versions do not match. This ensures that the fanout behaves correctly, as it is only concerned with the close datum and the actual transaction output hashes.\\n\\nThe remaining work involves updating the specification with the changes in the implementation. We expect to release this feature in the coming days.\\n\\n## Community\\n\\n## Subbit.xyz\\n\\nAlgy Wallis presented \'Subbit\', a layer 2 solution focused on subscription-based services, aimed at addressing the complexities of building blockchain products. Subbit is designed to be easier to integrate and manage compared to layer 1 solutions, reducing latency and transaction fees. The system allows providers to verify consumer IOU notes, facilitating periodic payments and withdrawals with minimal on-chain interactions. This model mirrors Bitcoin\'s Lightning Network and aims to enhance scalability and interoperability for subscription services on Cardano.\\n\\n## Hydrozoa\\n\\nGeorge Flerovsky introduced the Hydrazoa proposal, currently in Catalyst Fund12. Hydrazoa aims to enhance the existing Hydra framework by adding dynamic capabilities for incremental commits and decommits, along with the ability to add or remove participants in state channels while they are still open. The goal is to simplify layer 1 scripts and lower costs, with fallback mechanisms similar to Hydra\'s in case of layer 2 consensus failure. George highlighted the differences and potential integrations with Hydra, emphasizing a more flexible and simplified approach to state channel management.\\n\\n## Technical working groups\\n\\nReza Baram provided an update on the Hydra working group, which recently had its first meeting to discuss its vision and collaborative processes. The primary goal is to create an environment for sharing knowledge and working towards scaling Cardano beyond just Hydra. The group is currently focused on defining and delivering Hydra version one, prioritizing incremental commits and robustness improvements. Feedback from the community and working group members will be sought to refine and enhance the roadmap, ensuring effective scaling solutions for Cardano applications. The Hydra working group is open to new members and contributions from the community. [Read more here](https://github.com/cardano-scaling/wg-hydra).\\n\\n## Conclusion\\n\\nThe monthly review meeting for June 2024 was held on 2024-06-24 via Google Meet,\\npresenting these [slides][slides] and this [recording][recording].\\n\\n[slides]: https://docs.google.com/presentation/d/137n0SQ2tnWCrDfPieT3JSU8MDnJDTKuLE8ISSieRO4U/edit#slide=id.g1f87a7454a5_0_1392\\n[recording]: https://drive.google.com/file/d/1hIn4NWv6YRtwv_7RUGlXP8ObwpPbMNJy/view"},{"id":"2024-05","metadata":{"permalink":"/monthly/2024-05","editUrl":"https://github.com/cardano-scaling/website/tree/master/monthly/2024-05-monthly.md","source":"@site/monthly/2024-05-monthly.md","title":"May 2024","description":"This is a monthly report on the progress of \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects since April 2024. This document serves as a preparation for and a written summary of the monthly stakeholder review meeting, which is announced on our Discord channels and held on Google Meet. This month the meeting was held on 2024-05-28 using these slides and you can see the recording here.","date":"2024-05-29T07:03:16.000Z","formattedDate":"May 29, 2024","tags":[{"label":"monthly","permalink":"/monthly/tags/monthly"}],"readingTime":9.14,"hasTruncateMarker":false,"authors":[{"name":"Sebastian Nagel","title":"Software Engineering Lead, IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"},{"name":"Jean-Philippe Raynaud","title":"Software Engineering Lead, IOG","url":"https://github.com/jpraynaud","imageURL":"https://github.com/jpraynaud.png","key":"jpraynaud"}],"frontMatter":{"title":"May 2024","slug":"2024-05","authors":["ch1bo","jpraynaud"],"tags":["monthly"]},"unlisted":false,"prevItem":{"title":"June 2024","permalink":"/monthly/2024-06"},"nextItem":{"title":"April 2024","permalink":"/monthly/2024-04"}},"content":"This is a monthly report on the progress of \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects since April 2024. This document serves as a preparation for and a written summary of the monthly stakeholder review meeting, which is announced on our Discord channels and held on Google Meet. This month the meeting was held on 2024-05-28 using these [slides][slides] and [you can see the recording here][recording].\\n\\n## Mithril\\n\\n[Issues and pull requests closed in May](https://github.com/input-output-hk/mithril/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2024-04-30..2024-05-30)\\n\\nWe have released the new Mithril distribution [`2418.1`](https://github.com/input-output-hk/mithril/releases/tag/2418.1). This distribution includes several critical updates and enhancements:\\n- A **breaking change** introduced in the **Mithril client / Mithril client CLI**:\\n  - The certificate chain structure has been modified to remove coupling with the immutable file number\\n  - The client **must be updated** to verify the certificate chain\\n- We have switched the **memory allocator** to `jemallocator` on the signer and the aggregator to avoid memory fragmentation\\n- We have enabled the BLST `portable` feature by default to benefit from **runtime check** of intel ADX instruction set.\\n\\nAlso, we have started the process of removing the deprecated `snapshot` command from the client which is superseded by the `cardano-db` command. This **change will be effective** with the release of the next Mithril distribution.\\n\\n### Transaction certification\\n\\nWe have kept working on the implementation of the Cardano transactions certification with Mithril and we have achieved a new milestone with running the certification in a test network (aka `testing-mainnet`) which operates on the Cardano `mainnet`. \\n\\nThis allowed us to refine our roadmap with clear objectives before the MVP can be released:\\n- Keep working on the low latency implementation of the certification\\n- Optimize the aggregator prover route to reach good throughput\\n- Optimize the signer footprint to limit the impact on the SPO infrastructure\\n- Optimize the signer and aggregator warmup to avoid network instability/disruption once the MVP is released.\\n\\n![](img/2024-05--mithril-cardano-tx-roadmap.jpg)\\n\\nA first optimization of the prover route has been implemented, drastically improving performance. By implementing resource pooling on the Merkle tree that signs transactions by block range, we have achieved a **100x** increase in throughput.\\n\\n![](img/2024-05--mithril-cardano-tx-performance-prover.png)\\n\\nWe have also implemented a pruning mechanism on the signer that retains only the transactions needed to compute upcoming signatures. This has reduced the storage requirements from **32GB** to **100MB**.\\n\\n### In/Out SPOs dashboard\\n\\nWe have added a new [page](https://mithril.network/explorer/registrations-in-out?aggregator=https%3A%2F%2Faggregator.release-mainnet.api.mithril.network%2Faggregator) to the Mithril explorer that lists the newly registered and recently de-registered signers in the Mithril protocol.\\n\\n![](img/2024-05--mithril-explorer-in-out-spos.png)\\n\\n### The protocol insights dashboard\\n\\nA new [Mithril protocol insights dashboard](https://lookerstudio.google.com/u/1/reporting/8b05ea4b-6a43-45ea-aef2-237906ec7a42/paage/kem0D) has been released. It provides metrics such as the number of SPOs and total stake involved, the daily number of Cardano database restorations, and the breakdown of running signer versions.\\n\\nFeel free to request some new metrics on the dashboard!\\n\\n![](img/2024-05--mithril-protocol-insights-dashboard.png)\\n\\n\\n## Hydra\\n\\n[Issues and pull requests closed in\\nMay](https://github.com/input-output-hk/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2024-04-30..2024-05-30)\\n\\nThis month, Hydra version `0.17.0` was released which includes\\n- breaking changes of the `/commit` endpoint, yielding full flexibility when committing from scripts (see [this how-to](https://hydra.family/head-protocol/docs/how-to/commit-blueprint) for details)\\n- new `GET /snapshot/utxo` HTTP endpoint\\n- detecting network protocol mismatches\\n\\n- [Full release notes](https://github.com/input-output-hk/hydra/releases/tag/0.17.0) and a list of [delivered features](https://github.com/input-output-hk/hydra/milestone/18?closed=1)\\n\\nBesides corresponding features being released through `0.17.0`, the roadmap did not change much this month. Current focus is on incremental decommits and commits, while we also wait for the `Conway` hard-fork to happen before we can switch the L2 ledger also to `Conway` (see [March report](/monthly/2024-03#conway-support) for more details). \\n\\n![The roadmap with features and ideas](./img/2024-05-hydra-roadmap.jpg)\\n<small><center>The latest roadmap with features and ideas</center></small>\\n\\n### Transaction trace testing\\n\\nIn the process of implementing the incremental decommits feature, we constantly considered how to ensure our test suite covered all potential scenarios. For example, what happens if we request a decommit, have a signed snapshot, but never post a decommit transaction? Or how do we handle close and fanout with decommit UTXO in the snapshot? There are various scenarios we are interested in testing, and we quickly realized that we would need to test at different levels to achieve the coverage we expect, especially for our on-chain code.\\n\\nOur mutation test suite was also very helpful in testing whether our on-chain code produces the expected errors when manipulating the transaction to make it invalid. However, this framework tests individual transactions, and we needed to test if multiple transactions in sequence produce valid results.\\n\\nTo address this, we decided to utilize quickcheck-dynamic once again to model simple snapshots, which are used to construct Hydra transactions. Our hope was that if the model is simple enough, we would be able to reason about it without delving into many details and decide if a particular UTXO/snapshot should be valid in the current transaction context or not. In the quickcheck-dynamic world, our \'Action\' contains snapshots, which are then used to construct different transactions, evaluate, and observe them. Our model keeps the extra information we need to evaluate these transactions, and all snapshots are signed by everybody to keep things simple.\\n\\nThis test suite has already exposed some bugs we had and enabled us to reason about our code using a simpler model without burdening us with real-world details, which are more involved and harder to reason about.\\n\\n### Hydra-related Catalyst proposals\\n\\nCatalyst Fund12 is in full swing, with over 30 proposals this round mentioning \'Hydra\' in one way or another. While some directly draw inspiration from Hydra and tackle similar challenges, others aim to enhance transaction processing scalability but take different approaches (such as rollups and sidechains). Additionally, some proposals focus solely on scaling payment transactions, offering refreshingly simple solutions.\\n\\nAfter a quick screening, we also engaged with some of the proposal authors this month to address questions about Hydra, discuss similarities, and explore opportunities for mutual learning and collaboration:\\n\\n##### Use cases\\n\\n- [Wine Supply Chain Tracking and Reporting System](https://cardano.ideascale.com/c/idea/121983). Great use case that requires the seamless integration of recording data as transactions off-chain, with resulting states and tokens accessible from the Cardano layer 1. The team is already developing a proof of concept using Hydra, and this proposal aims to advance it into a minimum viable product (MVP).\\n\\n- [Ikigai + MLABS - Grabbit / Hydra auctions](https://cardano.ideascale.com/c/idea/123388): Running auctions within Hydra heads is a popular use case, allowing for fast and cost-effective bids on layer 2, while the final purchase of auction items seamlessly occurs on the Cardano layer 1. This proposal, in particular, will utilize incremental commits and decommits to facilitate fully-backed auctions on layer 2.\\n\\n#### Using / extending hydra\\n\\n- [Hydra-Enabled Micropayments System](https://cardano.ideascale.com/c/idea/120893). The same team behind the wine supply chain tracking system wants to also provide a decentralized payment system that offers great point-of-sales experience using Hydra at its core. While they aim to use Hydra Head as a core component, this would also be a great use case for the more payment-focused variants in the long run (see below).\\n- [Open-source Hydra Head L2 Web-based Explorer and API](https://cardano.ideascale.com/c/idea/123375). Improving the visibility of what\'s going on in a Hydra Head is a great idea. Besides exploring what heads are available on the network, this would make transactions _inside_ a head more visible and is very much related to [this idea](https://github.com/input-output-hk/hydra/issues/183) on our roadmap.\\n- [Cardano Layer 2: Hydrozoa protocol for lightweight and flexible Hydra Heads for Cardano](https://cardano.ideascale.com/c/idea/123560). An exciting re-interpretation of the core Hydra Head protocol and ambitious simplifications of roadmap features like [directly open heads](https://github.com/input-output-hk/hydra/issues/1329), [incremental de](https://github.com/input-output-hk/hydra/issues/1057)-/[commits](https://github.com/input-output-hk/hydra/issues/199) and [optimistic head closure](https://github.com/input-output-hk/hydra/issues/198). This was also [discussed in the past](https://github.com/input-output-hk/hydra/discussions/850) with core contributors, and we would love to explore how those protocol variants can find their way into the upstream Hydra Head protocol.\\n\\n#### Alternative scaling approaches\\n\\n- [Subbit.xyz : Cardano\'s featherweight L2](https://cardano.ideascale.com/c/idea/122085). Refreshingly simple take on how to process payments off-chain. Very much inspired by lightning payment channels and maybe even Chaumean eCash systems. Having payment channels that work in such a simple and flexible way is exciting and could be a great basis for any payment channel networks, ie Cardano Lightning.\\n- [\xb5graph: Instant, Untraceable Payments in Cardano](https://cardano.ideascale.com/c/idea/122901). Ambitious, but promising, take on what the _Hydra tail_ could be \u2013 an asymmetric construction that benefits individual users by using zero-knowledge proofs to ensure correct operation of the node.\\n- [Anastasia Labs Cardano Layer2 - Midgard](https://cardano.ideascale.com/c/idea/122254). A layer 2 construction, similar to Hydra Head, that seeks to utilize the Cardano ledger isomorphically, but operates with a limited validator set and employs a distinct consensus mechanism to offer an experience akin to sidechains. We always wondered what you would get if you ran a Hydra Head with a non-total consensus and checkpointing state on layer 1!\\n\\n## Technical working groups\\n\\nAs the age of Voltaire unfolds, it fosters the formation of community alliances and member-based organizations. At the same time, there\'s a popular belief that governance over core Cardano projects should become more open, with decisions regarding the inclusion or exclusion of elements on the roadmap of core infrastructure being transparent.\\n\\nThe current strategy devised by Intersect and its members to address this involves establishing technical working groups that operate openly and transparently on roadmaps and high-level backlog items. This approach mirrors what we\'re already doing here (see also last\\nmonths [starmap update](/monthly/2024-04#starmap-update)\\nsection), but with a more concrete democratic approach to ratifying a roadmap. Presently, roadmaps for both Hydra and Mithril projects are expected to be governed in this manner.\\n\\nSpecifically for the Hydra working group, initial steps were taken this month by drafting a barebones charter and brainstorming first agenda items to engage potential members and get first sessions going as we gather more interested stakeholders. The charter and any future outputs of the working group will be\\nhosted on [`cardano-scaling/wg-hydra`](https://github.com/cardano-scaling/wg-hydra) and we\\nalso [registered the working group at\\nIntersect](https://intersect.gitbook.io/intersect-working-groups/technical-working-groups/hydra).\\n\\n:::info\\n\\nIf you\'ve read this far, you might want to join us! Signal your interest by [opening an issue](https://github.com/cardano-scaling/wg-hydra/issues/new?template=sign_me_up.yml) or reaching out on `#ask-hydra` on the [IOG Discord](https://discord.com/invite/Qq5vNTg9PT) or `#wg-hydra` on the Intersect Discord (once it\'s available).\\n\\n:::\\n\\n## Conclusion\\n\\nThe monthly review meeting for May 2024 was held on 2024-05-28 via Google Meet,\\npresenting these [slides][slides] and this [recording][recording].\\n\\nMay was a short month because of the public holidays and some people being off, but we still made good progress on both projects. The new dashboards for Mithril will visualize existing participation and surely garner more interest in the protocol. We are also excited about the progress on the Cardano transactions certification with Mithril, especially as multiple projects building bridges or layer 2s are keeping a close eye on this feature.\\n\\nWhile we are busy on the Hydra side wrapping our head around incremental decommits and ensuring they are correctly implemented through transaction trace testing, we are also excited about the upcoming Catalyst Fund12 proposals and the discussions coming along with it as others are also looking into building similar, yet different scaling solutions and tackle the same challenges.\\n\\nWe are also making progress on making Hydra and Mithril less IOG-driven, but more community-owned through working groups and Intersect. We are excited to see how this will turn out.\\n\\n[slides]: https://docs.google.com/presentation/d/1ByOgQt6gEjOY9Wd-xOMzeSy4lfQmMn39KEtSB-VisVw/edit#slide=id.g21194f9c145_0_5\\n[recording]: https://drive.google.com/file/d/1Y_xa9JjQ62m98m5MC27NDbsSjVjspnsA/view"},{"id":"2024-04","metadata":{"permalink":"/monthly/2024-04","editUrl":"https://github.com/cardano-scaling/website/tree/master/monthly/2024-04-monthly.md","source":"@site/monthly/2024-04-monthly.md","title":"April 2024","description":"This is a monthly report of progress on \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects since March 2024. This document serves as a preparation for and a written summary of the monthly stakeholder review meeting, which is announced on our Discord channels and held on Google Meet. This month, the meeting was held on 2024-04-30, using these slides and you can see the recording here.","date":"2024-05-02T17:44:44.000Z","formattedDate":"May 2, 2024","tags":[{"label":"monthly","permalink":"/monthly/tags/monthly"}],"readingTime":12.695,"hasTruncateMarker":false,"authors":[{"name":"Sebastian Nagel","title":"Software Engineering Lead, IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"},{"name":"Pi Lanningham","title":"Chief Technology Officer, Sundae Labs","url":"https://github.com/quantumplation","imageURL":"https://github.com/quantumplation.png","key":"quantumplation"},{"name":"Sebastian Bode","title":"Director of Engineering, Cardano Foundation","url":"https://github.com/cleanerm5","imageURL":"https://github.com/cleanerm5.png","key":"cleanerm5"},{"name":"Jean-Philippe Raynaud","title":"Software Engineering Lead, IOG","url":"https://github.com/jpraynaud","imageURL":"https://github.com/jpraynaud.png","key":"jpraynaud"},{"name":"Franco Testagrossa","title":"Senior Software Engineer, IOG","url":"https://github.com/ffakenz","imageURL":"https://github.com/ffakenz.png","key":"ffakenz"}],"frontMatter":{"title":"April 2024","slug":"2024-04","authors":["ch1bo","quantumplation","cleanerm5","jpraynaud","ffakenz"],"tags":["monthly"]},"unlisted":false,"prevItem":{"title":"May 2024","permalink":"/monthly/2024-05"},"nextItem":{"title":"March 2024","permalink":"/monthly/2024-03"}},"content":"This is a monthly report of progress on \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects since March 2024. This document serves as a preparation for and a written summary of the monthly stakeholder review meeting, which is announced on our Discord channels and held on Google Meet. This month, the meeting was held on 2024-04-30, using these [slides][slides] and [you can see the recording here][recording].\\n\\n## Logo design work\\n\\nDuring the months of March and April, we focused on refreshing the logos of Hydra and Mithril. We also created a separate logo for the shared workstream aimed at scaling Cardano. It\'s crucial to have a logo for this workstream as it will help bring various projects together to enhance the scalability of Cardano.\\n\\n![](img/2024-04-logo-drafts.png)<small><center>Latest logo drafts for Hydra, Mithril and Cardano Scaling work group</center></small>\\n\\nAbove, you can see the latest logo drafts created by our designer, Alexander Wende. Let us know your thoughts through any of our communication channels like Discord or Twitter. \\n\\n## Mithril\\n\\n[Issues and pull requests closed in\\nApril](https://github.com/input-output-hk/mithril/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2024-03-31..2024-04-30)\\n\\nAs a part of our strategy to increase the participation in the Mithril protocol we have been reaching out to SPO\'s who don\'t yet run a Mithril signer, providing them with the support they need to set up and run their signer. We appreciate the SPO\'s such as Cardano Foundation who took the step in joining the protocol. As of epoch 481, the number of stake pools registered in the Mithril protocol as signers has reached 258. This represents approximately 5 billion ADA, which is approximately 22% of Cardano\'s active stake.\\n\\n![](img/2024-04-mithril-participation.png)\\n\\n\\nWe have prepared the pre-release of the new Mithril distribution [`2418.1-pre`](https://github.com/input-output-hk/mithril/releases/tag/2418.1-pre). This release includes several critical updates and enhancements:\\n- A **breaking change** is introduced in **Mithril client / Mithril client CLI**:\\n  - The certificate chain structure has been modified to remove coupling with immutable file number.\\n  - The client **must be updated** to verify certificate chain.\\n- We have switched the **memory allocator** to `jemallocator` on the signer and the aggregator to avoid memory fragmentation.\\n- We have enabled the BLST `portable` feature by default in order to benefit from **runtime check** of intel ADX instruction set.\\n\\n### Signer registration decentralization PoC\\n\\nWe have kept working on the decentralization experiments for Mithril networks. The **signature diffusion** decentralization has already been implemented in a previous proof-of-concept, and we have created a new proof-of-concept for decentralizing the **signer registration process**. \\n\\nIn order to do so, we have created a new **peer-to-peer pubsub topic** using `libp2p` and adapted the **relay** so that:\\n- When a **signer relay** receives a signer registration from a signer, it broadcasts it to the new P2P topic.\\n- When an **aggregator relay** receives a new signer registration from the P2P topic, it calls back the aggregator with it.\\n- A **repeater mechanism** has been implemented so that a **signer relay** sends the signer registration multiple times during an epoch (at regular pace) to prevent missed messages.\\n\\n![](img/2024-04-mithril-p2p-signer-registration-poc.jpg)\\n\\nWe don\'t need strong guarantees or consensus for the diffusion of signatures: different aggregators can create valid multi-signatures from different subsets of individual signatures as long as the quorum is reached. We could also implement the repeater mechanism so that a signature is broadcast a few times in order to prevent missed messages and reach more aggregators. \\n\\nHowever, we need stronger guarantees for the signer registration: in order to create a valid multi-signature a **minimum number** of signers and aggregators must use **exactly the same set of signer registrations** (enough signers and aggregators so that the individual signatures created allow to reach the quorum). In case of a partition, the network could get in a situation where the quorum is never reached during an epoch: this would lead to a gap in the certification and the security of the protocol could not be guaranteed. Adversarial behaviors from some signers could for example be responsible for such partitions. Moreover, with the current design, as the number of aggregators is much lower than the number of signers, the risk of partition could be even higher.\\n\\nThis will lead us to:\\n- Reach for a consensus or quasi-consensus for the signer registrations.\\n- Adapt the topology of the network so that there are approximately the same number of signers and aggregators (i.e. all signers are also aggregators) or modify the aggregation process so that aggregators don\'t verify the message that is certified.\\n\\nThe next steps for the decentralization of Mithril networks are:\\n- Draft a CIP for leveraging the Cardano network layer and implement mini-protocols that will operate the diffusion of messages in a pubsub topic.\\n- Draft a CPS for stating the problem about signer registration.\\n- Get some feedback from the community, feel free to contribute!\\n\\n## Hydra\\n\\n[Issues and pull requests closed in\\nApril](https://github.com/input-output-hk/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2024-03-31..2024-04-30)\\n\\nThis month, the [roadmap](https://github.com/orgs/input-output-hk/projects/21/views/7) received updates to reflect an upcoming `0.17.0` release, which will include several API updates and two notable features:\\n\\n- [Revise `POST /commit` endpoint interface #1350](https://github.com/input-output-hk/hydra/issues/1350) and\\n- [Use versioned handshake when connecting hydra-nodes #1010](https://github.com/input-output-hk/hydra/issues/1010)\\n\\nThe latter was distilled out of the much broader and long-standing [Hydra node software, scripts & protocol updates #191](https://github.com/input-output-hk/hydra/issues/191) as it was the last actionable piece of the included scenarios on how to handle change. Having this will make the `hydra-node` detect incompatible network protocols and improve robustness of the node implementation.\\n\\n![The roadmap with features and ideas](./img/2024-04-hydra-roadmap.jpg)\\n<small><center>The latest roadmap with features and ideas</center></small>\\n\\nBesides feature ideas which are to be discussed and refined in the upcoming weeks, our focus lies on the two major features of incremental commits and decommits are currently being worked on by the team.\\n\\n### Why are incremental commits hard?\\n\\nBoth, [Incremental decommit #1057](https://github.com/input-output-hk/hydra/issues/1057) and [Incremental commit #199](https://github.com/input-output-hk/hydra/issues/199) turned out to be non-trivial and are in progress still.\\n\\nWhile the plan is clear by now (see issue comments for a history), changes to the protocol are substantial and can be considered literally Hydra Head V2 (but any change to the scripts is a major change). Currently, the off-chain workflow is mostly implemented end-to-end, but the on-chain part is still in the works and requires a lot more testing.\\n\\nAs these features will allow to update the `Open` state on-chain, rollbacks and interleavings of so-called `increment`, `decrement` and the `close` transactions need to be considered. This is a complex problem that requires a lot of testing and validation to ensure that the protocol is secure and correct.\\n\\nIn particular, we need to be testing (ideally proving) that:\\n\\n - funds already committed / not yet decommitted are always returned (completeness)\\n - funds are never returned twice (soundness)\\n - the head can process transactions throughout (liveness)\\n\\nOur approach to testing is similar to when we implemented the basic protocol: end-to-end tests ensure overall integration, while property-based mutation tests ensure individual validators work correctly. This time, however, we are also looking at stateful property-based testing of _many_ sequences of transactions (see [this task](https://github.com/input-output-hk/hydra/issues/1390) and [this module](https://github.com/input-output-hk/hydra/blob/feature/incremental-decommit/hydra-node/test/Hydra/Chain/Direct/TxTraceSpec.hs) on the `feature/incremental-decommit` branch).\\n\\n### Hydra /commit endpoint enhancements\\n\\nWe are about to release a refactor on the `/commit` endpoint which provides greater control for drafting commit txs, allowing for adjustments to the transaction context, which is crucial for real-world scenarios involving transaction validity checks, required signers, etc.\\n\\nThis refactor changes the endpoint to now accept a \\"blueprint\\" tx, CBOR-encoded, along with the UTxO, JSON-encoded.\\nThe UTxO is used to resolve inputs spent in the transaction, and the \\"blueprint tx\\" serves as the foundation for creating the resulting drafted commit tx, retaining anything that complies with the requirements of a valid head commit transaction.\\n\\nThis enhancement was initiated following a discussion led by the MLabs team, as documented [here](https://github.com/input-output-hk/hydra/discussions/1337). The need arose to unblock a [sub-validator](https://github.com/mlabs-haskell/hydra-auction-onchain/blob/95fae061a4a50a635007a7e228443080f8141570/src/HydraAuctionOnchain/Validators/StandingBid.hs#L139-L157) utilized in the hydra-auction for checking spending conditions to move a standing bid to L2. The discussion was promptly converted into an [issue](https://github.com/input-output-hk/hydra/issues/1350) and subsequently added to our roadmap after internal grooming by the Hydra team.\\n\\nWhile this refactor represents a breaking change, the hydra-node can still be utilized as before if the provided UTxO is at a public key address. However, to spend from a script UTxO and unlock more complex use-cases, users must provide an additional unsigned transaction that accurately specifies required data, such as redeemers and validity ranges.\\n\\n## Cardano Buidler Fest\\n\\nThis month the who-is-who of Cardano builders got lured to Toulouse, France for a two-day tech-only conference. It was a great occasion to meet fellow contributors and build bridges (literally) to new projects and their creators.\\n\\nTwo of many notable presentations and how they relate to the Hydra and Mithril projects are detailed as contributed by Pi (Sundae Labs) and Sebastian (Cardano Foundation).\\n\\n### IBC bridge\\n\\nCardano Foundation has started to work on an implementation of the Inter Blockchain Communication protocol ([IBC](https://github.com/cosmos/ibc)) to allow builders to connect other blockchains to the Cardano network that also implement IBC like e.g. [Cosmos SDK](https://docs.cosmos.network/) or [Substrate](https://docs.substrate.io/) based blockchains. Whereas IBC has many similarities with other communication protocols like e.g. TCP and is based on the pretty straight forward delivery of data packets from one blockchain to the other by so called Relayers the general security model is based on the assumption that the consensus of both blockchains to be connected can be trusted. The latter resolves in the challenge that so called Light Clients need to be implemented that allow one network to check the validity of the consensus of the other, to verify if a specific operation like e.g. the locking of certain assets has been done as communicated via IBC. This typically implies that a blockchain network is able to generate so called state proofs that can be presented to the Light Client which then is able to perform the validation.\\n\\nUnfortunately, the Cardano blockchain does not generate such state proofs as the underlying architecture and Ouroboros consensus do not rely on such a primitive. This leads to the the challenge that implementing a Light Client purely based on available data from the consensus (e.g. block data) has several shortcomings with regards to security or if traded for it liveness of the client causing significant latency in the message delivery between both networks (as the Light Client would have to wait until a sequence of blocks is presented for validation), which is not a feasible option for a real world production deployment.\\n\\nHowever, there are other networks out there with a similar setup in that specific regard that recently claimed to have implemented IBC like e.g. [Solana](https://docs.picasso.network/technology/ibc/solana/). Their approach is based on overlay networks that take care of collecting additional signatures from network validators for state proof data (like blocks, transactions, etc.) increasing the trustworthiness of those proofs. Fortunately, there is a similar solution currently under development in the Cardano ecosystem, which is Mithril.\\n\\nThe Cardano Foundation Engineering team has recently concluded the first phase of the IBC implementation demonstrating the technical feasibility of connecting Cardano to a Cosmos SDK based blockchain taking the disadvantages mentioned above into account. The work has been made public in a repository that can be found here: https://github.com/cardano-foundation/cardano-ibc-incubator\\n\\nIn a second phase that is scheduled to run from April till roughly beginning of July the team is working on replacing the existing supposedly weak Light Client implementation of the Ouroboros consensus on the Cosmos based blockchain with a Light Client that leverages the functionalities of Mithril. As a first approach we are intending to use specifically a recently introduced method that allows to check if a specific transaction is part of the global set of transactions of the network.\\n\\n### Gummiworm\\n\\nGummiworm is a low-divergence fork of the Hydra node being built by Sundae Labs, which teases apart execution and custody; By sacrificing some control over the opening and closing of heads, it dramatically strengthens the security model specifically in the case when non-head participants are transacting in the head.\\n\\nAt Buidler-fest, we demo\'d a very early, duct-tape and bubble-gum demo of depositing into a smart contract, minting those funds in the hydra head, and achieving auditability of the transactions in the head.\\n\\nWe also spoke about our longer term plans, such as changes to the ledger to accommodate a better user experience, and making the custody model \\"plug and play\\", so you could provide different mechanisms for different use cases.\\n\\n![image](https://github.com/SundaeSwap-finance/cardano-scaling-website/assets/49870/0b2907e4-43f1-4e6d-8f54-f18eeb648b8b)\\n\\n## Starmap update\\n\\nEvery now and then, roughly quarterly, we like to take a step back from individual project roadmaps and think on an even higher level of what should be the priorities for the next couple months.\\n\\nThis time, the themes we would like to focus on are _open governance_, _use cases and adoption_, as well as _measure and visualize_. Across Hydra and Mithril we believe the following items, which ideally are backed by technical features on individual roadmaps, are suitable next steps:\\n\\n![](./img/2024-04-starmap.jpg)\\n\\nAs one can see from past quarters, opening up the governance of scalability projects is a recurring theme and of highest priority. Ironically, the proposed work items above were mostly shaped and prioritised in private discussions between IOI and PaloIT. We will need to open discussions of what is valuable to build, to gather feedback and ensure individual projects tie into a compelling and _fundable_ portfolio across the whole ecosystem.\\n\\nA first glimpse of this already happened at the Buidler Fest where a spontaneous (open space) session on \\"the future of Hydra and Mithril\\" spawned great interest and new ideas like\\n\\n- Shallow node would be interesting\\n- Once per epoch Mithril-signed ledger state\\n- BLS accumulators for Hydra partial fanout; also relevant for Mithril?\\n- The need for another audit of latest Hydra Head protocol\\n\\nAs also listed on the starmap, a logical next step is to create an open working group with interested experts from the Cardano community. A working group to discuss whether and how a Hydra Tail protocol should be built out? What it would entail (pun intended)? Built by whom? How would it relate to Gummiworm, Cosmex, Subbit, zkFold, ... which should maybe prioritised by the Cardano community instead?\\n\\n## Conclusion\\n\\nThe monthly review meeting for April 2024 was held on 2024-04-30 via Google Meet,\\npresenting these [slides][slides] and this [recording][recording].\\n\\nWhile we saw some demos on Mithril and Hydra projects\' progress, the real highlight this month was the Cardano Buidler Fest with its many great talks and discussions - often involving scalability limitations and technology to overcome it. Exciting discussions around zero knowledge primitives, infrastructure projects, and open source likely inspired everyone attending to keep building and improving Cardano.\\n\\nThere is still some uncertainty in how exactly governance of Hydra and Mithril can be made more open, collaborating on consistent high-level plans across multiple projects in the realm of improving Cardano scalability. However, we might have found with [cardano-scaling.org](https://cardano-scaling.org) a welcoming home not only for Hydra and Mithril, but for contributors and projects from various backgrounds, while first steps of involving the community more actively in a Hydra working group at Intersect are being made.\\n\\nBesides this, the monthly review meeting held some sneak peeks of a new paper on fresh scalability tech (Ouroboros Leios) and fun conversations on games and other great ways to potentially show off a definite Hydra V1 at Rare Evo this summer - \\"Can it run doom?\\" \ud83d\ude08.\\n\\n[slides]: https://docs.google.com/presentation/d/1GwABNDvdFFF7LlgIlycyLsQub0Btd9XvwpgEYPrGQ9I/edit#slide=id.g1f87a7454a5_0_1392\\n[recording]: https://drive.google.com/file/d/15wQ3hTWv9qDAxt7mjA1YXGKKutS-nG_k/view"},{"id":"2024-03","metadata":{"permalink":"/monthly/2024-03","editUrl":"https://github.com/cardano-scaling/website/tree/master/monthly/2024-03-monthly.md","source":"@site/monthly/2024-03-monthly.md","title":"March 2024","description":"This is a monthly report of progress on \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects since February 2024. These reports have recently moved to https://cardano-scaling.org/monthly (more details here).","date":"2024-03-28T07:21:14.000Z","formattedDate":"March 28, 2024","tags":[{"label":"monthly","permalink":"/monthly/tags/monthly"}],"readingTime":8.505,"hasTruncateMarker":false,"authors":[{"name":"Sebastian Nagel","title":"Software Engineering Lead, IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"},{"name":"Jean-Philippe Raynaud","title":"Software Engineering Lead, IOG","url":"https://github.com/jpraynaud","imageURL":"https://github.com/jpraynaud.png","key":"jpraynaud"}],"frontMatter":{"title":"March 2024","slug":"2024-03","authors":["ch1bo","jpraynaud"],"tags":["monthly"]},"unlisted":false,"prevItem":{"title":"April 2024","permalink":"/monthly/2024-04"},"nextItem":{"title":"February 2024","permalink":"/monthly/2024-02"}},"content":"This is a monthly report of progress on \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects since February 2024. These reports have recently moved to https://cardano-scaling.org/monthly (more details [here](/monthly/2024-02)).\\n\\nThis document serves as a preparation for and a written summary of the monthly stakeholder review meeting, which is announced on our Discord channels and held on Google Meet. This month, the meeting was held on 2024-03-27, using these [slides][slides] and [you can see the recording here][recording].\\n\\n## Mithril\\n\\n[Issues and pull requests closed in\\nMarch](https://github.com/input-output-hk/mithril/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2024-02-29..2024-03-31)\\n\\nThis month, there has been a noticeable increase in SPOs joining the Mithril protocol. In particular, many new multi-pool operators have set up the Mithril signer in their infrastructure. At the end of epoch **#475**, there were **230** pools registered with **4.6B\u20b3** stake involved representing approximately 20% of the total active stake. We will continue to provide regular updates to the community to encourage their participation in the protocol.\\n\\n![](img/2024-03-mithril-participation.png)\\n\\nWe have released the new Mithril distribution [`2412.0`](https://github.com/input-output-hk/mithril/releases/tag/2412.0). This release includes several critical updates and enhancements, such as support for Prometheus metrics endpoint in signer, deprecation of the `snapshot` command in the client CLI, full Pallas based implementation of the chain observer, and support for Cardano node version `8.9.0`.\\n \\n### Transaction signatures\\n\\nWe have developed a signing structure that enables quick proof generation while maintaining a light footprint on the signer for the `mainnet`. This is crucial as we need to handle a vast amount of transactions (100 million). To achieve this, we created a **block range Merkle tree**, which stores transactions in a Merkle tree and uses its root to create another Merkle tree. According to the our benchmark tests, a batch proof for `100` transactions can now be created in less than `250 ms`.\\n\\n![](img/2024-03-mithril-block-range-mktree.jpg)\\n\\nWe have also completed the roadmap of the MVP that will be released on `mainnet`:\\n\\n![](img/2024-03-mithril-cardano-tx-roadmap.png)\\n\\n### Transaction verification in frontend\\n\\nThe [Mithril client WASM library](https://www.npmjs.com/package/@mithril-dev/mithril-client-wasm) has been used to implement a Cardano transaction verifier inside the [Mithril explorer](https://mithril.network/explorer/?aggregator=https%3A%2F%2Faggregator.testing-sanchonet.api.mithril.network%2Faggregator).\\nThis feature is currently available only on the `testing-sanchonet` network and will be progressively rolled out to the other Mithril networks.\\nWallet and DApp developers could leverage the client WASM library to implement a security layer that verifies transactions provided by a third party.\\n\\n![](img/2024-03-mithril-explorer.png)\\n\\n### Prometheus metrics\\n\\nWe have released a new Prometheus endpoint with the latest stable version of the signer. The feature can be easily activated by the SPOs as explained in this [developer blog post](https://mithril.network/doc/dev-blog/2024/03/26/mithril-signer-prometheus-endpoint).\\n\\nAdditionally, we created a Grafana template to easily set up a dashboard for this Prometheus endpoint: https://grafana.com/grafana/dashboards/20776-mithril-signer/\\n\\n![](img/2024-03-mithril-prometheus-metrics.png)\\n\\n### Pallas updates\\n\\nThe latest stable distribution now includes a fully implemented chain observer powered by the [`pallas`](https://crates.io/crates/pallas) crate. Additionally, we have been collaborating with TxPipe to implement the `chainsync` mini-protocol with Pallas. This will significantly reduce the latency of signatures for Cardano transactions.\\n\\n### Deprecation warning\\n\\nWe have deprecated the `snapshot` command of the Mithril client CLI as explained in this [developer blog post](https://mithril.network/doc/dev-blog/2024/03/26/client-cli-deprecated-command).\\n\\nWe recommend using the replacement `cardano-db snapshot` command for users of the client CLI.\\n\\n## Hydra\\n\\n[Issues and pull requests closed in\\nMarch](https://github.com/input-output-hk/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2024-02-29..2024-03-31)\\n\\nHydra project\\n[roadmap](https://github.com/orgs/input-output-hk/projects/21/views/7) did not\\nchange much this month:\\n\\n![The roadmap with features and ideas](./img/2024-03-hydra-roadmap.jpg)\\n<small><center>The latest roadmap with features and ideas</center></small>\\n\\n### Notable updates\\n\\n* Evolved the user-requested [feature idea #1337](https://github.com/input-output-hk/hydra/discussions/1337) into a new feature on the roadmap to [revise POST /commit endpoint interface #1350](https://github.com/input-output-hk/hydra/issues/1350). This will allow committing into a head directly from advanced smart contracts. It remains unclear whether this will be part of the upcoming `0.16.0` release.\\n\\n* Captured the new feature idea of [Directly open heads #1329](https://github.com/input-output-hk/hydra/issues/1329) as item on the roadmap. This requires further grooming and could supersede other ideas like [Always abortable head #699](https://github.com/input-output-hk/hydra/issues/699).\\n\\n* Mostly completed [Drop support for JSON encoded transactions #1213](https://github.com/input-output-hk/hydra/issues/1213) and [Streaming plugins #1325](https://github.com/input-output-hk/hydra/issues/1325), which will be released soon as `0.16.0`.\\n\\n* Made substantial progress on [Incremental decommit #1057](https://github.com/input-output-hk/hydra/issues/1057), however, this is unlikely to be released as part of `0.16.0`.\\n\\n* Fully prepared [Switch L2 ledger to Conway #1178](https://github.com/input-output-hk/hydra/issues/1178), such that it can be released directly after the hard fork on the Cardano layer 1.\\n\\n* As we improve our understanding of pivotal features such as incremental commits and decommits, the feature set required to address [known issues and limitations] (https://hydra.family/head-protocol/docs/known-issues/) is being narrowed down, and the scope for a convincing version `1.0.0` is becoming clearer.\\n\\n### Conway support \\n\\nAs mentioned in previous roadmap updates, we separated work to support the upcoming Conway era on Cardano in two:\\n\\n  + [Conway support #1177](https://github.com/input-output-hk/hydra/issues/1177) will make the `hydra-node` support Conway and allow users to keep heads open across the hard fork.\\n  + [Drop Babbage support #1178](https://github.com/input-output-hk/hydra/issues/1178) will eventually drop support for the Babbage era and retain maintainability.\\n\\nWhile the former was already merged and is currently released in version `0.15.0` onwards, the team prepared the latter this month.\\n\\nIdeally switching the transaction format in the `hydra-node` is as simple as setting the type alias `type Era = Conway`. However, the code was `Babbage`-specific in several areas and work on this resulted in various pull requests making switching easier in several places: [#1326](https://github.com/input-output-hk/hydra/pull/1326), [#1327](https://github.com/input-output-hk/hydra/pull/1327), [#1328](https://github.com/input-output-hk/hydra/pull/1328), [#1334](https://github.com/input-output-hk/hydra/pull/1334), and [#1342](https://github.com/input-output-hk/hydra/pull/1342).\\n\\nThe result is a relatively simple switch in this [draft pull request](https://github.com/input-output-hk/hydra/pull/1338) and available on branch `lc/conway-support`, which we intend to bump and merge once the public Cardano networks hard fork.\\n\\nHaving full `Conway` era support, including `PlutusV3`, on the Hydra layer 2 already prepared on a branch allows early adopting users from the community to explore and use this already. Modulo-P has been on the forefront here by developing zero-knowledge hybrid DApps and wrapping the Hydra branch up in this [example repository](https://github.com/Modulo-P/hydra-node-plutusv3).\\n\\n:::info\\nA full-on `Conway` `hydra-node` can be used on `SanchoNet` already and the Hydra protocol scripts did not change from `master` / the upcoming `0.16.0`. However, note that the [Hydra explorer](http://explorer.hydra.family) shows such `Conway`-built heads only as `Initializing`. More details about why can be found in this [pull request](https://github.com/input-output-hk/hydra/pull/1373).\\n:::\\n\\n### Streaming plugins\\n\\nSundaeLabs is working on a Hydra-based layer two protocol (`gummiworm`) that requires the usage of `hydra-node` components in a different way than the default setup. As part of this development, SundaeLabs submitted a Fund10 Catalyst proposal to enhance the Hydra node by adding features that would facilitate not only their work but also the work of everyone building on Hydra.\\n\\nThey have been working on a plugin architecture to enable the infiltration and exfiltration of events, which enables hygienic forks of Hydra that feature additional connections to the outside world. They are interested in consuming the Hydra event stream via Amazon Kinesis and storing transaction archives on S3 for later reference.\\n\\nAfter an initial design phase resulting in [ADR29](https://hydra.family/head-protocol/adr/29/), they contributed the event source and sink abstractions, and refactored the Hydra node to use these new extension points together with core contributors. The `EventSource` and `EventSink` interfaces, along with the configurable list of `eventSinks` in the main `HydraNode` handle, allow to extend the `hydra-node` with any external system. It also paves the way for more scalable persistence methods on the mainline Hydra node, and might even allow refactoring the existing API server as an `EventSink`.\\n\\n## Community\\n\\n### Mithril office hours\\n\\nAs the Catalyst project of TxPipe on Mithril is completed, we want to build upon this initial maintenance work in a more open format. For this, we are transforming our alignment calls into a public weekly office hour where we invite the community to join and discuss concrete pull requests, issues and questions on Mithril. \\n\\n:point_right: Mithril office hours happen every Tuesday at 16:00 UTC on the [#mithril-live](https://discord.com/channels/826816523368005654/1146481948794032260) Discord channel.\\n\\n### Hydra governance walkthrough\\n\\nThis month, the Hydra team has been asked to provide a walkthrough of how we use GitHub to run and govern the project. We have prepared a video that explains how we use Github issues, pull requests, discussions, and projects to manage the development of the Hydra project. However, it is important to note that this information represents only a current view and we are enthusiastic about continuously improving the processes to make them more transparent. \\n\\n<center>\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/JGUeO7A6mMU?si=T5Dy4zuRb6NLReJE\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" referrerpolicy=\\"strict-origin-when-cross-origin\\" allowfullscreen></iframe>\\n</center>\\n<br/>\\n\\nWe are excited to announce that we are looking to establish a Hydra working group at Intersect. This group will aim to involve more community members in proposing feature backlogs, roadmaps, and RFPs. Initially, the focus of this working group will be on the concrete Hydra Head protocol (state channels). However, variations such as Hydrozoa, and combined scalability protocols like Gummiworm, Lightning-like payment channel networks, or the Hydra Tail protocol (~ rollups) will also require more community involvement. Stay tuned for more updates on this in the upcoming months.\\n\\n## Conclusion\\n\\nWe held the monthly review meeting for March 2024 on 2024-03-27 via Google Meet,\\npresenting these [slides][slides] and this [recording][recording].\\n\\nThis month we have made significant progress on Mithril transaction signatures, while the Hydra team has been busy working on the incremental commits/decommits features. Both projects are fully prepared for the upcoming Conway hard fork on Cardano and continuously demonstrate user experience improvements.\\n\\nBesides the Hydra explorer user interface, the teams also showcased the Mithril transaction verification feature in the Mithril explorer frontend. This demonstrates that Cardano transactions can be additionally verified using Mithril certificates from within a web browser. Taking this even further, we believe that such a \\"Verified with Mithril\\" checkmark can provide additional level of confirmation for users of light wallets and Cardano DApps!\\n\\nBesides these, Modulo-P showcased their early adoption of Hydra heads using `Conway` and `PlutusV3` for their quite involved zero-knowledge protocols. Briefly after the meeting they released a first look on their [zkMastermind DApp](https://zkmastermind.modulo-p.io/). Also, SundaeLabs presented their streaming plugins for Hydra. Both are examples of how the Hydra protocol can be extended and used in different ways, and we are excited to see more community contributions in the future. \\n\\nAs a closing remark, we see the trend of decentralizing governance on both projects, Hydra and Mithril, while at large the overall \'age of Voltaire\' is unfolding. Consequently, we anticipate moves, merges, or restructuring of repositories, projects, and working groups. What an exciting time to be a part of this big Cardano community!\\n\\n[slides]: https://docs.google.com/presentation/d/1pxV7VTDHW-wtvJy1RDuei7H14gQvgrrUlqoiOco6j9E\\n[recording]: https://drive.google.com/file/d/1SL5Js8wBIoBeb87exCmZTWtHSQy7xF1W/view"},{"id":"2024-02","metadata":{"permalink":"/monthly/2024-02","editUrl":"https://github.com/cardano-scaling/website/tree/master/monthly/2024-02-monthly.md","source":"@site/monthly/2024-02-monthly.md","title":"February 2024","description":"This is the first joint report of the \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects, which summarizes the teams\' progress since January 2024.","date":"2024-02-26T12:28:21.000Z","formattedDate":"February 26, 2024","tags":[{"label":"monthly","permalink":"/monthly/tags/monthly"}],"readingTime":7.3,"hasTruncateMarker":false,"authors":[{"name":"Sebastian Nagel","title":"Software Engineering Lead, IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"},{"name":"Jean-Philippe Raynaud","title":"Software Engineering Lead, IOG","url":"https://github.com/jpraynaud","imageURL":"https://github.com/jpraynaud.png","key":"jpraynaud"},{"name":"Sasha Bogicevic","title":"Senior Software Engineer, IOG","url":"https://github.com/v0d1ch","imageURL":"https://github.com/v0d1ch.png","key":"v0d1ch"}],"frontMatter":{"title":"February 2024","slug":"2024-02","authors":["ch1bo","jpraynaud","v0d1ch"],"tags":["monthly"]},"unlisted":false,"prevItem":{"title":"March 2024","permalink":"/monthly/2024-03"},"nextItem":{"title":"January 2024","permalink":"/monthly/2024-01"}},"content":"This is the first joint report of the \ud83d\udc32 Hydra and \ud83d\udee1 Mithril projects, which summarizes the teams\' progress since January 2024.\\n\\nPreviously, both teams had been releasing progress updates in different formats and intervals within their respective repositories:\\n\\n- Hydra [monthly reports](/monthly)\\n- Mithril [dev blog](https://mithril.network/doc/dev-blog/)\\n\\nBoth sites are created from the individual project repositories. However, it is not ideal to keep \'procedural\' documents as part of the code base, since it requires special handling when building versioned, published documentation. For example, [this workflow](https://github.com/input-output-hk/hydra/blob/fad12fd7d967e5e8af4d8b832396e68bd8510e9a/.github/workflows/publish-docs.yaml#L87-L92) in the Hydra project which publishes to https://hydra.family required several attempts to work around how Docusaurus websites are built. Consequently, we introduced a [dedicated repository](https://github.com/cardano-scaling/website) that builds into a [website](https://cardano-scaling.org). This not only helps keep the original product repositories clean of inherently dated information, but also serves as a new home for joint reports, announcements, or occasional articles.\\n\\nThis monthly report serves as preparation for the monthly stakeholder review meeting (see [slides][slides] and [recording][recording]). At the meeting, the teams update stakeholders on recent developments and gather feedback on proposed plans.\\n\\n## Mithril\\n\\n[Issues and pull requests closed in February](https://github.com/input-output-hk/mithril/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2024-01-31..2024-02-29)\\n\\n#### Release and publication\\n\\nThis month, the Mithril team [released distribution `2408.0`](https://github.com/input-output-hk/mithril/releases/tag/2408.0) and published two blog posts:\\n- [Mithril SanchoNet network released](https://mithril.network/doc/dev-blog/2024/02/08/testing-sanchonet-network-available).\\n- [Mithril client CLI output breaking change](https://mithril.network/doc/dev-blog/).\\n\\n### Signing Cardano transactions proof of concept\\n\\nThe team has been working on implementing a proof of concept of a new data type that will enable the certification of Cardano transactions within Mithril networks. Last month, the team extended the [Mithril client library](https://crates.io/crates/mithril-client) to support the certification of Cardano transactions. This month, the team have upgraded the [client CLI](https://mithril.network/doc/manual/developer-docs/nodes/mithril-client/) and introduced a new `cardano-transaction` command that can list snapshots and certify a list of Cardano transactions. Additionally, they have implemented the same API surface on the [WASM client](https://www.npmjs.com/package/@mithril-dev/mithril-client-wasm) that now supports transaction certification in the browser.\\n\\n![](img/2024-02-mithril-cardano-tx.png)\\n\\n### Enhanced support for Conway and SanchoNet\\n\\nThe team has conducted thorough testing on the upcoming Conway era and are confident that Mithril networks will transition smoothly to this new era. Additionally, the team have released a new [`testing-sanchonet`](https://mithril.network/explorer/?aggregator=https%3A%2F%2Faggregator.testing-sanchonet.api.mithril.network%2Faggregator) network that has been opened to SPOs to enable collaborative testing of the upcoming and experimental features (eg the aforementioned signature of the Cardano transactions).\\n\\n## Hydra\\n\\n[Issues and pull requests closed in February](https://github.com/input-output-hk/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2024-01-31..2024-02-29)\\n\\nThis month, the Hydra project [roadmap](https://github.com/orgs/input-output-hk/projects/21/views/7) underwent a few changes:\\n\\n![The roadmap with features and ideas](./img/2024-02-hydra-roadmap.jpg) <small><center>The latest roadmap with features and ideas</center></small>\\n\\n#### Notable updates\\n\\n* New: [Drop support for JSON encoded transactions #1213](https://github.com/input-output-hk/hydra/issues/1213) due to breaking changes when upgrading `cardano-node` and `cardano-ledger` versions.\\n* [Smoke tests on SanchoNet #1257](https://github.com/input-output-hk/hydra/issues/1257) took longer than expected, revealing issues, but seeing smoke tests run on SanchoNet makes the team confident the `hydra-node` is ready for the Conway hard fork\\n* [Build and deploy a Hydra heads explorer #696](https://github.com/input-output-hk/hydra/issues/696) is around 50% complete. Data is available for `sanchonet` at http://explorer.hydra.family/heads but a user interface is still needed.\\n* Started working on [Incremental commit #199](https://github.com/input-output-hk/hydra/issues/199) as the UX will be similar to [Incremental decommit #1057](https://github.com/input-output-hk/hydra/issues/1057). Implementing both features off-chain allows early adoption while improving on-chain security.\\n* Added the [Streaming plugins #1325](https://github.com/input-output-hk/hydra/issues/1325) feature to cover SundaeLab\'s work on their Catalyst proposal\\n\\n### Contest after fanout bug hunt\\n\\nWhile working on [hydra-chess](https://github.com/abailly-iohk/hydra-chess), the team encountered a [bug](https://github.com/input-output-hk/hydra/issues/1260) in the Hydra node. In the two-party Hydra Head, nobody was able to perform a `Fanout`. This happened because one of the nodes was in the initial `Snapshot` state and missed the request for a new `Snapshot`, while the other node already had one confirmed `Snapshot` locally. \\n\\nWhen the `Close` was posted, the Head was closed with the initial `Snapshot` and then contested by the node that saw a newer `Snapshot`. After the contest, the team observed a strange behavior where both nodes could not `Fanout`. We expected this failure in the node that only had the initial `Snapshot` since it did not have the correct `UTxO` locally to `Fanout`. However, the failure in the other node with the newer `Snapshot` should not have happened.\\n\\n![Fanout after contest bug sketching](./img/2024-02-fanout-after-contest.png)\\n\\nWhile reviewing the code, the team discovered that the `Contest` observation was not extending the deadline after the contestation was made. As a result, the `Fanout` transaction was invalid because the validator checks that the `Fanout` transaction\'s lower validity bound is higher than the deadline to contest. This check ensures that one can only fan out after the contestation period is over.\\n\\nBefore fixing this bug, the team tried reproducing it using the MBT (Model Based Tests) framework, one of the tools in the test suite. However, to do that, they needed to complete modeling the entire head lifecycle and the specific scenario they observed in real life and arbitrary actions in all head states did not reveal this bug.\\n\\nAfter also improving the framework itself to correctly validate transactions and a fix for simulating rollbacks, the team was able to fix the bug easily. However, it proves that being able to reproduce a bug is not only improving the code, but also allowed the team to gain knowledge and improve their test suites.\\n\\n### Hydra explorer supporting multiple versions\\n\\nThis month, the team deployed the `hydra-explorer` to serve data under http://explorer.hydra.family/heads. Alongside this, they upgraded the Hydra scripts and switched to the latest pre-release version of `cardano-node` for Conway, and the system is currently running on the `sanchonet` network.\\n\\n![](./img/2024-02-explorer.png)\\n\\nThe Hydra explorer currently has the capability to support only one version on a single network. The reason for this limitation is that the Hydra scripts are compiled into two binaries- `hydra-node` and `hydra-chain-observer` - and the observer is connected to a single `cardano-node` that operates as a client on one network.\\n\\nTo support multiple versions of the protocol [#1282](https://github.com/input-output-hk/hydra/issues/1282), the team needs to compile the scripts of each version into individual chain observer binaries. These binaries can then communicate with the `hydra-explorer` components through an API. While Plutus validators change with any modification (thus affecting their hashes and addresses), this API can serve as an integration point that the team can support through multiple versions of the protocol.\\n\\n## Community\\n\\nBoth projects saw community contributions this month:\\n\\n### TxPipe on Mithril\\n\\nThe TxPipe team has kept working on the implementation of the `Pallas Chain Observer` for Mithril nodes and has contributed to retrieving the stake distribution and Mithril era markers (stored in the UTxOs of the chain) directly from the Cardano node with mini-protocols.\\n\\n### Ikigai auctions on Hydra\\n\\nAs it also was briefly shown in the review meeting, Ikigai continued work on [Hydra for Auctions](/monthly/2023-06#hydra-for-auctions-contributions-and-closing-of-project) in their Catalyst-backed project. Their use case is about starting auctions on the Cardano mainnet, but then collecting bids off-chain and only committing the final result on-chain. This is a perfect use case for Hydra, as it allows for a large number of off-chain transactions to be processed in parallel and then committed to the blockchain in a single transaction.\\n\\n## Conclusion\\n\\nWe held the monthly review meeting for February 2024 on 2024-02-26 via Google Meet, presenting these [slides][slides] and this [recording][recording].\\n\\nThis month, both projects focused on preparing for Conway and the upcoming hard fork combinator event. Preparations for the hard fork made the `cardano-node` a moving target, but the teams believe that early integration is key. Unexpected issues popped up in both projects, but they were able to address them.\\n\\nNew feature development is progressing well, with Mithril\'s transaction signing now available to early adopters. This feature opens up the possibility of making `hydra-node`s more lightweight, as they won\'t need to rely on a single third party for trusted chain data. Instead, they can verify on the client (the Hydra node) using Mithril certificates. Additionally, Hydra\'s incremental decommit feature is in progress. While there\'s still significant work to be done on the on-chain parts, the teams have already implemented the off-chain workflow for incremental commits. Making both features available for users to try out will help validate the API changes. However, this cannot be released to mainnet without completing the required on-chain security work. During the review meeting, the teams sought feedback on a potential simplification of the Hydra on-chain protocol to have \'directly open\' heads. Any thoughts or feedback on this fresh [feature idea\\n#1329](https://github.com/input-output-hk/hydra/issues/1329) would be appreciated.\\n\\nIn general, if you read this far we would like to hear from you, dear reader, on any of our communication channels on Discord or a shout out on twitter. Maybe along with some feedback on the new, common website and the joint monthly report format? \ud83d\ude4f \\n\\nWe are looking forward to the next month and when it happens, the Conway hard-fork on the first public testnets (no date yet) when \ud83d\udee1 Mithril serving certificates and \ud83d\udc32 Hydra heads remaining open throughout.\\n\\n[slides]: https://docs.google.com/presentation/d/18buDs_TcMHgFAYjJt9GftQiEnVB3ubcoD3Djh3ovxSc/edit#slide=id.g1f87a7454a5_0_1392\\n[recording]: https://drive.google.com/file/d/1WZ03vcpfxgYhGw91-L3QXVfyNwhdaCBY/view"},{"id":"2024-01","metadata":{"permalink":"/monthly/2024-01","editUrl":"https://github.com/cardano-scaling/website/tree/master/monthly/2024-01-monthly.md","source":"@site/monthly/2024-01-monthly.md","title":"January 2024","description":"This report summarizes the work on Hydra since November 2023. It serves as","date":"2024-01-31T18:01:54.000Z","formattedDate":"January 31, 2024","tags":[{"label":"monthly","permalink":"/monthly/tags/monthly"}],"readingTime":4.835,"hasTruncateMarker":false,"authors":[{"name":"Sasha Bogicevic","title":"Senior Software Engineer, IOG","url":"https://github.com/v0d1ch","imageURL":"https://github.com/v0d1ch.png","key":"v0d1ch"},{"name":"Franco Testagrossa","title":"Senior Software Engineer, IOG","url":"https://github.com/ffakenz","imageURL":"https://github.com/ffakenz.png","key":"ffakenz"},{"name":"Daniel Firth","title":"Senior Software Engineer, IOG","url":"https://github.com/locallycompact","imageURL":"https://github.com/locallycompact.png","key":"locallycompact"},{"name":"Sebastian Nagel","title":"Software Engineering Lead, IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"}],"frontMatter":{"title":"January 2024","slug":"2024-01","authors":["v0d1ch","ffakenz","locallycompact","ch1bo"],"tags":["monthly"]},"unlisted":false,"prevItem":{"title":"February 2024","permalink":"/monthly/2024-02"},"nextItem":{"title":"November 2023","permalink":"/monthly/2023-11"}},"content":"This report summarizes the work on Hydra since November 2023. It serves as\\npreparation for the monthly review meeting (see [slides][slides] and\\n[recording][recording]), where the team updates project stakeholders on recent\\ndevelopments to gather their feedback on proposed plans.\\n\\n## Roadmap\\n\\nThe Hydra team restructured several items on the project [roadmap](https://github.com/orgs/input-output-hk/projects/21/views/7) this month.\\n\\n![The roadmap with features and ideas](./img/2024-01-roadmap.jpg) <small><center>The latest roadmap with features and ideas</center></small>\\n\\n#### Notable updates\\n\\n* Released version `0.15.0`, delivering offline mode and Conway support.\\n\\n* @SundaeLabs contributed a new feature, [offline mode #1254](https://github.com/input-output-hk/hydra/issues/1254), which is related to [this Catalyst project](https://milestones.projectcatalyst.io/projects/1000179).\\n\\n* Delivered [Conway support #1177](https://github.com/input-output-hk/hydra/issues/1177) preparing `hydra-node` for the upcoming Conway hard fork.\\n\\n* A new feature, indicating preparation for [running the latest version of Cardano nodes in P2P #1256](https://github.com/input-output-hk/hydra/issues/1256). This is necessary as IOG\'s non-P2P relay nodes are to be shut down in January 2024.\\n\\n* Similarly, a new feature - [running smoke tests in SanchoNet #1257](https://github.com/input-output-hk/hydra/issues/1257) - will serve as another proof point of being able to open/close heads in the new Conway era.\\n\\n* Groomed and started work on [building and deploying a Hydra heads explorer #696](https://github.com/input-output-hk/hydra/issues/696), see details below.\\n\\n* Renamed \'Drop Babbage support #1178\' to [Switch layer 2 ledger to Conway #1178](https://github.com/input-output-hk/hydra/issues/1178) to better capture its content.\\n\\n## Hydra development\\n\\n[Issues and pull requests closed since the last report](https://github.com/input-output-hk/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2023-11-30..2024-01-31).\\n\\nThis month, the team worked on the following:\\n\\n### API changes: dropping JSON Tx\\n\\nThe Hydra API now utilizes a TextEnvelope containing the upstream CBOR encoding from `cardano-api` for the `Tx` type and removes the JSON representation from the API [#1240](https://github.com/input-output-hk/hydra/pull/1240). This ensures that transaction types have a fixed canonical encoding that will not change between versions. As a result, consumers of the Hydra API will need to deserialize CBOR to inspect transactions.\\n\\nThis representation mirrors the TextEnvelope produced by the `cardano-cli`, with the addition of an `txId` field, which is guaranteed to match the transaction ID within the CBOR object.\\n\\n:::warning Breaking change\\n\\nWe do not plan to go through a deprecation cycle on this breaking change to the API. If you are affected and see a problem updating your Hydra client to use CBOR, please [open an issue](https://github.com/input-output-hk/hydra/issues/new) on GitHub.\\n\\n:::\\n\\n### Hydra Chess\\n\\nWe team began developing a game on Hydra, leveraging dogfooding to uncover suboptimal elements or stumble upon bugs requiring resolution. Hydra Chess exemplified this process, offering valuable lessons during DApp development.\\n\\n![](https://red-permanent-barnacle-730.mypinata.cloud/ipfs/bafybeicxcm4yuedetm45kn6xrzqsc4mn2aocmhqtt6wrwxz5lzfry722ra/hydra-chess.png)\\n\\nWhile refining the details, the team aims to improve the workflow of running `hydra-node` within a full peer-to-peer DApp framework. The objective is to ensure user-friendly accessibility while also providing an example for Hydra developers. You can access the source code [here](https://github.com/abailly-iohk/hydra-chess).\\n\\n### Hydra Explorer\\n\\nTo measure the progress and success of Hydra, we require tools that provide insights into its usage. For this, the team initiated work on [#696](https://github.com/input-output-hk/hydra/issues/696), enabling anyone to track Hydra heads throughout their entire life cycle and observe the growth of the Hydra ecosystem.\\n\\nIn this initial phase, the team has implemented a basic backend service [#1235](https://github.com/input-output-hk/hydra/pull/1235) that can track all heads on-chain within a devnet network. This service establishes a baseline and utilizes the `hydra-chain-observer` package, exposing a REST API for querying and retrieving information about all observed heads and their current states.\\n\\n## Community update\\n\\nTapTools recently published a summary of the project\'s progress over the last two months, which complements the updates provided above. Check it out [here](https://medium.com/tap-in-with-taptools/input-output-releases-hydra-update-97b6139d1c59)!\\n\\nBesides the contributed offline mode mentioned above, Sundae Labs is also implementing a streaming API as designed in [ADR29](https://hydra.family/head-protocol/adr/29/) in the course of [this Catalyst project](https://milestones.projectcatalyst.io/projects/1000180).\\n\\nAlso [funded through Catalyst](https://milestones.projectcatalyst.io/projects/1000092) is a continuation of the [Hydra auction](https://github.com/mlabs-haskell/hydra-auction) project by Ikigai and MLabs. The Hydra team has not yet re-engaged in a regular exchange, but they expect to support the project with features as needed as they kick off this work.\\n\\nAs also pointed out in the review session, some of the team members have been involved in organizing the first [Cardano Buidler Fest](https://buidl.2024.cardano.org/) - happening on April 23-24 in Toulouse, France. This event will be a prime chance to connect with the people building (on) Cardano and inspire new ways of collaboration. At the time of publishing, tickets are already sold out, but we hope to see many Cardano builders there!\\n\\n## Conclusion\\n\\nWe held the monthly review meeting for January 2024 on 2024-01-19 via Google Meet, presenting these [slides][slides] and this [recording][recording].\\n\\nThis month, the teams demonstrated various Hydra and Mithril features. Additionally, Juan Mag\xe1n and his team from Modulo-P showcased a compelling demo on utilizing zero-knowledge cryptography in a Hydra head for a mastermind game. This work is a Catalyst Fund 10 [accepted proposal](https://cardano.ideascale.com/c/idea/113249).\\n\\nBesides providing the usual status and roadmap updates on both Hydra and Mithril, several interested community members, including Tudor, joined the discussion to share their use case ideas. Tudor presented his proposal for supply chain tracking of Moldavian wine, which is currently running as a Catalyst proposal in Fund11. The proposal aims to leverage Hydra for CIP-68 NFT updates in a head, requiring wallet/app support. We also discussed a potential CIP to standardize asset access if held on layer 2 ledgers.\\n\\nCharles provided feedback on considering Cardano block extensions as a potential core protocol change, enabling various proof systems and new consensus algorithms to support partner chains. We further emphasized collaborative efforts with the community to explore and develop the user space, determining which aspects could evolve into marketplaces and what should be integrated into core protocols. Processes like CIPs play a vital role in standardizing and facilitating technology transfer from the \'user space\' to the \'kernel space\'.\\n\\nThese discussions will inform the team\'s roadmapping sessions for the year, focusing not only on building essential features for the Hydra Head protocol but also on experimenting with new approaches to enhance Cardano\'s efficiency and accessibility.\\n\\n[slides]: https://docs.google.com/presentation/d/113okna4iyhgC7ERDLVHxqQkvhqTUSWJUWjXfkpwIpEY\\n[recording]: https://drive.google.com/file/d/1XnM4RMKSiJNKLs2GBEg32ZHymg-fGBFt"},{"id":"2023-11","metadata":{"permalink":"/monthly/2023-11","editUrl":"https://github.com/cardano-scaling/website/tree/master/monthly/2023-11-monthly.md","source":"@site/monthly/2023-11-monthly.md","title":"November 2023","description":"This report summarizes the work on Hydra since October 2023. It serves as","date":"2023-12-04T12:50:55.000Z","formattedDate":"December 4, 2023","tags":[{"label":"monthly","permalink":"/monthly/tags/monthly"}],"readingTime":5.76,"hasTruncateMarker":false,"authors":[{"name":"Sebastian Nagel","title":"Software Engineering Lead, IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"},{"name":"Arnaud Bailly","title":"Lead Architect, IOG","url":"https://github.com/abailly-iohk","imageURL":"https://github.com/abailly-iohk.png","key":"abailly"}],"frontMatter":{"title":"November 2023","slug":"2023-11","authors":["ch1bo","abailly"],"tags":["monthly"]},"unlisted":false,"prevItem":{"title":"January 2024","permalink":"/monthly/2024-01"},"nextItem":{"title":"October 2023","permalink":"/monthly/2023-10"}},"content":"This report summarizes the work on Hydra since October 2023. It serves as\\npreparation for the monthly review meeting (see [slides][slides] and\\n[recording][recording]), where the team updates project stakeholders on recent\\ndevelopments to gather their feedback on proposed plans.\\n\\n## Roadmap\\n\\nThis month, several items were restructured on the project\\n[roadmap](https://github.com/orgs/input-output-hk/projects/21/views/7):\\n\\n![The roadmap with features and ideas](./img/2023-11-roadmap.jpg) <small><center>The latest roadmap with features and ideas</center></small>\\n\\n#### Notable updates\\n\\n- Release of version `0.14.0` is imminent as most of the [stateless chain\\n  observation #1096](https://github.com/input-output-hk/hydra/issues/1096)\\n  feature is done and only some internal refactoring missing.\\n\\n- The user-submitted feature idea on supporting extended keys,\\n  [#1141](https://github.com/input-output-hk/hydra/issues/1141), has\\n  been refined. The purpose of this item is now clear, and although\\n  it\'s not currently a priority, work on it can be started.\\n\\n- Two new items were created to improve the developer experience of the [Hydra build\\n  toolchain #1146](https://github.com/input-output-hk/hydra/issues/1146). Additionally, a\\n  follow-up on things learned by `hydra-poll` aims to create a full end-to-end\\n  example of a [two-player game in a Hydra head\\n  #1098](https://github.com/input-output-hk/hydra/issues/1098).\\n\\n- There was already an item about reacting to main chain parameter changes on the\\n  roadmap, which included not only protocol parameter updates, but also\\n  hard-fork events. With the upcoming hard fork into `Conway`, the team split off the\\n  changes needed to navigate the hard fork and clarified them:\\n\\n  + [Conway support #1177](https://github.com/input-output-hk/hydra/issues/1177) will make the `hydra-node` support Conway and allow users to keep heads open across the hard fork.\\n  + [Drop Babbage support #1178](https://github.com/input-output-hk/hydra/issues/1178) will eventually drop support for the Babbage era and retain maintainability.\\n  + The original item is only about [reacting to protocol parameter changes #195](https://github.com/input-output-hk/hydra/issues/195) now.\\n\\n- Substantial updates were made to the design of the next major feature [Incremental decommit #1057](https://github.com/input-output-hk/hydra/issues/1057), and work on it can be started.\\n\\n- In general, the team prepared several of these \ud83d\udcad idea items and many of them will turn into \ud83d\udcac features soon.\\n\\n## Hydra development\\n\\n[Issues and pull requests closed since the last\\nreport](https://github.com/input-output-hk/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2023-10-31..2023-11-30)\\n\\nThis month, the team worked on the following:\\n\\n### MeshJS + Hydra\\n\\nAt the beginning of month, the team attended the Cardano Summit in Dubai where they held\\nthe _Hydra MasterClass_ workshop. There they also presented the Hydra-Poll dApp\\nwhich is using MeshJS to build Hydra transactions on the frontend.\\n\\nThe Hydra team collaborated closely with the MeshJS team and as the outcome of this work\\nThe MeshJS team added some Hydra specific features to the MeshJS SDK. There is a nice low\\nlevel [API](https://meshjs.dev/apis/transaction/builderExample) for building\\ncustom transactions which is pretty similar to what `cardano-cli` does.\\n\\nNow you can use `isHydra` field which you can pass to this API which then uses\\nanother set of protocol parameters suitable for Hydra (eg. usually in Hydra we\\nwant to have zero transaction fees, reduce script execution units etc.).\\n\\nBig thanks to the MeshJS team on giving much needed support. They were\\npresenting these changes in the monthly review meeting so make sure to watch the\\n[recording](https://drive.google.com/file/d/1-iv8IveUzA2KrJV_Kqrgx4ts05Ow0zjM).\\n\\n### Rendering the Hydra specification\\n\\nBesides working on the design of incremental commits itself, the team also\\ntidied up the way the [Hydra protocol\\nspecification](https://hydra.family/head-protocol/core-concepts/specification)\\nis written.\\n\\nSo far, the specification was written in LaTex and rendered to a PDF. LaTeX was\\na good choice because of its expressiveness on math expressions, but not so\\ngreat a choice for pull requests and the entry barrier is quite\\nhigh. The majority of documentation around Hydra and Mithril is written using\\nMarkdown and rendered into a webpage using a static site generator, currently\\n[Docusaurus](https://docusaurus.io/). Most modern Markdown renderers do support\\nLaTeX-style math nowadays, even the normal [GitHub file\\npreview](https://docs.github.com/en/get-started/writing-on-github/working-with-advanced-formatting/writing-mathematical-expressions).\\n\\nHence, the team experimented with using the more standard Markdown format to write the\\nspecification, but still being able to use LaTeX math **and** LaTeX macros\\n(which are _still_ heavily used in the spec). The aim is to have both, a\\nPDF and HTML rendering.\\n\\n![](https://ipfs.io/ipfs/QmPUTYaSViLEyZcGmsTPL4jHdGSevH3yc3RD7TRhU3ivwH?filename=Peek%202023-11-28%2018-42.gif)\\n\\nWhile not yet finished, the GIF above shows the progress being made using\\n[pandoc](https://pandoc.org/) to resolve macros, producing a PDF via `xelatex`\\nand Docusaurus compatible markdown. Using powerful extensions of pandoc one can\\neven convert TikZ, GraphViz and Mermaid into both target formats.\\n\\n## Community update\\n\\nBeside the great work done by the MeshJS team towards supporting Hydra in the browser, here are some news and updates on community-led work streams related to Hydra:\\n\\n* SundaeLabs has made good progress on their [offline mode\\n  PR](https://github.com/input-output-hk/hydra/pull/1118) which should\\n  hit the main branch soon,\\n* TxPipe has been collaborating with IOG\'s creative engineering team\\n  to build _Cardaminal_, a command-line wallet, and demonstrated it\\n  during the monthly review meeting. Cardaminal is built in Rust,\\n  leveraging [Pallas](https://github.com/txpipe/pallas) libraries, and\\n  is aimed at being a fully-fledged scriptable wallet providing users\\n  with powerful stateful transaction edition capabilities, native\\n  assets management, chain synchronisation, etc.\\n\\n  The plan is to make Cardaminal compatible with Hydra - to be able to\\n  use it to interact with a head - and Mithril - using snapshots to\\n  synchronise the wallet.\\n\\n* The team behind [ZK Snarks in\\n  Hydra](https://projectcatalyst.io/funds/10/f10-development-and-infrastructure/a-zero-knowledge-proof-framework-for-cardano-based-on-hydra-and-zk-snarks)\\n  Catalyst proposal is making good progress and should be able to give\\n  a demo at the next monthly review meeting\\n\\n## Conclusion\\n\\nThe monthly review meeting for November 2023 was held on 2023-11-27 via Google\\nMeet with these [slides][slides] and the [recording][recording].\\n\\nThe Hydra team is thankful to have again had so many great demos from the numerous projects\\nin and around Hydra and Mithril projects - we should really schedule it to be one\\nhour planned duration. Also, if you have not watched it already, make sure to\\ncheck out the recording, the written report is merely expanding on a couple of\\ntopics but cannot render the cool demonstrations.\\n\\nAt first look, the demonstrated projects may appear not related - we even had a\\nminimal command-line wallet on the show after all. But as we went on, these\\nimpulses spark discussions and it becomes clear that all of these projects are\\nconnected.\\n\\nFor example, the terminal-based wallet \'Cardaminal\' as it was presented the\\nfirst time in public this month, could itself become a Mithril client for faster\\nsynchronizing or even light-mode using the recently published Rust client\\nlibrary for Mithril. Furthermore, such a minimal wallet would be a great testing\\nground for a Hydra-aware wallet. The MeshJS integration also has further\\npotential of Hydra specific `fetcher` and `submitter` providers.\\n\\nOn the other hand, we also stumbled over not-so-optimistic sentiment even in\\nmuch more mature scaling solutions like the Bitcoin Lightning Network. [This\\ntweet](https://twitter.com/udiWertheimer/status/1719122153155473492) summarizes\\nthat creating non-custodial [scalability/LN] solutions \'feel like the most\\nthankless thing in the world\'.\\n\\nIt is an exciting ride still, but events like this monthly review meeting with\\nits colorful demonstrations of small steps to improve the usability\\nand scalability of Cardano piece by piece with often unknown synergies is also\\nempowering. This month again made us feel not \'only a tribe\', but more a working\\ngroup across the Cardano community .. the Cardano Scaling group!?\\n\\n[slides]: https://docs.google.com/presentation/d/1JA_frlOXVrrBeaBGUnIq3U9cclrfU1A2cZR9B2AeVJg\\n[recording]: https://drive.google.com/file/d/1-iv8IveUzA2KrJV_Kqrgx4ts05Ow0zjM"},{"id":"2023-10","metadata":{"permalink":"/monthly/2023-10","editUrl":"https://github.com/cardano-scaling/website/tree/master/monthly/2023-10-monthly.md","source":"@site/monthly/2023-10-monthly.md","title":"October 2023","description":"This report summarizes the work on Hydra since September 2023. It serves as","date":"2023-11-06T13:44:16.000Z","formattedDate":"November 6, 2023","tags":[{"label":"monthly","permalink":"/monthly/tags/monthly"}],"readingTime":6.535,"hasTruncateMarker":false,"authors":[{"name":"Arnaud Bailly","title":"Lead Architect, IOG","url":"https://github.com/abailly-iohk","imageURL":"https://github.com/abailly-iohk.png","key":"abailly"},{"name":"Sebastian Nagel","title":"Software Engineering Lead, IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"}],"frontMatter":{"title":"October 2023","slug":"2023-10","authors":["abailly","ch1bo"],"tags":["monthly"]},"unlisted":false,"prevItem":{"title":"November 2023","permalink":"/monthly/2023-11"},"nextItem":{"title":"September 2023","permalink":"/monthly/2023-09"}},"content":"This report summarizes the work on Hydra since September 2023. It serves as\\npreparation for the monthly review meeting (see [slides][slides] and\\n[recording][recording]), where the team updates project stakeholders on recent\\ndevelopments to gather their feedback on proposed plans.\\n\\n## Roadmap\\n\\nThis month, the team released version 0.13.0, and updated the project\\n[roadmap](https://github.com/orgs/input-output-hk/projects/21/views/7) to include\\nthe next planned version 0.14.0:\\n\\n![The roadmap with features and ideas](./img/2023-10-roadmap.jpg) <small><center>The latest roadmap with features and ideas</center></small>\\n\\n#### Release 0.13.0\\n\\n- Implemented security fixes to Hydra on-chain scripts, all of which are only exploitable by other head participants (not any attacker)\\n\\n- Added support for (externally) committing inline datums\\n\\n- Improved stability by querying the `cardano-node` at the tip\\n\\n- Improved state persistence\\n\\n- See [full release notes](https://github.com/input-output-hk/hydra/releases/tag/0.13.0) and a list of [delivered features](https://github.com/input-output-hk/hydra/milestone/13?closed=1).\\n\\n#### Notable updates\\n\\n- Moved the [network resilience\\n  #188](https://github.com/input-output-hk/hydra/issues/188) issue out of version 0.13.0 to\\n  allow for a quick release of the security fixes. This feature has been split\\n  in two parts, both of which are completed and will soon be included in the 0.14.0 release.\\n\\n- A new user submitted a feature idea about supporting extended keys [#1141](https://github.com/input-output-hk/hydra/issues/1141). Initially\\n  urgent, it\'s no longer a priority and requires further clarification.\\n\\n- Although not part of Hydra version 0.14.0, the team completed the integration of [Hydra\\n  support in Kupo #1078](https://github.com/input-output-hk/hydra/issues/1078),\\n  which can already be used with Kupo version\\n  [2.7.0](https://github.com/CardanoSolutions/kupo/releases/tag/v2.7)\\n\\n- Implemented a new [Hydra Poll DApp](https://github.com/input-output-hk/hydra/issues/1110)\\n  feature, which is an example to be demonstrated at the Cardano Summit 2023.\\n\\n- Realized [stateless chain observation\\n  #1096](https://github.com/input-output-hk/hydra/issues/1096) as a dedicated\\n  feature, which will add a `hydra-chain-observer` tool and simplify upcoming\\n  feature implementation related to layer 1 transactions.\\n\\n- Created a feature idea item to [migrate all validators to Aiken\\n  #1092](https://github.com/input-output-hk/hydra/issues/1092). This was moved\\n  to 1.0.0 though, as it would require a complete re-audit of the scripts and\\n  and there is no urgent requirement for performance improvements at this stage.\\n\\n## Hydra development\\n\\n[Issues and pull requests closed since the last\\nreport](https://github.com/input-output-hk/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2023-09-30..2023-10-31)\\n\\nThis month, the team worked on the following:\\n\\n#### Network resilience to node crash\\n\\nLast month, the team worked on making the Hydra network resilient to\\ntransient network connectivity failure (see\\n[#188](https://github.com/input-output-hk/hydra/issues/188)). However, this\\nwas just one aspect of the larger effort to improve the overall stability and\\nreliability of the network. By completing\\n[#1079](https://github.com/input-output-hk/hydra/issues/1079), the team also\\nmade the network resilient to arbitrary node failures, which is a much\\nmore likely event to happen should the network run for a significant\\namount of time.\\n\\nHydra nodes now persist the network messages they _send_ to peers and\\ntogether with the already present acknowledgment mechanism, this means\\na node recovering from a crash can resend messages which were not\\nreceived by their peers.\\n\\n#### Hydra Poll DApp\\n\\nAs the Hydra team seeks to adhere more to the principles of\\n[dogfooding](https://en.wikipedia.org/wiki/Eating_your_own_dog_food),\\nwe wanted to upgrade our basic Hydraw application to something more\\ninteractive. We, therefore, built a [poll\\nDApp](https://github.com/input-output-hk/hydra/issues/1110) with the\\ngoal of demonstrating how one can build an application living entirely\\nin the frontend that can interact directly with a hydra-node, using\\nits websockets-based API. This application was also showcased at the\\n[Cardano Summit 2023](https://summit.cardano.org/), where the Hydra\\nteam delivered a masterclass.\\n\\n#### Upgrade to GHC 9.6 & Brick 1.10\\n\\nThis month, we were able to update our compiler toolchain from GHC 9.2.8 to\\n9.6.3. This also required us to upgrade the hydra-tui from Brick 0.73 to 1.10\\nto stay compatible with the new version of the mtl.\\n\\nThe update to Brick necessitated a complete rewrite of the hydra-tui which\\ngreatly simplifies the application logic, using Brick\'s new elm architecture\\nstyle combined with microlens-mtl.\\n\\n## Community update\\n\\nThis month, the monthly review meeting was almost completely covered by\\ndemonstrations from the various teams working on and with Hydra. Don\'t miss out\\non the demonstrations of the various community contributions and make sure to\\nalso view the [recording][].\\n\\n### Hypix\\n\\nHypix is a continuation of the \'Hydraw\' demonstration the team used throughout\\ndevelopment. The project is spear-headed by Trym Bruset and will integrate CIP-68\\nNFTs with instant transaction processing in a Hydra head to realize\\ncollaboratively created art pieces. The project is progressing great with an\\nopen beta available soon.\\n\\n![Hypix user interface](./img/2023-10-hypix.png) <small><center>The Hypix user interface</center></small>\\n\\n### Kupo x Hydra\\n\\nIndexers of chain data, like [Kupo](https://github.com/CardanoSolutions/kupo),\\nare useful to enable lightweight decentralized applications like Hypix. As the\\napplication state of Hypix, for example, is not only on the Cardano layer 1, but\\nalso in the Hydra head, Kupo was enhanced to run \'in front of\' a `hydra-node` and\\nprovide the same API for UTXOs indexed from a Hydra head. This was a [joint\\neffort](https://github.com/CardanoSolutions/kupo/pull/117) between\\n[@KtorZ](https://github.com/KtorZ), [@v0d1ch](https://github.com/v0d1ch) and\\n[@ch1bo](https://github.com/ch1bo) and has been [released in version 2.7 of\\nKupo](https://github.com/CardanoSolutions/kupo/releases/tag/v2.7).\\n\\n![Kupo indexing data](./img/2023-10-kupo.gif) <small><center>Kupo indexing a Hydra head</center></small>\\n\\n### Offline-mode Hydra node\\n\\n[Ledger-only\\nmode](https://projectcatalyst.io/funds/10/f10-development-and-infrastructure/sundae-labs-hydra-ledger-only-mode)\\nfor Hydra was one of the Catalyst Fund10 projects that got funded and\\nwork is underway to make it an integral part of Hydra software\\ncomponents. A [new\\nADR](https://hydra.family/head-protocol/unstable/adr/28.%20Offline%20mode)\\nhas been proposed which details the rationale behind this new feature\\nand an overview of what it brings and what impacts it will have on the\\nhydra-node.\\n\\nMoreover, this implementation is\\n[underway](https://github.com/input-output-hk/hydra/pull/1118) and\\nshould be part of the next release. This will enable running a single\\nhydra-node as a kind of \'ledger-as-a-service\', priming it with some\\nUTXOs and allowing clients to submit and validate transactions without\\nany relationship to layer 1.\\n\\n### Voting on Hydra\\n\\nThe\\n[Hydra-for-voting](https://github.com/cardano-foundation/hydra-voting-poc)\\nproject has been started earlier this year as a proof-of-concept to\\nexplore how a Hydra Head could help improve the voting or rather\\ntallying process for Catalyst and other large-scale on-chain\\ndecision-making process. It\'s been on pause for a few months due to\\nother priorities but it\'s been revived recently and put to use to\\ntally votes for the Cardano Summit\'s awards recipients.\\n\\nThis development effort led to a couple of new features and fixes:\\n* The ability to [submit\\n  a transaction](https://github.com/input-output-hk/hydra/issues/1111)\\n  for layer 1 using \'standard\' CBOR-hex format\\n* Upgrade to the checked-in [protocol\\n  parameters](https://github.com/input-output-hk/hydra/issues/1117)\\n  used by demo network which were out of sync with the internal ledger\\n  version\\n* Discussion on the usage of [extended payment\\n  keys](https://github.com/input-output-hk/hydra/issues/1141) in\\n  in relation to the Hydra Head protocol\\n\\n![Hydra voting UI](./img/hydra-voting.png) <small><center>Hydra Tallying UI</center></small>\\n\\n### ZK Snarks on Hydra\\n\\nThe team has initiated discussions with another funded Catalyst Fund10\\nproject, exploring the implementation of a [zero-knowledge proof system](https://projectcatalyst.io/funds/10/f10-development-and-infrastructure/a-zero-knowledge-proof-framework-for-cardano-based-on-hydra-and-zk-snarks)\\nfor Cardano, utilizing Hydra and ZK Snarks. At this early stage, there\\nis minimal progress to display, but the team is eager to start the\\ndevelopment of this promising tool.\\n\\n## Conclusion\\n\\nThe monthly review meeting for October 2023 was held on 2023-10-30 via Google\\nMeet with these [slides][slides] and the [recording][recording].\\n\\nAs mentioned above, the meeting was about 45 minutes of demonstrations - which\\nclearly shows that we are in the wake of Catalyst Fund10 where several project\\nproposals involving Hydra and Mithril got funded and at the same time everyone\\nwas preparing for the Cardano Summit 2023.\\n\\nWith this many community contributions and projects moving forward, there was\\nnot much time to discuss the Hydra roadmap or go into details about Mithril\\nproject status. This is great!\\n\\nBesides, the project roadmaps seem to be well aligned where our next features\\nin-line are most anticipated (incremental de-/commits) and the adoption of Mithril\\nis showing a healthy level with clear next steps and features ahead.\\n\\nIt is getting increasingly hard to keep track of all the new developments around\\nHydra. However, that is also often not needed and the Cardano builders just set\\noff and [build\\nthings](https://twitter.com/AltiMario/status/1711738372320825827?s=20) using\\nHydra these days.\\n\\nNovember will start with the Cardano Summit, likely yielding even more feedback\\nand feature ideas from users. Following this, there will be several productive weeks\\nfocused on feature development before the usual Christmas and New Year breaks across the teams.\\n\\n[slides]: https://docs.google.com/presentation/d/1pJMRp0YsszJenUvDmknm3wq9yyUE1CDRSYijjILrkHo\\n[recording]: https://drive.google.com/file/d/1U4yZhliGykxF3BddAAXb4RD417UvsQWB"},{"id":"2023-09","metadata":{"permalink":"/monthly/2023-09","editUrl":"https://github.com/cardano-scaling/website/tree/master/monthly/2023-09-monthly.md","source":"@site/monthly/2023-09-monthly.md","title":"September 2023","description":"This report summarizes the work on Hydra since August 2023. It serves as","date":"2023-09-29T07:35:24.000Z","formattedDate":"September 29, 2023","tags":[{"label":"monthly","permalink":"/monthly/tags/monthly"}],"readingTime":8.77,"hasTruncateMarker":false,"authors":[{"name":"Sebastian Nagel","title":"Software Engineering Lead, IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"}],"frontMatter":{"title":"September 2023","slug":"2023-09","authors":["ch1bo"],"tags":["monthly"]},"unlisted":false,"prevItem":{"title":"October 2023","permalink":"/monthly/2023-10"},"nextItem":{"title":"August 2023","permalink":"/monthly/2023-08"}},"content":"This report summarizes the work on Hydra since August 2023. It serves as\\npreparation for the monthly review meeting (see [slides][slides] and\\n[recording][recording]), where the team updates project stakeholders on recent\\ndevelopments to gather their feedback on proposed plans.\\n\\n## Roadmap\\n\\nThis month, the\\n[roadmap](https://github.com/orgs/input-output-hk/projects/21/views/7) has not\\nchanged much as the team mostly clarified upcoming features.\\n\\n![The roadmap with features and ideas](./img/2023-09-roadmap.png) <small><center>The latest roadmap with features and ideas</center></small>\\n\\n#### Notable updates\\n\\n* Added and completed [support for inline datums in commit API #1043](https://github.com/input-output-hk/hydra/issues/1043), which was reported by a user.\\n\\n* Current work on [network resilience #188](https://github.com/input-output-hk/hydra/issues/188) yielded two new / follow-up items [#1079](https://github.com/input-output-hk/hydra/issues/1079) and [#1080](https://github.com/input-output-hk/hydra/issues/1080). To minimize the \'scope creep\' from this topic, the team has narrowed down the direct goal to improve the situation incrementally.\\n\\n* When detailing the design of incremental de-/commits, the feature was also split in two. Each of the features would have a different impact on the user experience and relates to other ideas:\\n\\n  * [Incremental commit #199](https://github.com/input-output-hk/hydra/issues/199) is a bit more complicated, but paves the way for directly open heads and could make [Always abortable head #699](https://github.com/input-output-hk/hydra/issues/699) redundant.\\n\\n  * [Incremental decommit #1057](https://github.com/input-output-hk/hydra/issues/1057) is fairly straightforward and can be evolved into \'partial fanouts\', which solves similar problems as the [split-fanout #190](https://github.com/input-output-hk/hydra/issues/190) and [only signing closable snapshots #370](https://github.com/input-output-hk/hydra/issues/370) would address. Also, the [optimistic head closure #198](https://github.com/input-output-hk/hydra/issues/198) feature is closely related to this item.\\n\\n* Added a new feature to improve user journey of running the `hydra-node` by [removing the command line defaults #1064](https://github.com/input-output-hk/hydra/issues/1064). This came out of prior [idea discussion #454](https://github.com/input-output-hk/hydra/discussions/454) which highlights the life cycle of ideas and features on the Hydra project.\\n\\n## Cardano Scaling workshop in Nantes, France\\n\\nFrom 2023-09-12 to 2023-09-14, most of the _Scaling Tribe_ members, that is the two Hydra and Mithril teams, met for a three-day workshop in the beautiful French city of [Nantes](https://en.wikipedia.org/wiki/Nantes). This workshop was run following the [Open Space](https://openspaceworld.org/wp2/) technique which makes room for every participant to experiment and focus on what\'s of interest for them at the time while being engaging for the whole team. Here is a selection of topics covered that were most relevant to Hydra.\\n\\n### Aiken validator experiment\\n\\nAs part of the workshop, we explored how hard it would be to implement one of\\nthe Hydra validators in `aiken`. After roughly two hours of work we had a\\n`hydra-node` running, tests passing and benchmarks of verifying one step in the\\nHydra protocol using aiken.\\n\\nThe `hydra-node` just uses the UPLC binary and its hash to construct\\ntransactions, we could rely on the same interface, with the difference that the\\nscript binary gets produced by `aiken`. Aiken does produce a socalled blueprint\\n`plutus.json` containing the contract. We staged that file into git and embedded\\nit into a Haskell interface to be able to reference the compiled script as\\n`SerialisedScript` from `hydra-node`.\\n\\nNext, we ported the simplest contract we have, namely the\\n[Commit](https://github.com/input-output-hk/hydra/blob/ec6c7a2ab651462228475d0b34264e9a182c22bb/hydra-plutus/src/Hydra/Contract/Commit.hs)\\nvalidator, [to\\nAiken](https://github.com/input-output-hk/hydra/blob/4ec572511fc13a526b85efce3aac556ae5bd007c/hydra-plutus/validators/commit.ak).\\nThis was fairly straight-forward and we test were passing after some fiddling\\nwith internal representations of data structures (`plutus-tx` is encoding triples\\nas `Constr` data on-chain).\\n\\nThe results? A significant reduction in script size, cpu and memory usage on\\n`collect` and `abort` transactions - or in different words, [doubling the\\nsupported](https://github.com/input-output-hk/hydra/pull/1072#issuecomment-1717644108)\\nnumber of parties in a Head. \ud83c\udf89\\n\\n### Shallow cardano-node experiment\\n\\nRunning a hydra-node requires running a cardano-node, and running a\\ncardano-node requires synchronisation with the chain and about 150\\ngigabytes of data to be downloaded and verified, which is a\\nsignificant barrier to quickly spin-up hydra-node and Hydra\\nHeads. Given a Hydra node does not need to look at the history of the\\nchain, a _Shallow_ cardano-node that can run without the full database\\nof immutable files would be fine, assuming we can retrieve a recent\\nstate of the chain with the same security guarantees than a fully\\nsynchronised chain. This is exactly what Mithril can provide!\\n\\nWe ran a small experiment, trying to start a cardano-node manually\\nremoving all but the last files from the _immutable DB_ and it worked\\nas long as one does not query the node for a block too old in the\\npast. This lead us to envision an improved user experience for\\ninstalling and running a hydra-node, by packaging it with a\\ncardano-node and a mithril-client to retrieve only the minimum needed\\nstate and be able to start a fully functioning hydra-node in minutes.\\n\\n### Other topics\\n\\n* We continued working on [Kupo x\\n  Hydra](https://github.com/input-output-hk/hydra/issues/1078)\\n  integration, benefiting from the presence of Kupo\'s creator and\\n  former Hydra team member, Matthias Benkort\\n* We brainstormed possible synergies between the Hydra and Mithril\\n  projects, something that solidified into the desire to explore this\\n  concept of \\"Shallow node\\" and its integration within Hydra\\n* We discussed and clarified our new [Security Vulnerability\\n  Disclosure\\n  Policy](https://github.com/input-output-hk/hydra/pull/1088)\\n* Discussing the idea of a joint documentation effort, we realised the\\n  existing documentation of both teams could be improved, for example\\n  by following a [Standard documentation\\n  framework](https://documentation.divio.com).\\n\\n## Hydra development\\n\\n[Issues and pull requests closed since the last\\nreport](https://github.com/input-output-hk/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2023-08-29..2023-09-29)\\n\\nThis month, the team worked on the following:\\n\\n#### Network resilience to disconnects [#188](https://github.com/input-output-hk/hydra/issues/188)\\n\\nIf a Hydra node crashes, it can recover its state from disk thanks to the\\n[event-sourced persistency](https://github.com/input-output-hk/hydra/pull/1000)\\nmechanism in place. But if a peer inside the head sends messages while the node\\nis down, these messages are lost for this node and this can well lead to the\\nhead being stuck.\\n\\nFor instance, in the following picture, we see that if Bob was down when Alice\\nacknowledged snapshot 10, then it will wait forever for this acknowledgement and\\nwill refuse to move forward with the head, making it stuck.\\n\\n![Head stuck because of lost message](./img/2023-09-head-stuck.png) <small><center>Head stuck because of lost message</center></small>\\n\\nHydra is designed to deal with non-cooperative peers in a very safe way:\\nclose the head! And this situation could be generalized as a non cooperative\\npeer situation. So the safe move is to just close the head.\\n\\nBut practically speaking, closing the head every time a node restarts or a network\\nconnection is interrupted can lead to an operations nightmare. So the question we\'re\\nexploring is, can we distinguish between non cooperative peer or just transient\\ncommunication issue?\\n\\n* [ADR 27](https://github.com/input-output-hk/hydra/blob/master/docs/adr/2023-09-08_027-network-resilience.md)\\ngives details about our current strategy\\n* [#1074](https://github.com/input-output-hk/hydra/pull/1074) is a first implementation of this strategy\\n* [#1080](https://github.com/input-output-hk/hydra/issues/1080) should specify the resulting network protocol so that others could implement compatible hydra nodes\\n\\n#### Incremental commits and decommits [#199](https://github.com/input-output-hk/hydra/issues/199)\\n\\nIn the beginning of this month, some progress on incremental commits and\\ndecommits was made. An early\\n[experiment](https://twitter.com/ch1bo_/status/1696067253089743289) about the\\noff-chain / node logic showed that we can re-use the `/commit` validator and\\nmotivated design work on the feature items.\\n\\nAs mentioned above, the protocol extension was split into two items [Incremental\\ncommits #199](https://github.com/input-output-hk/hydra/issues/199) and\\n[Incremental decommits\\n\\n# [1057](<https://github.com/input-output-hk/hydra/issues/1057>). Both items contain\\n\\nhigh-level description, interaction outline and a first design of the on-chain\\nvalidators which is currently getting discussed by the Hydra contributors and\\nresearchers.\\n\\nEspecially the incremental commit is not trivial as the interaction between\\nlayer 1 and layer 2 is quite intricate. Observing a deposit on the Cardano\\nmainchain may not be seen by all parties at the same time and this should not\\nlock up the layer 2 process of transactions, while premature usage of committed\\nfunds is to be avoided. On the other hand, each step in the protocol needs to be\\nsecure in presence of an adversary and unlocking of committed funds must always\\nbe possible.\\n\\nOnce this validator design is clear, we can get started implementing one or both\\nof the features to enable more flexible usage of the Hydra head protocol.\\n\\n#### Refactored chain state [#1049](https://github.com/input-output-hk/hydra/pull/1049)\\n\\nFollowing up the implementation of ADR#24, this marks the first enhancement in\\na series of refinements, and our goal was optimization.\\n\\nWe eliminated the need for recursive types in persisted chain states,\\ntransitioning to a non-empty history model, preserving full backward\\ncompatibility with existing systems.\\n\\nImportantly, throughout this refactor, we\'ve kept the interface between the\\nchain and logic layers entirely unchanged. This ensures a smooth transition and\\nseamless integration with existing components.\\n\\nOne of the notable advantages of this refactor is a reduced persistence\\nfootprint. We now store individual points of the chain state, enhancing storage\\nefficiency.\\n\\n## Community\\n\\n#### Open source contributions\\n\\nThis month some open source contributions were received, and the team was able to\\ncontribute back to one project:\\n\\n* Hydra: Lightning network-style payments [use case](https://hydra.family/head-protocol/unstable/use-cases/payments/lighting-network-like-payments/) write-up by [@k-solutions](https://github.com/k-solutions)\\n* Aiken: Started an emacs [aiken-mode](https://github.com/aiken-lang/aiken-mode) by @ch1bo (triggered by our experiments)\\n* Hydra: Small [fix in the docs](https://github.com/input-output-hk/hydra/pull/1042) by [@caike](http://github.com/caike) (from RareEvo workshop)\\n\\n#### Current scaling use cases being tracked\\n\\n##### Hypix\\n\\n* An update of hydraw with improved usability to stimulate user engagement\\n* A showcase for Hydra, with an option to productize\\n\\n##### Book.io\\n\\n* A Web3 marketplace for tokenized digital eBooks and Audiobooks\\n* Requires NFT minting and distribution at scale (for each copy/instance of a book)\\n* Opened a discussion to investigate possible approaches to scaling their operations on Cardano\\n\\n##### Midnight\\n\\n* DUST airdrop and side-chain operation\\n\\n##### SingularityNet\\n\\n* A Web3 marketplace for AI services offered and consumed through a pay-per-use API\\n* Discussion ongoing about porting an existing Ethereum solution to Cardano\\n* A chance to build on previous Hydra Pay efforts and upgrade the design to support unidirectional micropayments channels\\n\\n##### SundaeLabs\\n\\n* Sundae proposed a ledger-only mode of Hydra, modelled on Gummiworm (the protocol used by SundaeSwap)\\n* https://cardano.ideascale.com/c/idea/102138\\n\\n##### Emurgo\\n\\n* Initial discussions to evaluate building a payments channel network using Hydra\\n* Could leverage work done on Hydra Pay by Obsidian\\n\\n## Conclusion\\n\\nThe monthly review meeting for September 2023 was held on 2023-09-20 via Google\\nMeet with these [slides][slides] and the [recording][recording].\\n\\nThis concludes yet another fully-packed month, this time not only\\nfocusing on Hydra but also encompassing Mithril and the broader goal of\\nsupporting Cardano\'s scaling effort to the best of our\\nability. Meeting and working together in person demonstrated once\\nmore, if this were needed, how much a small group of highly motivated\\npeople can achieve. It also fueled our desire and consolidated our\\nvision of being a small group of engineers with a clear _purpose_,\\nscratching our \\"own itch\\", contributing to the whatever projects and\\ntools is needed and best for the job at hand, relentlessly prototyping\\nand experimenting collectively to find the best solutions solving\\nactual people\'s problems.\\n\\nIt is also worth mentioning that Catalyst\'s Fund 10 outcome should\\nresult in more contributions to Hydra (and hopefully Mithril!) in the\\nnear term.\\n\\n[slides]: https://docs.google.com/presentation/d/1YAWR4pz1gG2dwtGvm5KOAHtrjRcchPLUKhDA16u10ps\\n[recording]: https://drive.google.com/file/d/1X8QnmG9gddR-t2V6F2oE7bYCYAEs2RPe/view"},{"id":"2023-08","metadata":{"permalink":"/monthly/2023-08","editUrl":"https://github.com/cardano-scaling/website/tree/master/monthly/2023-08-monthly.md","source":"@site/monthly/2023-08-monthly.md","title":"August 2023","description":"This report summarizes the work on Hydra since July 2023. It serves as","date":"2023-08-30T13:35:03.000Z","formattedDate":"August 30, 2023","tags":[{"label":"monthly","permalink":"/monthly/tags/monthly"}],"readingTime":5.92,"hasTruncateMarker":false,"authors":[{"name":"Pascal Grange","title":"Senior Software Engineer, IOG","url":"https://github.com/pgrange","imageURL":"https://github.com/pgrange.png","key":"pgrange"},{"name":"Sasha Bogicevic","title":"Senior Software Engineer, IOG","url":"https://github.com/v0d1ch","imageURL":"https://github.com/v0d1ch.png","key":"v0d1ch"},{"name":"Franco Testagrossa","title":"Senior Software Engineer, IOG","url":"https://github.com/ffakenz","imageURL":"https://github.com/ffakenz.png","key":"ffakenz"},{"name":"Sebastian Nagel","title":"Software Engineering Lead, IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"}],"frontMatter":{"title":"August 2023","slug":"2023-08","authors":["pgrange","v0d1ch","ffakenz","ch1bo"],"tags":["monthly"]},"unlisted":false,"prevItem":{"title":"September 2023","permalink":"/monthly/2023-09"},"nextItem":{"title":"July 2023","permalink":"/monthly/2023-07"}},"content":"This report summarizes the work on Hydra since July 2023. It serves as\\npreparation for the monthly review meeting (see [slides][slides] and\\n[recording][recording]), where the team updates project stakeholders on recent\\ndevelopments to gather their feedback on proposed plans.\\n\\n## Roadmap\\n\\nThis month, the team released version 0.12.0, and the project\\n[roadmap](https://github.com/orgs/input-output-hk/projects/21/views/7) has been\\nslightly updated to focus 0.13.0 on network resiliency and bump incremental\\ncommit and decommit in priority:\\n\\n![The roadmap with features and ideas](./img/2023-08-roadmap.jpg) <small><center>The latest roadmap with features and ideas</center></small>\\n\\n#### Release 0.12.0\\n\\n- Support cardano-node 8.1.2\\n  - Updated client and Plutus versions\\n- Layer 2 protocol changes\\n  - Authenticated messages\\n  - Removed redundancy\\n- Event-sourced persistence\\n- New API endpoints\\n- Removal of _internal commit_ endpoint\\n- Improved off-chain transaction processing performance\\n- Security fixes\\n\\n- See [full release notes](https://github.com/input-output-hk/hydra/releases/tag/0.12.0) and a list of [delivered features](https://github.com/input-output-hk/hydra/milestone/12?closed=1)\\n\\n## Development\\n\\n[Issues and pull requests closed since the last\\nreport](https://github.com/input-output-hk/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2023-07-28..2023-08-29)\\n\\nThis month, the team worked on the following:\\n\\n#### Update the tutorial and include Mithril [#997](https://github.com/input-output-hk/hydra/issues/997)\\n\\nTo prepare for the Hydra master class at RareEvo, the team has taken the\\noriginally written tutorial for Hydra version 0.8.0 and updated it to work with the latest\\nversions.\\n\\nThe challenge was to write content that is both easily comprehensible and functional across a wide\\nrange of user platforms, including operating system and processor architectures.\\n\\nBesides writing the tutorial, it is essential to ensure that it is kept\\nup-to-date (eg, using continuous integration).\\n\\n#### Support cardano-node 8.1.2 [#1007](https://github.com/input-output-hk/hydra/issues/1007)\\n\\nTo be able to use the latest Mithril snapshots to bootstrap a\\n`cardano-node` for the `hydra-node`, we needed to make some updates.\\n\\nThe `hydra-node` uses the `cardano-api` to establish a connection with the node using the node-to-client protocols. The format there has slightly changed (although versioned), necessitating an update to the version of `cardano-api` used within the `hydra-node`.\\n\\nThe way Haskell dependencies are managed required an adjustment of the versions for both `cardano-ledger` and `plutus`. These versions are used to construct our off-chain ledger and on-chain Hydra Head protocol scripts, respectively.\\n\\nAs a result, this process has proven to be more intricate than it might initially sound. However, it has ultimately resulted in enhancements to the efficiency of our on-chain scripts.\\n\\nTODO: how much?\\n\\n#### Event-sourced persistence [#913](https://github.com/input-output-hk/hydra/issues/913)\\n\\nWe want the hydra-node to be efficient in processing events to yield high\\nthroughput on processing transactions off-chain.\\n\\nWork done as part of [#186](https://github.com/input-output-hk/hydra/issues/186)\\nhas demonstrated that the primary bottleneck to faster transaction processing\\ninside the node was the state persistence logic, which simply overwrites the\\nfull state with whatever new state has been produced.\\n\\nFor that reason, we changed the persistent state to a sequence of events\\naccording to [ADR24](https://hydra.family/head-protocol/adr/24). Persistence is now done incrementally by saving\\nonly the `StateChanged` deltas.\\n\\nAs a consequence, the first spike confirmed the following performance\\nimprovements: master ~300ms \u2192 spike ~6ms.\\n\\nTODO: what are the numbers on master before/after?\\n\\nFinally, this also opens up interesting possibilities for state observation in\\nclients.\\n\\n#### New API endpoints\\n\\nThis release also includes several additions to the Hydra API. We added the\\n[/cardano-transaction\\nendpoint](https://github.com/input-output-hk/hydra/pull/1001) to submit a\\ntransaction to the layer 1 network. This feature improves developer experience as\\nHydra clients do not need direct chain access (eg, connect to `cardano-node`)\\nto be able to submit transactions.\\n\\nThe other new [/protocol-parameters\\nendpoint](https://github.com/input-output-hk/hydra/pull/989) serves the\\ncurrently configured protocol parameters used in `hydra-node`. This provides\\nmore flexibility when creating transactions for the head on the client side and\\navoids configuration or hard-coded values.\\n\\nOn top of this, we also included the hydra-node\\n[version](https://github.com/input-output-hk/hydra/pull/985) inside of the\\n`Greetings` message. This is very useful for debugging purposes and detecting\\npossible version mismatches.\\n\\n#### Removal of \'internal commit\' endpoint [#1018](https://github.com/input-output-hk/hydra/pull/1018)\\n\\nIn the previous release, we made an announcement regarding the deprecation of committing to the head through the websocket command. Subsequently, we have taken steps to eliminate this client command, which in turn resulted in the removal of the _fuel_ markers that were previously used to mark the UTXO of the internal Hydra wallet meant for use in the Head.\\n\\nThis simplifies the setup needed to run the Head protocol and improves security\\nsince users can directly commit funds from their wallets without sending them to\\nthe Head operator beforehand.\\n\\n## Community\\n\\n#### Hydra master class at RareEvo\\n\\nWe were happy to run a Hydra master class session at RareEvo 2023. The session\\nattracted 30+ attendees for the introductory parts including a presentation on\\nHydra and Mithril. About 10-15 participants remained for the practical part and\\nfollowing discussion.\\n\\nWe also streamed the event live on Discord, but were not able to interact much\\nthere. The responses were positive though and we should be doing more things in\\nthe public on this #hydra-live channel.\\n\\nSeveral participants managed to use Mithril and synchronize a pre-production cardano-node; two teams effectively initiated Hydra heads, conducted fund transactions within them, and subsequently closed them. The major challenges, as expected, concerned installation and networking. In the future, we intend to ensure the availability of prebuilt binaries catering to a wider range of platforms.\\n\\n#### Catalyst Fund10\\n\\nThe team screened all the proposals mentioning Hydra and\\n[Mithril](https://mithril.network/doc/). We submitted 11 community reviews and\\nnoticed, in particular, the following proposals:\\n\\n- [Sundae Labs Hydra Ledger-only Mode](https://cardano.ideascale.com/c/idea/102138)\\n- [Sundae Labs Hydra Transaction Stream Plugin](https://cardano.ideascale.com/c/idea/102200)\\n- [Hydra as a B2B layer for DeFi - a white paper and an MVP](https://cardano.ideascale.com/c/idea/101626)\\n- [Decentralized Demeter.run - Federated Frontend Hosting - New revenue stream for SPOs](https://cardano.ideascale.com/c/idea/104411)\\n- [Mithril - Open-source contributor](https://cardano.ideascale.com/c/idea/105113)\\n\\n## Conclusion\\n\\nThe monthly review meeting for August 2023 was held on 2023-08-23 via Google\\nMeet with these [slides][slides] and the [recording][recording], \'broadcasting live from warm and sunny Colorado\'!\\n\\nIt has been an interesting and unusual month. Some of the team had been in\\nLongmont, CO to prepare for the RareEvo event and we used the chance to have the\\nmeeting in a hybrid setting with some IO stakeholders attending live on-site and\\nabout 20 community members online.\\n\\nThis time, the demo was about the updated tutorial and demonstrating the full\\nsetup of the cardano-node, opening a Hydra head on the pre-production network, and submitting\\ntransactions off-chain in 15 minutes!\\n\\nThe feedback we received included inquiries about the timing, method, and extent of the audit for the Head protocol. While we will have an internal audit, which is already\\nhelping us improve the protocol, there are no plans for a significant external audit with funding. We also had the chance to look into and learn about some Catalyst Fund10\\nproposals involving Hydra. Hopefully, some or all of them get funded and we are\\nlooking forward to testing the Hydrazoa concept, implementing the ledger-mode operation, enabling federated Heads, and achieving other objectives.\\n\\nAt the RareEvo event, we had the chance to meet and communicate with various people\\nfrom the community. This ranges from known Hydra collaborators to tech-savvy\\nstake pool operators, to representatives of successful applications running on\\nCardano for scaling purposes like [book.io](https://book.io/).\\n\\nAlso with a new full-time contributor on board, we are keen to add more\\nfunctionality while the first applications prepare to utilize Hydra in production\\non mainnet.\\n\\n[slides]: https://docs.google.com/presentation/d/1MrCeUsYb3FQk7aCwMZdQs8mc5BfLOIjkK9gcWzgDdDc/edit#slide=id.g1f87a7454a5_0_1392\\n[recording]: https://drive.google.com/file/d/14pDsf0hDyh9HK8sCSMmkmT8gY8YxgOQ8/view"},{"id":"2023-07","metadata":{"permalink":"/monthly/2023-07","editUrl":"https://github.com/cardano-scaling/website/tree/master/monthly/2023-07-monthly.md","source":"@site/monthly/2023-07-monthly.md","title":"July 2023","description":"This report summarizes the work on Hydra since June 2023. It serves as","date":"2023-07-31T15:09:18.000Z","formattedDate":"July 31, 2023","tags":[{"label":"monthly","permalink":"/monthly/tags/monthly"}],"readingTime":8.42,"hasTruncateMarker":false,"authors":[{"name":"Sebastian Nagel","title":"Software Engineering Lead, IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"},{"name":"Arnaud Bailly","title":"Lead Architect, IOG","url":"https://github.com/abailly-iohk","imageURL":"https://github.com/abailly-iohk.png","key":"abailly"},{"name":"Sasha Bogicevic","title":"Senior Software Engineer, IOG","url":"https://github.com/v0d1ch","imageURL":"https://github.com/v0d1ch.png","key":"v0d1ch"}],"frontMatter":{"title":"July 2023","slug":"2023-07","authors":["ch1bo","abailly","v0d1ch"],"tags":["monthly"]},"unlisted":false,"prevItem":{"title":"August 2023","permalink":"/monthly/2023-08"},"nextItem":{"title":"June 2023","permalink":"/monthly/2023-06"}},"content":"This report summarizes the work on Hydra since June 2023. It serves as\\npreparation for the monthly review meeting (see [slides][slides] and\\n[recording][recording]), where the team updates project stakeholders on recent\\ndevelopments to gather their feedback on proposed plans.\\n\\n### Starmap update\\n\\nEvery couple of months, the team reflects on the themes identified for 2023 (as\\npresented in [January](/monthly/2023-01#themes-for-2023)), and creates a high\\nlevel list of possible deliverables,\\neg using [impact maps](./img/2022-11-impact.png). This time, the team has come up\\nwith the following items:\\n\\n![](./img/2023-07-starmap.png)\\n\\n- Sustainable open-source :green_heart:\\n\\n  - **Hydra master-class workshop**: A concrete session we aim to conduct in an\\n    upcoming event or online as a fallback. This will also be a motivation to\\n    update our existing tutorials and improve the first-start\\n    experience.\\n\\n  - **Engage and support developer community on Catalyst proposals**: There are\\n    around 30 proposals mentioning Hydra in the current Catalyst funding round\\n    and we want to review, comment, try to align, and maybe even promote some\\n    proposals. The goal is to provide a platform for many new ideas while avoiding fragmentation and maximizing the reuse of work.\\n\\n  - **Further open up GitHub repositories**: We want to provide a welcoming\\n    experience to non-IOG contributors and provide an easy-to-navigate group of\\n    repositories relating to Hydra.\\n\\n- Mainnet mature application :purple_heart:\\n\\n  - **Make Hydra trivial to use**: To enhance user and developer experience, we aim to enable a quick and frictionless setup of Hydra, possibly involving Mithril to get started. Our goal is to facilitate the opening of a distributed Hydra head with two nodes on a testnet within just a few minutes.\\n\\n  - **Build a basic head explorer**: We have previously experimented with the explorer, and now we are looking to set it up for the long term. The goal is not only to assess Hydra adoption but also to provide a valuable tool for DApp developers. Additionally, we aim to create a visualization that end users can use to answer important questions, such as \'who is running this head?\'\\n\\n- Drive adoption :blue_heart:\\n\\n  - **Deliver the first version of HydraNow to mainnet**:\\n    It\'s important that the very promising use case of payments using\\n    Hydra is made available to first users on mainnet. As a concrete example, this would be\\n    a mobile application \'HydraNow\', which uses a `hydra-pay` service to enable\\n    peer-to-peer payment channels.\\n\\n  - **Enable uni-directional payment channels**: This will expand the\\n    capabilities of any payment channel created using Hydra, allowing deposits and\\n    withdrawals while keeping the head open.\\n\\nWork packages related to these items appear on the technical\\nroadmap (especially [in this view](https://github.com/orgs/input-output-hk/projects/21/views/26)) and in our community activities.\\n\\n## Roadmap\\n\\nThis month, the team released version 0.11.0, which shifts the way Hydra clients\\nneed to interact with the hydra-node when committing funds. The project\\n[roadmap](https://github.com/orgs/input-output-hk/projects/21) was also updated\\nto reflect the latest developments and ideas from the starmap:\\n\\n![The roadmap without idea items](./img/2023-07-roadmap-ex-ideas.png) <small><center>The roadmap without idea items</center></small>\\n\\n#### Release 0.11.0\\n\\n- Completes the layer 2 ledger isomorphism with timed transaction support\\n\\n- Adds commit from external wallets API, which allows to:\\n\\n  - Commit multiple UTXO\\n  - Commit from scripts\\n  - Commit directly from any key\\n\\n- Deprecated: Internal commits via the WebSocket API\\n\\n- See [full release notes](https://github.com/input-output-hk/hydra/releases/tag/0.11.0) and a list of [delivered features](https://github.com/input-output-hk/hydra/milestone/11?closed=1)\\n\\n#### Notable updates\\n\\n- Two new items \\\\__elevated_ from user ideas and improved the API capabilities:\\n\\n  - The [ability to read protocol parameters via API #735](https://github.com/input-output-hk/hydra/issues/735)\\n  - The ability to[submit layer 1 transactions through hydra-node #966](https://github.com/input-output-hk/hydra/issues/966)\\n\\n- [Removing commit from internal wallet #954](Submit layer 1 transactions through\\n  hydra-node#954) is a consequence of deprecating this functionality in the\\n  previous 0.11.0 release. This will make the code base and documentation\\n  cleaner as there will be only one way to commit funds to a head.\\n\\n- The first new item derived from the starmap is to [Update tutorial and include\\n  Mithril #997](https://github.com/input-output-hk/hydra/issues/997). The\\n  tutorial is already a bit outdated, this will slim it down and incorporate\\n  Mithril to get the fastest (secure) bootstrap possible of a `hydra-node`.\\n\\n- As a result of focusing on the very concrete use case of payments for mainnet\\n  deployment (and hence 1.0.0 release), multiple items need to (and can) get\\n  reprioritized to match the requirements of this use case.\\n\\n![The latest roadmap with features and ideas](./img/2023-07-roadmap.png) <small><center>The latest roadmap with features and ideas</center></small>\\n\\n## Development\\n\\n[Issues and pull requests closed since last report](https://github.com/input-output-hk/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2023-06-22..2023-07-28)\\n\\nThis month, the team worked on the following:\\n\\n#### Authenticate network messages [#727](https://github.com/input-output-hk/hydra/issues/727)\\n\\nThe Hydra Head protocol paper states:\\n\\n> Each party then establishes pairwise authenticated channels to all other parties.\\n\\n[Hydra: Fast Isomorphic State Channels, p.14](https://eprint.iacr.org/2020/299.pdf)\\n\\nGuaranteeing the authenticity and integrity of the messages received from one\'s peers is critical to the security of the Head protocol. Initially, we considered deferring this responsibility to the transport layer, for example, leaving it to Hydra node operators to use TLS or other encrypted channels to communicate with their peers. However, this introduced an additional and unnecessary operational burden on operators.\\n\\nIt appeared simple enough to reuse the existing Hydra keys (using Ed25519\\ncurve), which need to be passed to the node, to:\\n\\n- _sign_ all messages sent to peers\\n- _verify_ all messages received from peers\\n\\nThe net benefit of this feature is to increase the life expectancy of a head,\\npreventing some forms of _denial of service_ attacks or wrongly configured nodes\\nthat would lead to a _stalled head_.\\n\\n#### ReqSn only sends transaction IDs [#728](https://github.com/input-output-hk/hydra/issues/728)\\n\\nThis feature aligns the current implementation better with the original paper, as it requests snapshots using only the transaction identifiers, rather than the full transactions.\\n\\nThe motivation to implement this feature came from different directions:\\n\\n- Improve the performance of the protocol by reducing bandwidth usage\\n- Make it possible to have \'atomic\' transaction sets submitted\\n  ([#900](https://github.com/input-output-hk/hydra/issues/900)),\\n- Prevent \'front-running\' from the current leader which, in the previous\\n  implementation, could inject arbitrary (but valid) transactions that peers had\\n  never seen before into a snapshot.\\n\\n`ReqSn`\'s snapshots now contain only the list of transaction IDs and each\\nhydra-node validates the snapshot by resolving those ideas against the set of\\ntransactions they have seen (through `ReqTx`). A consequence is that this\\nintroduces the possibility of space leak in the event a submitted valid\\ntransaction never gets included in a snapshot, but this should not be\\na problem in practice.\\n\\nNote that the\\n[specification](https://hydra.family/head-protocol/core-concepts/specification)\\nhas been updated to reflect this change.\\n\\n#### GitHub security advisories\\n\\nThere was a bug in the multi-signature verification which could compromise\\noff-chain security of a Hydra Head protocol. Although the fix was quite simple, we\\ndecided to use a new GitHub feature to create the first [GitHub security\\nadvisory](https://github.com/input-output-hk/hydra/security/advisories/GHSA-c8qp-cv4h-vcc4)\\nfor Hydra.\\n\\nThe process creates a separate GitHub repository where potential security issues\\ncould be discussed privately (between the reporter and the maintainers) since\\npotential attackers should not be aware of any issues until they are fixed. The\\nteam scored this issue using CVSS (The Common Vulnerability Scoring System), the\\nscore was moderate (5.5), and they didn\'t request a CVE (Common Vulnerabilities\\nand Exposures) for this (yet).\\n\\nThe process overall works well, but Hydra CI is not checking the builds in these\\nprivate, one-off forks so there is a risk of merging code that doesn\'t compile.\\n\\n#### Moving to GHC 9.2.7 [#841](https://github.com/input-output-hk/hydra/pull/841)\\n\\nGHC 9.2 series have been around for more than a year and the whole Cardano ecosystem is gradually moving to use this new compiler version. Moreover, GHC 8.10.7 does not work reliably on aarch64 architectures, eg Mac M1/M2.\\n\\nMoving to this new version entailed some significant changes in the code and also in the Plutus scripts:\\n\\n| Name     | After (bytes) | Before (bytes) | \u0394size |\\n| -------- | ------------- | -------------- | ----- |\\n| \u03bdInitial | 4289          | 4621           | - 7%  |\\n| \u03bdCommit  | 2124          | 2422           | - 12% |\\n| \u03bdHead    | 9185          | 8954           | + 3%  |\\n| \u03bcHead    | 4149          | 4458           | -7%   |\\n\\n## Community\\n\\n### Hydra master-class\\n\\nAs already mentioned above in our starmap update, we aim to have an educational session at the upcoming Rare Evo event:\\n\\n> Whether you are building decentralized applications which need to be fast and scale well, or you are creating infrastructure for other builders on Cardano, we will show you how to use Hydra to make your applications and platforms utilize fast off-chain transaction processing via the Hydra Head protocol.\\n>\\n> In this session you will learn what Hydra is all about, how to build scalable applications in a live coding session, get to know the hydra-pay and hydra-auction projects, and be guided through exercises to get your hands on these APIs and early SDKs.\\n\\nWe are currently putting together a detailed outline and will send out\\ncommunications on how to register for this exclusive session within the next 1-2\\nweeks. Stay tuned.\\n\\n## Conclusion\\n\\nThe monthly review meeting for May was held on 2023-07-26 via Google Meet with\\nthese [slides][slides] and here is the [recording][recording].\\n\\nAlthough we had planned an awesome demo for this month\'s review meeting, showcasing a Hydra head hack without the authenticated messages feature, we encountered some live demo problems (lesson learned: always record a backup!). While we might present it next time, this situation emphasizes the need for continuous improvement in developer and user experiences.\\n\\nWe haven\'t received many questions on our journey to further mature the Hydra software stack to support various use cases building on it. However, the recently kicked-off Catalyst Fund10 sparked a nice discussion on how to handle all these great new ideas while being mindful not to fragment the scaling efforts too much.\\n\\nOpen protocols mean that new ideas can be incorporated not only into the various\\ncode bases, but also in the specification and standards which ensure\\ninteroperability. We discussed means to ensure adherence to standards in a\\nlight-weight agile way and the challenges of educating potential contributors in\\nspecification-driven development.\\n\\nNext month we\'ll be at RareEvo, but might have the monthly just before in a\\nhybrid session from Colorado. Until then, we\'ll make Hydra trivial to use and\\nget started on our new objectives.\\n\\n[slides]: https://docs.google.com/presentation/d/1CQYAFztRcqofN6sbowg37QuXQ-DQU4NcDmoMghS36B8\\n[recording]: https://drive.google.com/file/d/14ANZ3efuxgXpYK94EBWxZLR9TtN7voru/"},{"id":"2023-06","metadata":{"permalink":"/monthly/2023-06","editUrl":"https://github.com/cardano-scaling/website/tree/master/monthly/2023-06-monthly.md","source":"@site/monthly/2023-06-monthly.md","title":"June 2023","description":"This report summarizes the work on Hydra since May 2023. It serves as","date":"2023-06-27T07:53:28.000Z","formattedDate":"June 27, 2023","tags":[{"label":"monthly","permalink":"/monthly/tags/monthly"}],"readingTime":6.975,"hasTruncateMarker":false,"authors":[{"name":"Sasha Bogicevic","title":"Senior Software Engineer, IOG","url":"https://github.com/v0d1ch","imageURL":"https://github.com/v0d1ch.png","key":"v0d1ch"},{"name":"Sebastian Nagel","title":"Software Engineering Lead, IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"}],"frontMatter":{"title":"June 2023","slug":"2023-06","authors":["v0d1ch","ch1bo"],"tags":["monthly"]},"unlisted":false,"prevItem":{"title":"July 2023","permalink":"/monthly/2023-07"},"nextItem":{"title":"May 2023","permalink":"/monthly/2023-05"}},"content":"This report summarizes the work on Hydra since May 2023. It serves as\\npreparation for the monthly review meeting (see [slides][slides] and\\n[recording][recording]), where the team updates project stakeholders on recent\\ndevelopments to gather their feedback on proposed plans.\\n\\n## Roadmap\\n\\nWhile there was no release this month, the team implemented several notable\\nfeatures, which will be released soon as version 0.11.0:\\n\\n![The roadmap without idea items](./img/2023-06-roadmap-ex-ideas.png) <small><center>The roadmap without idea items</center></small>\\n\\n#### Notable roadmap updates\\n\\n- Realized [allowing commit txs with multiple UTxO\\n  #774](https://github.com/input-output-hk/hydra/pull/774) as a dedicated roadmap\\n  item separate from the related [commit from external wallet\\n  #215](https://github.com/input-output-hk/hydra/issues/215) (which grew too\\n  big).\\n\\n- Revisited [off-chain performance by doing benchmarks\\n  #186](https://github.com/input-output-hk/hydra/issues/186). Identified a\\n  bottleneck, groomed and planned a follow-up performance improvement feature\\n  for [Event sourced persistence\\"\\n  #913](https://github.com/input-output-hk/hydra/issues/913)\\n\\n- Plan to release 0.11.0 without [Authenticate network messages\\n  #727](https://github.com/input-output-hk/hydra/issues/727) to deliver enabling\\n  features earlier.\\n\\n- API improvements and exploring batched transactions on L2 showed that [ReqSN\\n  only sends transaction IDs\\n  #728](https://github.com/input-output-hk/hydra/issues/728) is in demand,\\n  front-loads further API changes and is estimated to be a low-hanging fruit.\\n\\n- Reprioritized items in `<= 1.0.0` column, to do items with on-chain protocol\\n  impact earlier and not much feedback has been received on snapshotting items. In\\n  fact, if [Support larger # of UTXO via split-fanout\\n  #190](https://github.com/input-output-hk/hydra/issues/190) is done slightly\\n  differently, that should avoid some of the problems of impossible to finalize\\n  snapshots.\\n\\n![The latest roadmap with features and ideas](./img/2023-06-roadmap.png) <small><center>The latest roadmap with featuresand ideas</center></small>\\n\\n## Development\\n\\n[Issues and pull requests closed since last\\nreport](https://github.com/input-output-hk/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2023-05-24..2023-06-22)\\n\\nThis month, the team worked on the following:\\n\\n#### Commits with multiple UTXO [#774](https://github.com/input-output-hk/hydra/pull/774)\\n\\nOne of the early adopting projects is exploring how to move scripts from layer 1\\nto layer 2. For that purpose, it was necessary to not only commit the actual\\nscript UTXO, but also a \\"regular\\" UTXO holding only ada to be used as collateral\\n(the `cardano-ledger` always requires collateral although it would not be\\nnecessary on a layer 2).\\n\\nTo enable this, the specification and on-chain protocol needed updating. Before\\na protocol participant could commit zero or one UTXO, which changed now to a\\nlist of UTXO. As the specification is now [part of the\\nrepository](/monthly/2023-04#versioned-docs-and-specification), it could be kept\\nconsistent within the same pull request.\\n\\nDespite being a **breaking change**, leading to new Hydra script hashes to be\\npublished and used starting with version 0.11.0, this change was surprisingly\\neasy to do and demonstrated the amenability of the Head protocol and the system\\narchitecture.\\n\\n#### Commits from external wallet [#215](https://github.com/input-output-hk/hydra/issues/215)\\n\\nThe team started to mark _fuel_ some time ago as it was an easy workaround to\\ndistinguish UTXOs that can be committed into a head apart from regular outputs\\nholding ada to pay for fees - the so-called _fuel_. However, this required users\\nto \\"send funds\\" they want to commit first to the `hydra-node`s internal wallet\\nand involved additional steps in tagging such outputs with a special datum hash\\n\\nTo commit from external wallets, a new API endpoint was introduced for the\\npurpose of _drafting_ a commit transaction. The clients would request such draft\\ntransaction by sending a POST request to `/commit` and the `hydra-node` would\\nrespond with a transaction already authorized by the internal wallet. If the\\ncommit involved user funds (empty commits are still possible), then the client\\napplication would need to sign the transaction using the corresponding signing\\nkey. Also, submitting this transaction has shifted from `hydra-node` to the\\nclient.\\n\\nThis removes direct custody of `hydra-node` over user funds since clients can\\nnow use whatever key they own, not known to the `hydra-node`, to do a commit\\nstep and no single `hydra-node` has access to user funds used in the Head\\nprotocol.\\n\\nWithin this work package, _marking fuel_ became deprecated and all UTXOs owned\\nby the internal wallet are considered fuel. Fuel marking will be completely\\nremoved in the future. Furthermore, a good old HTTP-based API is now used\\nfor the new query (so far it was only WebSocket-based), which prompts a\\npotential shift to using OpenAPI as API specification since AsyncAPI does not\\ndescribe synchronous requests well.\\n\\n#### Benchmark performance of Hydra Head [#186](https://github.com/input-output-hk/hydra/issues/215)\\n\\nLow confirmation time is a key feature of Hydra Head protocol and is\\nneeded for some use cases. The existing end-to-end \\nbenchmarks have been revived and tailored for a _baseline scenario_, one with a\\nsingle hydra-node and a single client. While this scenario is not\\nrepresentative of target deployments, it\'s interesting as it gives us\\nan upper bound on the performance of a Hydra Head network.\\n\\nThe results have been somewhat disappointing, and further investigations lead to a few insights:\\n\\n- There was a misconfiguration in the RTS of the hydra-node executable\\n  which was therefore not taking advantage of parallelism\\n- We identified the main bottleneck to be persistence of the node\'s\\n  state, which is currently done by overwriting a single file with the\\n  JSON content of the _full_ state on _state change_ which is pretty\\n  inefficient. As a consequence, the team will work on improving the\\n  persistence strategy as described in [this\\n  ADR](https://github.com/input-output-hk/hydra/pull/940)\\n- More benchmarks:\\n  - The aforementioned [End-to-end benchmarks](https://hydra.family/head-protocol/benchmarks/end-to-end-benchmarks),\\n  - [Ledger Micro-benchmarks](https://hydra.family/head-protocol/benchmarks/ledger) as a comparison basis.\\n\\n#### Operating hydra nodes\\n\\nAs a \\"dogfooding\\" exercise, the Hydra team is operating a Hydra Head\\non mainnet on top of which is running our `hydraw` application. \\nThe Head protocol got stuck a couple of times and\\npost-mortem investigations lead to a few improvements in how to\\noperate a hydra-node and network:\\n\\n- Better reporting on the version of executable `hydra-node` and\\n  `hydra-tui` which now report the Git SHA1 at which they were built\\n- Reduction in the volume of logs emitted by hydra-node by removing\\n  some chatty network-related logs and using ids to link `Begin/End`\\n  pairs\\n- Rework the\\n  [log-filter](https://github.com/input-output-hk/hydra/blob/35f2964ba6d4a780a5f8e669f1afce565a492cec/hydra-cluster/exe/log-filter/Main.hs#L34)\\n  tool to provide timings for various events and effects keyed by\\n  transactions\\n\\n## Community\\n\\n#### Hydra hackathon / workshop\\n\\nThe Hydra team is considering holding a workshop at/around Rare Evo at the end\\nof August and is in contact with the event teams at IOG and the Rare Evo\\norganizers. The concrete format, scope and agenda is still a bit unclear as we\\nare contemplating whether to do a workshop/tutorial style or rather a\\nintroduction + challenge setting event. If it does not work out for Rare Evo, we\\nwill find another event or do it ourselves.\\n\\nIf you are reading this and would be interested in joining such an event please\\ndrop us a line on [discord](https://discord.gg/Qq5vNTg9PT) or DM\\n[@ch1bo](https://twitter.com/ch1bo_)! Ideally along with some thoughts on\\npreferred format or what you would be interested in.\\n\\n#### Hydra for Auctions contributions and closing of project\\n\\nOne of the Hydra lighthouse projects is slowly coming to an end. The\\ncollaboration project between IOG and MLabs on using Hydra for auctions is\\ncurrently finalizing documentation and creating demonstration running the whole\\nthing on a public testnet. Although the demo video was not available at the copy\\ndeadline of this report, watch this space for more about this next\\nmonth.\\n\\nThe project yielded multiple github issues containing ideas and sparked great\\ndiscussions on improving Hydra like [reported last\\nmonth](/monthly/2023-05#hydrozoa-850). It is\\nalso the first project which demonstrates how to move smart contracts from the\\nlayer 1 (L1) to the layer 2 (L2)! Overall it is a great example of establishing\\ncrucial state on L1 and achieving scalability through Hydra as L2.\\n\\nThe code is fully open source and available on Github\\n[hydra-auction](https://github.com/mlabs-haskell/hydra-auction/).\\n\\n## Conclusion\\n\\nThe monthly review meeting for May was held on 2023-06-21 via Google Meet with\\nthese [slides][slides] and here is the [recording][recording].\\n\\nIt was a fairly straight-forward month and consequently unexciting review meeting\\nthis month. Unfortunately, we could not release 0.11.0 yet, but we wanted to get\\nthe quite significant change of supporting commits from external wallets done\\nfirst. This feature in particular was more involved than expected, but as the\\ndemonstration in the meeting showed, we are in the final stages of getting this\\nover the line.\\n\\nBesides some nice findings to potential performance improvements for layer 2\\ntransaction processing, there was not much to announce this time around. Behind\\nthe scenes, however, there have been great progress on the Hydra for Payments\\nproject and the next updates are going to be more interesting again.\\n\\nDespite holiday season approaching, we will march on, steadily adding features\\nand enabling more and more use cases to scale through Hydra.\\n\\n[slides]: https://docs.google.com/presentation/d/1TVzjaFKXBi9DAugSd2L8MSUSZGIU9EjTmwf6yccckPI\\n[recording]: https://drive.google.com/file/d/1_N6b4RDe579TgLawiJzbE0NLofD3ljE6/view"},{"id":"2023-05","metadata":{"permalink":"/monthly/2023-05","editUrl":"https://github.com/cardano-scaling/website/tree/master/monthly/2023-05-monthly.md","source":"@site/monthly/2023-05-monthly.md","title":"May 2023","description":"This report summarizes the work on Hydra since April 2023. It serves as","date":"2023-05-30T14:30:18.000Z","formattedDate":"May 30, 2023","tags":[{"label":"monthly","permalink":"/monthly/tags/monthly"}],"readingTime":8.445,"hasTruncateMarker":false,"authors":[{"name":"Sebastian Nagel","title":"Software Engineering Lead, IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"},{"name":"Pascal Grange","title":"Senior Software Engineer, IOG","url":"https://github.com/pgrange","imageURL":"https://github.com/pgrange.png","key":"pgrange"},{"name":"Franco Testagrossa","title":"Senior Software Engineer, IOG","url":"https://github.com/ffakenz","imageURL":"https://github.com/ffakenz.png","key":"ffakenz"}],"frontMatter":{"title":"May 2023","slug":"2023-05","authors":["ch1bo","pgrange","ffakenz"],"tags":["monthly"]},"unlisted":false,"prevItem":{"title":"June 2023","permalink":"/monthly/2023-06"},"nextItem":{"title":"April 2023","permalink":"/monthly/2023-04"}},"content":"This report summarizes the work on Hydra since April 2023. It serves as\\npreparation for the monthly review meeting (see [slides][slides] and\\n[recording][recording]), where the team updates project stakeholders on recent\\ndevelopments to gather their feedback on proposed plans.\\n\\n## Roadmap\\n\\nThis month the team released version 0.10.0 which includes many important features.\\nThe project [roadmap](https://github.com/orgs/input-output-hk/projects/21) was\\nonly slightly updated this month and already saw one more feature completed:\\n\\n![The roadmap without idea items](./img/2023-05-roadmap-ex-ideas.png)\\n<small><center>The roadmap without idea items</center></small>\\n\\n#### Release 0.10.0\\n\\n- First mainnet compatible release of `hydra-node` including technical changes and documentation\\n\\n- Mainnet exposure currently limited to 100\u20b3 per participant\\n\\n- Added some missing features to the client API (short-term solutions)\\n\\n- Some quality of life improvements in running the `hydra-node`\\n\\n- [Full release notes](https://github.com/input-output-hk/hydra/releases/tag/0.10.0) and a list of [delivered features](https://github.com/input-output-hk/hydra/milestone/8?closed=1)\\n\\n#### Notable roadmap updates\\n\\n- Got new input and a concrete scenario for benchmarking (off-chain) performance\\n  of a Hydra head. As it is a very basic one, we moved the item from an\\n  idea to a feature and started work on it.\\n\\n- Added a new feature item to add Hydra as a tool to developer platforms within our agenda of [promoting Hydra as an open-source platform](/monthly/2023-01#themes-for-2023) for scalability on Cardano.\\n\\n- Already completed a first feature for 0.11.0 and considering whether to release it as\\n  early as possible with latest advances.\\n\\n![The latest roadmap with features and ideas](./img/2023-05-roadmap.png) <small><center>The latest roadmap with features and ideas</center></small>\\n\\n## Development\\n\\n[Issues and pull requests closed since last\\nreport](https://github.com/input-output-hk/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2023-04-26..2023-05-24)\\n\\nThis month, the team worked on the following:\\n\\n#### Timed transactions [#196](https://github.com/input-output-hk/hydra/issues/196#)\\n\\nTo realize the Hydra Head protocol, a `hydra-node` observes and follows the\\nchain progress on the layer 1 (L1). Until now, this component was only observing\\nprotocol related transactions. Now, on every block roll forward, a `Tick` event\\ncarrying the notion of time from L1 is observed by the `hydra-node` and is used\\nto validate transactions in a Hydra head. This means that clients can submit\\ntime bounded transactions to an open head and expect them to be validated using\\nthe same slot that would be used on L1. It is important to mention that time\\nonly advances on L1 when a block is produced.\\n\\n![Timed transactions in a Hydra Head state channel](./img/2023-05-timed-transactions.jpg) <small><center>Timed transactions in a Hydra Head state channel</center></small>\\n\\nThis feature will make the Hydra L2 ledger now en-par with UTXO features\\navailable on the Cardano L1. A logical next step in this direction could be to\\nmake time in the state channel advance every configured `slotLength` (e.g. every\\nsecond) using the system clock in between blocks as a form of [dead reckoning](https://en.wikipedia.org/wiki/Dead_reckoning).\\n\\n#### Removing --ledger-genesis [#863](https://github.com/input-output-hk/hydra/pull/863)\\n\\nThe hydra-node had two command line options to configure the ledger used for validating layer 2 (L2) transactions: `--ledger-protocol-parameters` and `--ledger-genesis`. The former option, which is self-explanatory, allows configuration of the Cardano protocol parameters to be used. Often, the same parameters as those on L1 are configured, or similar parameters with reduced fees, for example. On the other hand, the second option required the `genesis-shelley.json` file previously used to initialize the Shelley era by the cardano-node.\\n\\nWhen we started using the current slot in the L2 ledger (see above), we realized\\nthat only the start time and slot length are effectively used from that\\nconfiguration file. Moreover, it would be quite surprising if those were\\ndifferent and slots would be longer or shorter on L2 (unless explicitly\\nconfigured). We opted to remove the option altogether and have the `hydra-node`\\nfetch the genesis parameters from the Cardano network. This makes the system\\neasier to configure and more isomorphic to L1.\\n\\n#### Improving CI runtime\\n\\nThe Hydra project [embraces Test Driven Development](https://hydra.family/head-protocol/adr/12) and implements\\n[Continuous\\nIntegration](https://github.com/input-output-hk/hydra/actions/workflows/ci-nix.yaml)\\n(CI), checking all these tests pass and more.\\n\\nThe CI could sometimes take as long as an hour or\\nmore to run, which has a negative impact on the project\'s workflow.\\nFor instance, all the project\'s branches have to be [fast-forward with\\nmaster](https://github.com/input-output-hk/hydra/wiki/Coding-Standards#merge-prs-with-merge-commits-and-rebase-branches-on-top-of-master)\\nbefore being merged.\\nSo if all the tests on a branch are green and the pull request has been\\napproved but is lagging a bit behind master, it has to be rebased, so the\\nCI has to run again, incurring a one hour or so delay in this case before\\nbeing able to merge it. The situation becomes worse when several pull requests\\nare _ready_ to be merged.\\n\\nAnalyzing the run from [May, 10th](https://github.com/input-output-hk/hydra/actions/runs/4933005294)\\nwe can see that:\\n\\n- Building and testing takes 19 minutes for the longest\\n- Generating haddock documentation and running the benchmarks takes 28 minutes\\n  for the longest\\n- Documentation (which will need artifacts generated in previous steps) will take\\n  14 minutes\\n- In total, this run took 1 hour and 16 minutes.\\n\\nLet\'s focus on the build and the testing stage first. We\'re expecting the\\nplutus-merkle-tree to run fast but [it took 8 minutes and 52\\nseconds](https://github.com/input-output-hk/hydra/actions/runs/4933005294/jobs/8816564512)\\n, 7m and 11 seconds being spent setting up the build environment.\\nIn other words, 81% of the build time is downloading binary dependencies from some nix cache.\\n\\nCompiling the code requires cabal and other nix dependencies that will trigger\\nmassive downloads. Instead, let\'s, straight on, run the tests with nix and let\\nnix decide what needs to be compiled. Sometimes, most of the code will not have\\nchanged and the test binary will already be available in some nix cache to be run\\nwithout any compilation step.\\n\\nThis has been done in [#867](https://github.com/input-output-hk/hydra/pull/867).\\nMerging this PR, the [build on master took 45\\nminutes](https://github.com/input-output-hk/hydra/actions/runs/5003046049) and,\\nspecifically, the same [plutus-merkle-tree\\njob](https://github.com/input-output-hk/hydra/actions/runs/5003046049/jobs/8963773583)\\nonly took 1 minute and 44 seconds, only 20% of the time observed before.\\n\\nThen, let\'s focus on documentation (14 minutes). Most of the time spent by this\\nprocess is website optimization. It makes sense for the documentation that will\\nactually be published on the website (master or release). But what about all\\nthe builds in branches for which the website will never be published?\\nWe need to keep this documentation step in branches because it gives us sanity\\nchecks, preventing broken links, for instance. But we can definitely remove the\\noptimization step.\\n\\nThis has been done in [#880](https://github.com/input-output-hk/hydra/pull/880)\\nand it [saves 10 minutes](https://github.com/input-output-hk/hydra/actions/runs/5067084637/jobs/9098252031)\\nfrom this step.\\n\\nOur first goal was to reduce CI execution time when pushing\\non branches and this has been improved. We\'re now having execution time\\nsignificantly under 30 minutes where it used to be 45 minutes or even an hour.\\n\\nWe had some issues with compilation output, obfuscated by nix, which have been\\nsolved by [#889](https://github.com/input-output-hk/hydra/pull/889).\\n\\nEvery morning, we rebuild our master branch and we can observe the whole\\nexecution time on the following graph (in seconds):\\n\\n![CI perf](./img/2023-05-ci-perf.png) <small><center>C.I. execution total execution time</center></small>\\n\\nAlthough we observed performance improvements on branches CI execution time,\\nmaster execution time has not been reduced that much. We may save 10 minutes\\nfrom the documentation step because optimizing the _unstable_ documentation is\\nmaybe not worthwhile.\\nBut what\'s more problematic here is the process variability.\\n\\nThis variability can be explained by nix cache misses. That\'s something we need\\nto investigate. It\'s hard to optimize a process with buffers, especially here\\nwhere in case of a cache miss, recompilation has to happen and takes time.\\nSo every cache miss introduces several minutes of overhead which explains why we\\nobserve so much variation between two days with this master execution time.\\n\\nNext steps:\\n\\n- Inspect why we have an unexpected random cache miss\\n- Improve haddock generation time (15 minutes)\\n- Reduce bench time (we probably don\'t want to run the whole benchmark suite for\\n  every single commit, or a smaller one)\\n- Focus on the changed area (do not compile everything to generate the monthly\\n  report)\\n\\n## Community\\n\\n#### Hydrozoa [#850](https://github.com/input-output-hk/hydra/discussions/850)\\n\\nThis month, the project saw a new kind of contribution from the community.\\n@GeorgeFlerovsky has written a research piece about an adaptation of the\\n(Coordinated) Hydra Head protocol into a new flavor - Hydrozoa. The article is\\ncurrently being examined and [discussed on\\nGitHub](https://github.com/input-output-hk/hydra/discussions/850). Feedback so\\nfar has been positive. Of course, one does not simply change the Hydra Head\\nprotocol (pun intended), but the ideas contained could drive evolution and\\nbe followed up with concrete protocol extensions. Very much like the ideas\\npresented in the original paper.\\n\\n#### Hydra for Payments project update\\n\\nIn this collaborative effort between IOG and ObsidianSystems, we are pushing the\\nfrontiers of using Hydra in payment use cases. It will lower the entry barrier\\nfor developers and ultimately users to leverage Hydra L2 for sending\\nand receiving ada and Cardano native assets with very low fees and sub-second\\nfinality.\\n\\nThe project is in its second phase where the open-source\\n[hydra-pay](https://github.com/obsidiansystems/hydra-pay) library is being\\nexpanded with necessary features while the team pushes for building a\\ndedicated mobile application.\\n\\nWith the recently released hydra-pay version\\n[0.2.0](https://github.com/obsidiansystems/hydra-pay/releases/tag/v0.2.0), an\\nend-to-end workflow of the Android App nicknamed \\"HydraNow\\" can be realized.\\nThis app will act as a layer 2 wallet quite like a Bitcoin Lightning Wallet and\\ndrives feature development in both `hydra-pay` and `hydra` in the background.\\n\\n![Two instances of HydraNow (in browser) connected via a hydra-pay channel](./img/2023-05-hydra-now.png) <small><center>Two instances of HydraNow (in browser) connected via a hydra-pay channel</center></small>\\n\\n#### Spanish translation\\n\\nLast, but not least, we would like to thank @Agustinblockchain for their\\ncontribution of a [Spanish translation #866](https://github.com/input-output-hk/hydra/pull/866)\\nof the [hydra.family website](https://hydra.family/head-protocol/unstable/es/) \ud83c\uddea\ud83c\uddf8 \ud83c\udf89\\n\\n## Conclusion\\n\\nThe monthly review meeting for May was held on 2023-05-24 via Google Meet with\\nthese [slides][slides] and here is the [recording][recording].\\n\\nThe monthly review meeting was lively and we had stakeholders from IOG as well\\nas interested community members join. They were well served by two very nice\\ndemos shown by ObsidianSystems and IOG teams.\\n\\nAfter having dealt with some issues last month, we are happy to have\\nthe first mainnet-capable version released and have already another feature\\ncompleted this month.\\n\\nIt is great to see that more and more contributors from the community are\\nstepping up to become advocates of the technology. A community is forming and we\\nrealize that the project could need some help from someone dedicated to keep\\ntrack of all the great things happening. What a great problem to have!\\n\\n[slides]: https://docs.google.com/presentation/d/1anUC3Z1idloyR6uwiSHLZtV6-LQvUcByHPMUgCBOVIA\\n[recording]: https://drive.google.com/file/d/1_N6b4RDe579TgLawiJzbE0NLofD3ljE6/view"},{"id":"2023-04","metadata":{"permalink":"/monthly/2023-04","editUrl":"https://github.com/cardano-scaling/website/tree/master/monthly/2023-04-monthly.md","source":"@site/monthly/2023-04-monthly.md","title":"April 2023","description":"This report summarizes the work on Hydra since March 2023. It serves as","date":"2023-05-03T06:45:42.000Z","formattedDate":"May 3, 2023","tags":[{"label":"monthly","permalink":"/monthly/tags/monthly"}],"readingTime":8.99,"hasTruncateMarker":false,"authors":[{"name":"Sebastian Nagel","title":"Software Engineering Lead, IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"},{"name":"Arnaud Bailly","title":"Lead Architect, IOG","url":"https://github.com/abailly-iohk","imageURL":"https://github.com/abailly-iohk.png","key":"abailly"},{"name":"Sasha Bogicevic","title":"Senior Software Engineer, IOG","url":"https://github.com/v0d1ch","imageURL":"https://github.com/v0d1ch.png","key":"v0d1ch"},{"name":"Pascal Grange","title":"Senior Software Engineer, IOG","url":"https://github.com/pgrange","imageURL":"https://github.com/pgrange.png","key":"pgrange"}],"frontMatter":{"title":"April 2023","slug":"2023-04","authors":["ch1bo","abailly","v0d1ch","pgrange"],"tags":["monthly"]},"unlisted":false,"prevItem":{"title":"May 2023","permalink":"/monthly/2023-05"},"nextItem":{"title":"March 2023","permalink":"/monthly/2023-03"}},"content":"This report summarizes the work on Hydra since March 2023. It serves as\\npreparation for the monthly review meeting (see\\n[slides](https://docs.google.com/presentation/d/10wZJy0tyGMbvMihbHnHk0QByA_TAZrtbcRbf5Gd-SHg/)\\nand the\\n[recording](https://drive.google.com/file/d/1X4yPerLTatPPMrX3RYS7XH9lfT_LYaaX/view?usp=sharing)),\\nwhere the team updates major project stakeholders on recent developments to\\ngather their feedback on proposed plans.\\n\\n## Roadmap\\n\\nThe project [roadmap](https://github.com/orgs/input-output-hk/projects/21) was\\nonly slightly updated this month:\\n\\n![](./img/2023-04-roadmap.png) <small><center>The latest roadmap with features and ideas</center></small>\\n\\n#### Notable roadmap updates\\n\\n- There are still many \ud83d\udcad **idea** items on the roadmap, however, not on the\\n  current and next planned release columns. The process involves clarifying and\\n  refining each idea item into a \ud83d\udcac **feature** before starting work on it. This\\n  includes giving equal consideration to new user \ud83d\udcad **idea**s and requests.\\n\\n- Temporarily postponed the [Hydra heads explorer\\n  #696](https://github.com/input-output-hk/hydra/issues/696) item until there is\\n  more clarity. While there aren\'t any major blockers,the explorer just requires\\n  further detailing, especially since we\'re currently in talks with existing\\n  Cardano explorer platforms.\\n\\n- Converted the [aggregated multi-signature\\n  #193](https://github.com/input-output-hk/hydra/issues/193) from the concrete\\n  roadmap into an [idea discussion\\n  #787](https://github.com/input-output-hk/hydra/discussions/787). This is based\\n  on feedback from the community, and we believe that discussing it there would\\n  be more beneficial.\\n\\n- The main focus for the 0.10.0 release is implementing mainnet compatibility.\\n  This is mostly done and only requires some documentation and disclaimer\\n  updates. We\'re about to release 0.10.0, which will be the first\\n  mainnet-compatible version.\\n\\n- Meanwhile, work on the [configurable API\\n  #380](https://github.com/input-output-hk/hydra/issues/380) was completed,\\n  which gave rise to new ideas and follow-up feature requests from users. One of\\n  them ([Add HeadState/Snapshot to Greetings\\n  #823](https://github.com/input-output-hk/hydra/issues/823)) was fairly\\n  straightforward and necessary to deliver a consistent, usable increment on the\\n  API with the upcoming release.\\n\\n- Prioritized [Support timed transactions\\n  #196](https://github.com/input-output-hk/hydra/issues/196) higher as yet\\n  another use case would benefit from this.\\n\\n![](./img/2023-04-roadmap-ex-ideas.png) <small><center>The roadmap without idea items</center></small>\\n\\n## Development\\n\\n[Issues and pull requests closed since last\\nreport](https://github.com/input-output-hk/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2023-03-29..2023-04-26)\\n\\nThis month, the team worked on the following:\\n\\n#### Configurable API\\n\\nThe API evolved a bit, driven by the issues our users reported\\n[#823](https://github.com/input-output-hk/hydra/issues/823)\\n[#813](https://github.com/input-output-hk/hydra/issues/813)\\n[#800](https://github.com/input-output-hk/hydra/issues/800)\\n[#789](https://github.com/input-output-hk/hydra/issues/789). Related changes\\nwere added to the API server so now our clients can:\\n\\n- Control the historical messages output. History messages can be displayed\\n  upon re/connection or not depending on client needs.\\n- Snapshot UTXOs can optionally be disabled.\\n- Transactions can be displayed in CBOR or JSON format.\\n\\nOur clients can also have a nice insight into the current Hydra node state and head UTXOs\\nthat are now displayed as part of a `Greetings` message.\\n\\nNext steps on the API level are to further fulfill user needs by grooming and\\nimplementing needed changes related to filtering, pagination etc.\\n\\n#### Versioned docs and specification\\n\\nOver the [last couple of months](/monthly/2023-02#development) the Hydra\\nspecification became an important artifact to use in discussion, review and\\npotential audit of the Hydra Head protocol implementation. The document was now\\nmoved from overleaf into the Hydra repository, where it is properly versioned\\nand built on each CI run. Changes can be proposed using our regular pull request\\nworkflow and the final PDF is built and [published to the\\nwebsite](https://hydra.family/head-protocol/unstable/core-concepts/specification)\\nautomatically.\\n\\nNote that the above link points to the new `/unstable` version of the\\ndocumentation, which holds the bleeding edge user manual, specification and\\nAPI reference (which got a new sidebar) built directly from `master`. The\\nnormal, non-unstable version of the website is always referring to the [last\\nreleased version](https://github.com/input-output-hk/hydra/releases).\\n\\n![](./img/2023-04-specification.png) <small><center>Specification on the Hydra website</center></small>\\n\\n#### Fixed scripts, Plutonomy and custom script contexts\\n\\nAs we made the specification use a more direct way to represent transactions\\n(instead of the constraint emitting machine formalism), we realized that our\\nscripts are not correctly ensuring _script continuity_. We identified these\\n\'gaps\' as red sections (see above) in the specification and worked on fixing\\nthem.\\n\\nWhile the [actual fix #777](https://github.com/input-output-hk/hydra/pull/777)\\nwas fairly straightforward and could easily be covered by our mutation-based\\ncontract tests, the script size increased and we could not publish all three\\nHydra scripts in a single publish transaction (which allows for a single\\n`--hydra-scripts-tx-id` parameter on the `hydra-node`).\\n\\nTo mitigate this, we looked into the UPLC optimizer\\n[Plutonomy](https://github.com/well-typed/plutonomy/tree/master/src/Plutonomy).\\nApplying it was fairly simple, our tests did also pass, script sizes _and\\ncosts_ also became lower. But, script size does not matter so much as we are\\nusing reference scripts and using a (not really maintained?) optimizer which\\nintroduces yet another question mark after compilation from `plutus-tx` to\\n`uplc` was not our cup of tea right now at least (and we might pull this out\\nof the drawer later).\\n\\nThere is an alternative: decoding `ScriptContext` involves quite some code,\\nbut we don\'t need everything in all validators. So we introduced a\\ncustomscript context that only decodes the fields we need.\\n\\n| scripts  | @0.9.0 | fixes | fixes + plutonomy | fixes + custom ScriptContext |\\n| -------- | ------ | ----- | ----------------- | ---------------------------- |\\n| \u03bdInitial | 4621   | 4727  | 3672              | 4300                         |\\n| \u03bdCommit  | 2422   | 2513  | 1816              | 2068                         |\\n| \u03bdHead    | 8954   | 9492  | 7579              | 9456 (no custom SC)          |\\n| \u03bcHead    | 4458   | 4537  | 3468              | 4104                         |\\n\\nAs part of this process, we also updated dependencies #[826](https://github.com/input-output-hk/hydra/pull/826) to the latest\\n`cardano-node` master. Although it didn\'t have an impact on script sizes, it\'s a\\ncrucial step towards preparing for upcoming hard-forks.\\n\\n#### Rollback bug hunt\\n\\nOpening our first head on mainnet failed. We didn\'t\\nlose any funds, except for some fees, but the head just did not open.\\nExploring the logs, we figured out that a rollback happened while opening the\\nhead and there was a bug.\\n\\nThis is our test pyramid. It already contained some tests about the rollback but\\nwe decided to enrich our model-based tests to simulate rollbacks (before that,\\nit used to run on a _perfect_ blockchain). You can find more about our\\nmodel-based test strategy in [Model-Based Testing with\\nQuickCheck](https://engineering.iog.io/2022-09-28-introduce-q-d/).\\n\\n![test pyramid](./img/2023-04-test-pyramide.png) <small><center>Testing pyramid</center></small>\\n\\nThe new property\\n[headOpensIfAllPartiesCommit](https://github.com/input-output-hk/hydra/blob/commit_vs_rollback/hydra-node/test/Hydra/ModelSpec.hs#L185)\\nhelped prove the issue. At the end of the day, the problem came from a\\nconcurrency issue introduced while implementing [ADR 18](https://hydra.family/head-protocol/adr/18).\\n\\nIn the figure below, the `DirectChain` processes a new block, updating the\\n`chainState` stored inside the `headState`. This also leads to an event being\\npublished to some event queue. Later, the `HeadLogic` (called _Node_ in the\\npicture) will process this event, updating the `headState`.\\n\\nAt the end of the process, we can see that the new `headState` points to a\\n`previousRecoverableState` which contains the same `chainState`, `chainState 1`\\ninstead of `chainState 0`. If a rollback then happens, the `headState` will be\\nreverted to this `previousRecoverableState` and the fact that it contains\\n`chainState 1` instead of `chainState 0` makes some on-chain observations\\nimpossible.\\n\\n![Race condition](./img/2023-04-race-condition.png) <small><center>Race condition</center></small>\\n\\nThis explains the issue we had when opening our head:\\n\\n1. a commit A is observed on-chain;\\n2. a rollback happens so that the headState _forgets_ about this commit but not\\n   the `chainState` (remember, it\'s the wrong `chainState`);\\n3. the commit is observed again on the chain but ignored by the `chainState` (because\\n   it has already seen it, it just ignores it);\\n4. the `headState` will never hear about this commit again and so will never open\\n   the head, waiting forever for the missing commit.\\n\\nWe decided to implement the following solution:\\n\\n- A local chain state is re-introduced in the chain component, not shared with\\n  the head logic.\\n- A copy of the chain state is kept in the head state to keep the benefits of\\n  ADR [18](https://hydra.family/head-protocol/adr/18) regarding persistence.\\n- The rollback event is removed from the API until [#185](https://github.com/input-output-hk/hydra/issues/185).\\n\\n![possible solution](./img/2023-04-possible-solution.png) <small><center>Possible solution</center></small>\\n\\nRollback management is quite a tricky business. It might be the case that we\'ve\\ntried to be a bit too smart. So we\'re doing a rollback in our way of handling\\nrollbacks until we focus on this topic again when dealing with this roadmap item:\\n[Handle rollbacks II](https://github.com/input-output-hk/hydra/issues/185).\\n\\n## Community\\n\\n#### Hydra for Voting\\n\\nThe project is advancing and a basic vote tallying scenario in the Catalyst use\\ncase was demonstrated in the review meeting. The project is driving the API\\ndiscussions as it is not using any Haskell tooling, but an application in Java\\nwith Aiken as the validator scripting language. Besides the catalyst use case,\\nother scenarios like the ballot voting for the summit are also explored now.\\n\\n#### Hydra for Auctions\\n\\nA new demo was recorded in the wake of an upcoming Twitter space discussing\\nauctions and NFT marketplaces with the community. The feature set currently\\nincludes starting the auction on L1, bidding on L1 or (and this is the novel\\nthing!) transferring the auction from L1 to L2, such that it can be bid on L2.\\n\\n<div style={{position: \\"relative\\", paddingBottom: \\"56.25%\\", height: 0}}>\\n  <iframe src=\\"https://www.loom.com/embed/7ed84e37d65748d994d8a0be147f7ecb\\"\\n  frameborder=\\"0\\" webkitallowfullscreen mozallowfullscreen allowfullscreen\\n  style={{position: \\"absolute\\", top: 0, left: 0, width: \\"100%\\", height:\\n  \\"100%\\"}}></iframe>\\n</div>\\n\\n#### Kupo x Hydra\\n\\nIn a good old pairing session between IOG and CF engineers, the integration of\\nKupo with Hydra was explored. This seems to be promising and work started [here\\nkupo#117](https://github.com/CardanoSolutions/kupo/pull/117). This will make it\\npossible to run `kupo` natively connected to a `hydra-node`, very much it would\\nrun with `cardano-node` or `ogmios`. Kupo is a lightweight indexer of chain data\\nlike unspent transaction outputs and allows its clients to query information\\non-demand. \ud83d\udc39\\n\\n#### CBIA meetings\\n\\nHydra Team is now a regular participant to [Cardano Blockchain Infrastructure\\nAlliance](https://www.cbia.io/) meetings which happen more or less on a monthly\\nbasis. Hydra was featured during the meetup that happened while the team was on\\na [workshop in Feldkirch](/monthly/2023-03) and through this participation we\\nhope to contribute to growth of the Cardano eco-system and position Hydra as a\\nkey infrastructure for builders.\\n\\n#### Twitter space on scaling Cardano\\n\\nThis month we took part in a Twitter space about scaling Cardano and how Hydra\\ncan contribute to this. Thanks for conducting this\\n[@thepizzaknight\\\\_](https://twitter.com/thepizzaknight_) \ud83d\ude4f\\n\\n<a href=\\"https://twitter.com/i/spaces/1vOxwMVDaXLGB\\">\\n\\n![](./img/2023-04-twitter-space.png)\\n\\n</a>\\n\\n## Conclusion\\n\\nThe monthly review meeting for April was held on 2023-04-26 via Google Meet with\\nthese\\n[slides](https://docs.google.com/presentation/d/10wZJy0tyGMbvMihbHnHk0QByA_TAZrtbcRbf5Gd-SHg/)\\nand here is the\\n[recording](https://drive.google.com/file/d/1X4yPerLTatPPMrX3RYS7XH9lfT_LYaaX/view?usp=sharing).\\n\\nAlthough it has been a busy month we could not cut a release, unfortunately.\\n\\nWe\'ve experienced several setbacks due to the commits vs. rollbacks bug and oversized script sizes, which have slowed down our progress. Additionally, the back and forth on the API, which at times required creative and unconventional solutions, has also been time-intensive. However, we view this feedback as **incredibly** valuable, as it will ultimately make hydra-node more user-friendly and capable, albeit through a step-by-step process.\\n\\nAssociated projects in the greater Hydra community are moving ahead nicely\\ndue to the collaborative approach and tight loops of interaction between the\\nindividual teams.\\n\\nAll things considered, the project can be considered on track. We are very close to cutting our first mainnet-compatible release and the rising number of user\\nrequests and interested developers are good indicators that Hydra adoption\\nis increasing."},{"id":"2023-03","metadata":{"permalink":"/monthly/2023-03","editUrl":"https://github.com/cardano-scaling/website/tree/master/monthly/2023-03-monthly.md","source":"@site/monthly/2023-03-monthly.md","title":"March 2023","description":"This report summarizes the work on Hydra since February 2023. It serves as","date":"2023-04-04T13:15:50.000Z","formattedDate":"April 4, 2023","tags":[{"label":"monthly","permalink":"/monthly/tags/monthly"}],"readingTime":5.03,"hasTruncateMarker":false,"authors":[{"name":"Franco Testagrossa","title":"Senior Software Engineer, IOG","url":"https://github.com/ffakenz","imageURL":"https://github.com/ffakenz.png","key":"ffakenz"},{"name":"Sasha Bogicevic","title":"Senior Software Engineer, IOG","url":"https://github.com/v0d1ch","imageURL":"https://github.com/v0d1ch.png","key":"v0d1ch"},{"name":"Sebastian Nagel","title":"Software Engineering Lead, IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"}],"frontMatter":{"title":"March 2023","slug":"2023-03","authors":["ffakenz","v0d1ch","ch1bo"],"tags":["monthly"]},"unlisted":false,"prevItem":{"title":"April 2023","permalink":"/monthly/2023-04"},"nextItem":{"title":"February 2023","permalink":"/monthly/2023-02"}},"content":"This report summarizes the work on Hydra since February 2023. It serves as\\npreparation for the monthly review meeting\\n([slides](https://docs.google.com/presentation/d/1yZ4AqUQ8OBMG9ARMYvj3IOjaIAqglf7kZei4vsLMrbs/edit#slide=id.g1f87a7454a5_0_1392)/[recording](https://www.youtube.com/watch?v=mA9lMV0tKN8))\\n, where the team updates major project stakeholders on recent developments to\\ngather their feedback on proposed plans.\\n\\n## Roadmap\\n\\nThe project saw one release this month and several items on our\\n[roadmap](https://github.com/orgs/input-output-hk/projects/21) were updated.\\n\\n#### Released version 0.9.0\\n\\n- This release brought in on-chain and off-chain changes that are now also fully\\n  reflected in our specification.\\n\\n- We managed to decrease the costs of our plutus scripts by using a new error code\\n  framework and made also the head script a reference script.\\n\\n- The mutation test suite is improved. Now, if tests fail they show the correct reason.\\n\\n- The contestation deadline is now pushed out by each contesting party, so the\\n  contestation period parameter can be chosen irrespective of number of parties.\\n\\n- Added a tutorial contributed by [@perturbing](https://github.com/perturbing/).\\n\\n- [Full release notes](https://github.com/input-output-hk/hydra/releases/tag/0.9.0) and list of [delivered features](https://github.com/input-output-hk/hydra/milestone/9?closed=1)\\n\\n![](./img/2023-03-roadmap.png) <small><center>The latest roadmap, with many items marked as idea.</center></small>\\n\\n#### Notable roadmap updates\\n\\n- Now that 0.9.0 is released, the focus is on mainnet compatibility. The\\n  next planned version **0.10.0** will be the first `hydra-node` to be\\n  mainnet compatible.\\n\\n- Also prioritized [API configurability\\n  #380](https://github.com/input-output-hk/hydra/issues/380) higher and planned\\n  it into 0.10.0 as more users were requesting this.\\n\\n- We aim for several more **0.x.0** versions to incorporate user-requested\\n  features before reaching a 1.0.0, which will be a fully maintained release\\n  where features can be considered stable and won\'t be removed without\\n  appropriate deprecation cycles.\\n\\n- Marked multiple features as \ud83d\udcad _idea_, meaning they are up for discussion.\\n  Many have been on the roadmap for a long time without user demand or input,\\n  while other ideas are incubating as [github idea\\n  discussion](https://github.com/input-output-hk/hydra/discussions/categories/ideas).\\n  We are planning to convert these idea issues to GitHub discussions as these\\n  provide better discussion tools and allow to gauge interest in topics. In turn,\\n  by cleaning up we provide more room for the most popular ideas to be planned\\n  onto the roadmap in a more timely manner.\\n\\n- In short, if you want to see some feature added, **show your support** on the\\n  corresponding [idea\\n  discussion](https://github.com/input-output-hk/hydra/discussions/categories/ideas).\\n\\n- The \ud83d\udcac _feature_ items remaining are the currently identified \\"must-haves\\" or\\n  too vague to remove \ud83d\udd34 _red_ items.\\n\\n![](./img/2023-03-roadmap-ex-ideas.png) <small><center>The roadmap without idea items.</center></small>\\n\\n## Development\\n\\n[Issues and pull requests closed since last\\nreport](https://github.com/input-output-hk/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2023-02-24..2023-03-29)\\n\\nThis month, the team worked on the following:\\n\\n- **Making Hydra mainnet compatible.** Besides making it technically possible to\\n  run on mainnet, this is about safeguarding our users and preventing them from\\n  shooting themselves in the foot with a mainnet gun. That is why we\\n  [limited](https://github.com/input-output-hk/hydra/issues/762) the amount of\\n  ada you can commit to a head on mainnet. Our smoke tests should be running on\\n  mainnet also so we made sure to\\n  [return](https://github.com/input-output-hk/hydra/pull/770) the leftover funds\\n  back to our faucet. There was also\\n  [work](https://github.com/input-output-hk/hydra/pull/775) on our CI that\\n  enables running the tests on mainnet using a dedicated github runner.\\n\\n- **Improving the Hydra UX.** We noticed a possible pitfall when restarting the\\n  `hydra-node` using different parameters than in the persisted state. Now, the\\n  node would [prevent](https://github.com/input-output-hk/hydra/issues/764) this\\n  kind of misconfiguration.\\n\\n- **Optimize the on-chain scripts.** Reduced the cost of opening/closing a Head\\n  by reducing size of scripts via error codes\\n  [#748](https://github.com/input-output-hk/hydra/pull/748) and also having the\\n  head script as a reference only\\n  [#701](https://github.com/input-output-hk/hydra/pull/701)).\\n\\n  The mutation test also got improved by making all cases expect the\\n  corresponding error codes\\n  [#705](https://github.com/input-output-hk/hydra/issues/705) and new [golden\\n  test suite ](https://github.com/input-output-hk/hydra/pull/772) ensures the\\n  script hashes don\'t change accidentally.\\n\\n  Furthermore, we addressed a problem discovered in our property tests\\n  [#724](https://github.com/input-output-hk/hydra/pull/724) by preventing\\n  committing outputs with reference scripts to a Head\\n  [#766](https://github.com/input-output-hk/hydra/pull/766). This is still a\\n  documented known issue, but a workaround is available.\\n\\n## Community\\n\\n- **Team workshop in Austria.** Meetup of core contributors in Feldkirch,\\n  Austria for retrospective, grooming and discussions on future plans for\\n  Hydra. Part of the agenda was also a presentation of Hydra to members of the\\n  Cardano Foundation and a meeting with builders from the Cardano community.\\n\\n  The highlight, though was the common effort of going the last mile to open a\\n  head on mainnet for the monthly review meeting! \ud83c\udf89\\n\\n    <blockquote class=\\"twitter-tweet\\"><p lang=\\"en\\" dir=\\"ltr\\">JUST IN: We have a Hydra Head live on the <a href=\\"https://twitter.com/hashtag/Cardano?src=hash&amp;ref_src=twsrc%5Etfw\\">#Cardano</a> Mainnet \ud83d\ude80 <a href=\\"https://t.co/6kDKq7T7no\\">pic.twitter.com/6kDKq7T7no</a></p>&mdash; Emmanuel \ud80c\udc80 \ud83c\udf55 \ud80c\udd53\ud83c\uddec\ud83c\udded\ud83e\udd84\ud83d\udfe3\u26a1\ufe0f (@thepizzaknight_) <a href=\\"https://twitter.com/thepizzaknight_/status/1638572527789252608?ref_src=twsrc%5Etfw\\">March 22, 2023</a></blockquote> <script async src=\\"https://platform.twitter.com/widgets.js\\" charset=\\"utf-8\\"><\/script>\\n\\n  We demonstrated our good old `hydraw` application on that Hydra head and we\\n  saw thousands of pixels painted by hundreds of users (no detailed metrics).\\n\\n- **Next step in Hydra for Payments.** Also announced in the monthly meeting was\\n  the next phase on the Hydra for Payments project. The scope of this will be to\\n  extend hydra-pay and build a mobile payment channels app that makes direct use\\n  of it - working title: HydraNow.\\n\\n## Conclusion\\n\\nThe monthly review meeting for March was conducted on 2023-03-27 via Google\\nMeet - [slides](https://docs.google.com/presentation/d/1yZ4AqUQ8OBMG9ARMYvj3IOjaIAqglf7kZei4vsLMrbs/edit#slide=id.g1f87a7454a5_0_1392)/[recording](https://www.youtube.com/watch?v=mA9lMV0tKN8).\\n\\nThis month was very important for the project and culminated in the first\\ndemonstration of a Hydra Head on mainnet! The demo was well received and we\\nreceived positive feedback in the meeting, on following twitter announcements\\nand on the published recording on youtube. Inspired by this, we saw multiple\\npeople offer to help and collaborate on communicating, educating and ultimately\\nspreading the love. The invitation via the new discord category worked well - we\\nhad about 40 community members in the call - and we will continue with this\\nworkflow. Make sure to follow the Hydra\\n[#announcements](https://discord.gg/Bwdy2jNdm2) on the IOG Technical discord\\nserver.\\n\\nWhile being mainnet compatible is a major milestone for the project, there are\\nstill many known issues, shortcomings and requested features. The roadmap\\nchanges this month should make it clear that we are serious about the latter -\\nHydra will only reach 1.0.0 if it is used by an application on mainnet. Hence,\\nwe will focus on adding features required for payments, voting, auctions, ...\\nand eventually, your use case.\\n\\nHydra Head is ready to be used on mainnet. Are you ready to use it?"},{"id":"2023-02","metadata":{"permalink":"/monthly/2023-02","editUrl":"https://github.com/cardano-scaling/website/tree/master/monthly/2023-02-monthly.md","source":"@site/monthly/2023-02-monthly.md","title":"February 2023","description":"This report summarizes the work on Hydra since January 2023. It serves as","date":"2023-03-02T07:26:29.000Z","formattedDate":"March 2, 2023","tags":[{"label":"monthly","permalink":"/monthly/tags/monthly"}],"readingTime":6.45,"hasTruncateMarker":false,"authors":[{"name":"Sebastian Nagel","title":"Software Engineering Lead, IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"}],"frontMatter":{"title":"February 2023","slug":"2023-02","authors":"ch1bo","tags":["monthly"]},"unlisted":false,"prevItem":{"title":"March 2023","permalink":"/monthly/2023-03"},"nextItem":{"title":"January 2023","permalink":"/monthly/2023-01"}},"content":"This report summarizes the work on Hydra since January 2023. It serves as\\npreparation for the monthly review meeting, where the teams update major project\\nstakeholders on recent developments to gather their feedback on proposed plans.\\n\\n## Roadmap\\n\\nLooking at the [roadmap](https://github.com/orgs/input-output-hk/projects/21),\\nthere are a few things that changed this month:\\n\\n- In general, there will be several items in flux as we align the technical\\n  roadmap to support our high-level objectives for the year.\\n\\n  + New items for example: [create a use case-centric roadmap\\n  #710](https://github.com/input-output-hk/hydra/issues/710) and [open\\n  specification with change process\\n  #693](https://github.com/input-output-hk/hydra/issues/693).\\n\\n- Also note that we have not had a release in a while and we want to have\\n  smaller faster releasable items again.\\n\\n- [Aligning implementation with HeadV1 specification\\n  #452](https://github.com/input-output-hk/hydra/issues/452) was more work than\\n  anticipated. There was quite some back and forth with the writing of the\\n  specification and discussions with researchers leading to scope creep.  \\n  Most importantly, we made on-chain behavior consistent with specification.\\n  + Follow-ups for some off-chain protocol logic:\\n    - [Authenticate network messages\\n      #727](https://github.com/input-output-hk/hydra/issues/727)\\n    - [ReqSn only sends transaction ids\\n      #728](https://github.com/input-output-hk/hydra/issues/728)\\n  \\n- Version **0.9.0** will be the first release to be developed against a full\\n  technical specification. We expect a release in early March.\\n\\n- Version **0.10.0** will be the first mainnet compatible release. For this, we\\n  created and groomed the main feature item [Mainnet compatibility\\n  #713](https://github.com/input-output-hk/hydra/issues/713):\\n  - Not only making it technically compatible but also adding guard rails to\\n    limit risk (\u201cnot shoot yourself in the foot .. with a real gun now\u201d) and\\n    documenting known issues.\\n\\n- For a fully maintained version **1.0.0** we still need to address some things,\\n  but we aim for an increased rate of planned releases in the next months as we\\n  march toward it.\\n  \\n![](./img/2023-02-roadmap.png) <small><center> The latest roadmap with multiple\\nnew items and starting to reflect Hydra objectives of 2023.</center></small>\\n\\n## Development\\n\\n[Issues and pull requests closed since last\\nreport](https://github.com/input-output-hk/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2023-01-24..2023-02-28)\\n\\nThis month, the team worked on the following:\\n  \\n- **Aligning specification and implementation**. This major [feature\\n  item](https://github.com/input-output-hk/hydra/issues/452) was the topic we\\n  worked on over the last couple of months. This time we could finish the major,\\n  must-have parts and can continue now on other features. Notable things from\\n  this month were:\\n  \\n  **Pushing out contestation deadlines:** The original paper defined that all\\n  participants need to be contesting within the contestation period (after\\n  close, before the deadline). In discussions with researchers last year, we\\n  identified better semantics: the contestation deadline gets \\"pushed out\\" on\\n  each contest. This has the benefit that the period needs to only accommodate\\n  the minimum time required to get a single contest transaction into the\\n  blockchain. Before it was depending on the size of the Hydra head - each\\n  participant can contest once.\\n  \\n  **Align off-chain protocol logic:** While most concerns addressed were about\\n  the on-chain scripts of the Hydra protocol, this is about the layer two\\n  protocol logic. That is, which messages are exchanged between Hydra nodes and\\n  how a node reacts to them. Here we realized that the implementation was\\n  slightly different from the formalism used in the paper and specification.\\n  This makes it non-obvious whether the behavior is exactly as specified or\\n  whether the specification can even be implemented into a working system.\\n  \\n  To clarify this, we put in some effort to align the implementation with the\\n  specification and the other way around. This allowed us to reason through our\\n  behavior tests whether the protocol as specified is sound as well. Below you\\n  see an excerpt of the Haskell code against the LaTeX pseudocode formalism:\\n  \\n  <center> <img src={require(\\"./img/2023-02-logic-haskell.png\\").default}\\n    style={{width: 310}} /> <img\\n    src={require(\\"./img/2023-02-logic-latex.png\\").default} style={{width: 250}}\\n    /> </center>\\n \\n- **Profiling Hydra transactions.** We will want to maximize the capability of\\n  the Hydra Head protocol. This includes writing the on-chain scripts\\n  efficiently. Besides having [transaction cost\\n  benchmarks](https://hydra.family/head-protocol/benchmarks/transaction-cost/),\\n  we worked on a profiling workflow for Hydra protocol transactions and\\n  published a [tutorial on the Hydra\\n  website](https://hydra.family/head-protocol/benchmarks/profiling). This allows\\n  any contributor to [Hydra](https://github.com/input-output-hk/hydra) to\\n  profile the scripts used in these transactions and identify code that uses a\\n  lot of the memory or CPU budget in flame graphs like this:\\n  \\n  ![](img/2023-02-profile-mem.svg) [Interactive]Head not closable/limiting\\n  script size discussion + acceptance property\\n\\n## Community\\n\\n- **Audit guidelines.** Hydra is an open-source project and, as such, should be\\n  freely used, reviewed and audited. The goal of audits and peer reviews is to\\n  increase confidence in the security of a system. However, conducting an audit\\n  is also very expensive and not in the scope of our current budget. All the\\n  while, the worth of an audit is not the same to all users, some will not even\\n  trust an audit they have not paid for themselves, while others do not care at\\n  all and would blindly trust the word of the maintainers.\\n  \\n  While the Hydra project continues to seek for funding to eventually pay for an\\n  audit of the protocol specification and the `hydra-node` implementation, it is\\n  a prerequisite that the necessary artifacts for such an audit exist. As we\\n  have been creating them in recent months, we also worked on guidelines for\\n  auditors, now [published on our\\n  website](https://hydra.family/head-protocol/audit-guidelines/). These\\n  guidelines should serve as a starting point and scope description of what\\n  would be most crucial to audit.\\n\\n- **New tutorial.** This month we received a great contribution from\\n  [@perturbing](https://github.com/perturbing/), who created an [end-to-end\\n  tutorial](https://hydra.family/head-protocol/docs/tutorial/) on using a\\n  `hydra-node` and opening a Hydra head on the testnet. We gladly adopted this\\n  tutorial and aim to keep it up to date with upcoming versions of the\\n  `hydra-node`. It will provide a great starting point for new users and makes\\n  the project more approachable. Thanks! :green_heart:\\n\\n- **Hydra for Payments demo.** As we are about to kick off the next phase of the\\n  payments use case with Obsidian Systems, they demonstrated the use of\\n  [hydra-pay](https://github.com/obsidiansystems/hydra-pay) in a new\\n  backoffice-like view, listing multiple payment channels and providing a great\\n  teaser of using payment channels for pay-per-use APIs or cashback use cases\\n  (micro-transactions).\\n\\n  ![](./img/2023-02-payment-channels.png)\\n\\n- **Hydra for Voting.** The project with Catalyst and Cardano Foundation on\\n  voting with Hydra (or rather *tallying* with Hydra) showed some progress. They\\n  have [contributed Merkle Trees to\\n  Aiken](https://github.com/aiken-lang/trees/pull/1), which will be useful to\\n  prove the correct tallying of votes in the L2. They started work on a\\n  [hydra-java-client](https://github.com/cardano-foundation/hydra-java-client)\\n  and provided valuable feedback on the `hydra-node` API over the last month.\\n\\n- **Hydra on Demeter.** The folks from [@txpipe](https://github.com/txpipe) have\\n  been working on integrating Hydra into their platform-as-a-service offering,\\n  Demeter. This is a great way to get started with running a `hydra-node` as a\\n  service and we plan on integrating one instance into our long-running hydraw\\n  demo. It\'s still not fully released, but the teams are working together to\\n  make this integration great. Thanks for providing this service! :green_heart:\\n  \\n- **New discord category.** The Hydra project will be using Discord a bit more\\n  in the coming weeks and months. For that, a new category on the [IOG Technical\\n  Discord server](https://discord.gg/Bwdy2jNdm2) has been created. Look out for\\n  news and, most importantly, invites for the next month\'s review meeting in the\\n  new Hydra #announcements channel!\\n  \\n  <div style={{display: \'flex\'}}> <img\\n    src={require(\\"./img/2023-02-discord.png\\").default} style={{width: 300,\\n    margin: \'0 auto\'}} /> </div>\\n\\n## Conclusion\\n\\nThe monthly review meeting for February was conducted on 2023-02-27 via Google\\nMeet -\\n[slides](https://docs.google.com/presentation/d/1FjLvlLS4Qh6dwuULFJxielvemDGi-xiWZ2o6wysJk7U/edit#slide=id.g1f87a7454a5_0_1392)\\n/\\n[recording](https://drive.google.com/file/d/15l5F5NJNO1aC4X8HdQUDsg_dKMgVCO-J/view?usp=sharing).\\n\\nThis month\'s installment featured two demos, one about the Hydra Payment\\nchannels, and another about the progress on the Hydra for Auctions project. It\\nwas great to showcase not only core development progress on the specification\\nand protocol implementation in the `hydra-node`, but also to see contributions\\nfrom the Community on tutorials and tooling (Demeter integration).\\n\\nAn exciting, but also challenging next step will be to aim for mainnet\\ncompatibility and at the same time deliver quick releases to enable these\\nlighthouse projects and the increasing number of use cases explored by the\\nbuilders of Cardano."},{"id":"2023-01","metadata":{"permalink":"/monthly/2023-01","editUrl":"https://github.com/cardano-scaling/website/tree/master/monthly/2023-01-monthly.md","source":"@site/monthly/2023-01-monthly.md","title":"January 2023","description":"This report summarizes the work on Hydra since December 2022. It serves as","date":"2023-01-26T11:32:23.000Z","formattedDate":"January 26, 2023","tags":[{"label":"monthly","permalink":"/monthly/tags/monthly"}],"readingTime":5.845,"hasTruncateMarker":false,"authors":[{"name":"Sebastian Nagel","title":"Software Engineering Lead, IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"}],"frontMatter":{"title":"January 2023","slug":"2023-01","authors":"ch1bo","tags":["monthly"]},"unlisted":false,"prevItem":{"title":"February 2023","permalink":"/monthly/2023-02"},"nextItem":{"title":"December 2022","permalink":"/monthly/2022-12"}},"content":"This report summarizes the work on Hydra since December 2022. It serves as\\npreparation for the monthly review meeting, where the teams update major project\\nstakeholders on recent developments to gather their feedback on the proposed\\nplan forward.\\n\\n## Roadmap\\n\\nLooking at the [roadmap](https://github.com/orgs/input-output-hk/projects/21),\\nthere are just a few things to report this month:\\n\\n- Regroomed [Create updated specification for coordinated head protocol\\n  #448](https://github.com/input-output-hk/hydra/issues/448) to :yellow_heart:,\\n  as good progress was made on the specification\\n\\n- Marked [Align implementation with HeadV1 protocol specification\\n  #452](https://github.com/input-output-hk/hydra/issues/452) as :red_circle:, as\\n  the team experienced scope creep and has not progressed as fast as expected.\\n  + The plan is to break this initiative into smaller tasks to address and\\n    explain implementation challenges.\\n  \\n![](./img/2023-01-roadmap.png) <small><center> The latest roadmap with minor\\nchanges, which needs a reflection of the latest objectives. </center></small>\\n\\n## Development\\n\\n[Issues closed since last\\nreport](https://github.com/input-output-hk/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2022-12-23..2023-01-24)\\n\\nThis month, the team worked on the following:\\n  \\n- **First write-up of Hydra spec online**. The team has been aggregating the\\n  latest definitions of on- and off-chain semantics into a new technical\\n  specification. The latest version can still be found [on\\n  Overleaf](https://www.overleaf.com/project/6389ba5edbcf7a51fda1328f), before\\n  its integration into the core Hydra repository. Should you have feedback,\\n  please send it our way through one of the [communication\\n  channels](https://github.com/input-output-hk/hydra/blob/master/SUPPORT.md).\\n\\n- **Closed more gaps in the Head Contract.** The team addressed two more gaps in\\n  the on-chain scripts based on discussions on the specification.\\n\\n  + All validators are authenticated now and ensure contract continuity by\\n    checking for the state tokens in the output (or getting burned).\\n\\n  + Abort now fully reimburses all committed UTXOs, even if two parties would\\n    have committed the exact same output (quite a theoretical attack vector).\\n\\n  This work is captured in\\n  [#452](https://github.com/input-output-hk/hydra/issues/452), but this work\\n  item is taking quite a bit longer than expected. Also, it\'s a single feature\\n  item, lacking some rationale on certain requirements, so we intend to break\\n  this down into smaller pieces over the next days and weeks.\\n\\n- **Mutation test framework improvements.** While closing gaps in the contracts,\\n  the team realized that some of the [mutation\\n  tests](https://hydra.family/head-protocol/haddock/hydra-node/tests/Hydra-Chain-Direct-Contract-Mutation.html)\\n  were correctly tripping validators and making transactions invalid, but not\\n  always for the right reason. In fact, some of the mutations were \u2018too harsh\u2019\\n  and made the even transaction not even pass phase-1 validation. The team\\n  addressed this by introducing a first (naiive) way to assert the right cause\\n  of the failure by checking strings in the validator log.\\n  [#679](https://github.com/input-output-hk/hydra/pulls/679)\\n\\n- **Add `headId` in API and TUI.** The team not only added the unique `headId`\\n  to the appropriate server outputs and the TUI\\n  [#678](https://github.com/input-output-hk/hydra/pull/678), but also added\\n  sequence numbers and timestamps to produced outputs\\n  [#618](https://github.com/input-output-hk/hydra/pull/618). This feature was\\n  asked for by users and simplifies identifying of heads and integration with\\n  the hydra-node.\\n\\n- **Hydra explorer experiment.** Some of the team used the holiday season to\\n  conduct some experiments on summarizing Hydra Heads observed on a network.\\n  This quick hack already demonstrates the value of a Hydra explorer as a tool\\n  to measure adoption by open heads on a given network. Naturally, it would\\n  reuse code from the hydra-node and challenge the architecture used in it for\\n  tracking multiple heads. Also, it will drive discussion about the versioning\\n  of hydra-plutus and the possibility to track multiple versions of the Hydra\\n  protocol on the chain (hashes/addresses change in each version).\\n  \\n![](./img/2023-01-explorer.png) <small><center> Hydra explorer first experiment\\nUI </center></small>\\n\\n## Community\\n\\n- **The Hydra for Voting project**, which got kicked off in December is picking\\n  up steam with deep dives into Catalyst voting and Hydra technology.\\n  Discussions are currently held in various settings and the team is continuing\\n  to develop a picture of what is achievable.\\n\\n- **Hydra for auctions lite paper**. IOG is collaborating with MLabs on\\n  exploring how Hydra can improve auction use cases. At this stage, the teams\\n  discussed multiple approaches on structuring the problem space with various\\n  Hydra topologies and specific trade-offs. The full case study was published\\n  [on Essential\\n  Cardano](https://www.essentialcardano.io/article/implementing-auction-projects-using-hydra).\\n  The teams plan to upstream the findings back into the [use case\\n  section](https://hydra.family/head-protocol/use-cases/nft-auction/) on the\\n  Hydra website from which this project originated.\\n  \\n## Themes for 2023\\n\\nAfter kicking off planning in a [workshop](/monthly/2022-11#cardano-summit--workshop) and reflecting on [what Hydra achieved in 2023](https://cardanofoundation.org/en/news/hydra-head-protocol-an-open-source-solution-for-scalability/), the team has progressed in fleshing out relevant themes and objectives for this year to position Hydra as a sustainable open-source project in the age of Voltaire:\\n\\n- **A mainnet mature application**\\n  + **Why?** The core contributors should be able to use the protocol on\\n    mainnet, so it should be maintainable and mature enough to lock some ada in\\n    a Hydra Head using a reference DApp (eg, hydraw). By creating and growing\\n    this DApp, the team will\\n    [dogfood](https://en.wikipedia.org/wiki/Eating_your_own_dog_food) features\\n    and hence improve additional usability.\\n  + **How to measure?** Number of heads on mainnet > 0 and core contributors\\n    feel confident to lock at least 100\u20b3 in a Hydra Head on mainnet.\\n  + **Next steps:**\\n    - Publish Hydra Head V1 specification\\n    - Close gaps in implementation and release 0.9.0\\n    - Create a request for proposals (RFP) to audit the specification and its\\n      implementation\\n\\n- **Increase adoption**\\n  + **Why?** The team wants to showcase what is possible with Hydra through\\n    benchmarks and lighthouse projects, enabling use cases and reducing friction\\n    to use Hydra. Also, ensuring interoperability through open standards and\\n    reference implementations.\\n  + **How to measure?** Number of third-party created heads on any network > 0\\n  + **Next steps:**\\n    - Build a basic Hydra Head explorer to measure adoption\\n    - Benchmark off-chain performance (of a selected scenario)\\n    - Demonstrate Hydra for payments to potential users\\n    - Support Hydra for voting project\\n    - Hydra for auctions project exploring a delegated voucher auction\\n\\n- **Sustainable open-source-development**\\n  + **Why?** The team wants to scale Cardano in the long run. Hence this project\\n    should not be owned by a single entity, but by the community and the Cardano\\n    network itself. It is thus essential to make contributions to the project\\n    possible and ultimately it should be easy to become a contributor.\\n  + **How to measure?** Number of contributors on GitHub\\n  + **Next steps:**\\n    - Open up monthly reviews\\n    - Add tutorials to the website\\n    - Publish and maintain a use-case-centric roadmap and feature map\\n\\n## Conclusion\\n\\nThis monthly review was the first public one with not only stakeholders from IOG\\nand the CF, but also collaborators of the latest projects. This was the first\\nstep to a more open and transparent development process.\\n\\nThe teams showed some classic demos \u2013 like the \u2018hydraw\u2019 application which has\\nbeen running on the same Hydra Head for four weeks now \u2013 and some new\\ndevelopments on the Hydra explorer and minor improvements to hydra-node API and\\nTUI.\\n\\nIt was very interesting to bring various teams together to exchange ideas and\\nthoughts on the individual roadmaps for the new year. The teams also shared the\\nrelevant themes and objectives of the Hydra project for 2023 (as also listed\\nabove). They will now make sure to reflect these steps into this concrete\\n[roadmap](https://github.com/orgs/input-output-hk/projects/21) such that it will\\ncontain [marketable features](https://www.agilealliance.org/glossary/mmf/)\\nbringing us closer to these goals."},{"id":"2022-12","metadata":{"permalink":"/monthly/2022-12","editUrl":"https://github.com/cardano-scaling/website/tree/master/monthly/2022-12-monthly.md","source":"@site/monthly/2022-12-monthly.md","title":"December 2022","description":"This report summarizes the work on Hydra since November 2022 and also serves as","date":"2023-01-09T08:43:30.000Z","formattedDate":"January 9, 2023","tags":[{"label":"monthly","permalink":"/monthly/tags/monthly"}],"readingTime":4,"hasTruncateMarker":false,"authors":[{"name":"Sebastian Nagel","title":"Software Engineering Lead, IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"}],"frontMatter":{"title":"December 2022","slug":"2022-12","authors":"ch1bo","tags":["monthly"]},"unlisted":false,"prevItem":{"title":"January 2023","permalink":"/monthly/2023-01"},"nextItem":{"title":"November 2022","permalink":"/monthly/2022-11"}},"content":"This report summarizes the work on Hydra since November 2022 and also serves as\\na preparation & write-up of the monthly review meeting, in which we update major\\nstakeholders of the project on recent developments and gather their feedback on\\nour proposed plan forward each month.\\n\\n## Roadmap\\n\\nLooking at our [roadmap](https://github.com/orgs/input-output-hk/projects/21) we\\ncan report the following updates:\\n\\n#### Notable changes\\n\\n- Completed [Validate coordinated head protocol against formal model #194 ](https://github.com/input-output-hk/hydra/issues/194) \\n- Detailed a follow-up [Validate soundness with Model Based Testing #656](https://github.com/input-output-hk/hydra/issues/656)\\n- Focus on specification and gap-closing to support audit\\n- Scoped down 0.9.0 to be only about script updates and moved [Commit from external wallet #215](https://github.com/input-output-hk/hydra/issues/215) into next version\\n- Groomed [React to mainchain protocol changes #195](https://github.com/input-output-hk/hydra/issues/195)\\n- More users requesting [Support timed transactions #196](https://github.com/input-output-hk/hydra/issues/196)\\n  \\n![](./img/2022-12-roadmap.png)\\n<small><center>\\nLatest roadmap with drafted 0.10.0 version.\\n</center></small>\\n\\n## Development\\n\\n[Issues closed since last report](https://github.com/input-output-hk/hydra/issues?q=is%3Aclosed+sort%3Aupdated-desc+closed%3A2022-11-30..2022-12-31)\\n\\nThis month we have been working on:\\n\\n- **Fixed `AcquirePointTooOld` errors** by changing the way the internal wallet\\n  initializes its state\\n  [#621](https://github.com/input-output-hk/hydra/pull/621). See the PR\\n  description for details. This did not strictly happen this month, but we have\\n  not mentioned it last time. \\n\\n- **Closed first gap in Head Contract**: We collected gaps between specification\\n  and current implementation in\\n  [#452](https://github.com/input-output-hk/hydra/issues/452) and started now\\n  closing them. This first issue, was to prevent DoS / stalling of heads, by\\n  bounding the lower and upper transaction validity time of the `close`\\n  transaction. As always, time handling is hard and this required detailed\\n  discussion in the form of an ADR. See\\n  [ADR21](https://hydra.family/head-protocol/adr/21) for more details.\\n\\n- **Reduced cost of commits** by at least **30%** using reference scripts also\\n  in the `commit` transaction. We only used reference scripts in `abort` so far.\\n  This reduces the min ADA cost of `commit` because the transactions are roughly\\n  5.2KB smaller.\\n\\n  Before:\\n  ![](./img/2022-12-commit.png)\\n\\n  After:\\n  ![](./img/2022-12-commit-new.png)\\n  \\n- **Use nix flakes & build docker images using nix**: Triggered by a migration\\n  to Cicero for a nix-based CI, we started using nix flakes for `nix build` and\\n  `nix develop` instead of the legacy `nix-shell` in\\n  [#646](https://github.com/input-output-hk/hydra/pull/646). While we ended up\\n  sticking with Github Actions as the only CI and a Cachix cache, we extended\\n  this work to build our docker images more efficiently using `nix` in\\n  [#654](https://github.com/input-output-hk/hydra/pull/654).\\n\\n  Image sizes went down between 20-50%:\\n\\n  ![](./img/2022-12-docker-images.png)\\n  \\n  While docker CI builds on `master` went down to 1-10min (from 10-30m+)!\\n\\n## Hydra V1 Specification\\n\\nFinally, we bit the bullet and started a write-up of the specification. Over the\\nlast couple of months we had worked with marked up versions (see below) of the\\noriginal paper and a GDoc to discuss and review the protocol as it was\\nimplemented.\\n\\n\\n![](./img/2022-12-marked-up-paper.png)\\n  \\nAs we also updated the security properties and proofs, we started aggregating a\\nLaTeX document on overleaf. While it holds a similar background and\\npreliminaries as the original paper, it only specifies a single version of the\\nprotocol with no variants, less modularization, as well as explicit assumptions\\nand important notes for implementors.\\n  \\n![](./img/2022-12-spec-overleaf.png)\\n\\nWe aim to be publishing the spec as part of the main [hydra repository](https://github.com/input-output-hk/hydra) soon.\\n\\n## Community\\n\\n- **Hydra for Payments project** completed the first phase of this work stream\\n  by tagging version [0.1.0](https://github.com/obsidiansystems/hydra-pay/releases/tag/v0.1.0).\\n  This open source project conducted by Obsidian Systems and sponsored by IOG\\n  created a great starting point for developers to build services/APIs of\\n  payment channels using Hydra Head. This month we reviewed the improved\\n  documentation and are looking forward to see this work applied to eventually\\n  build fast & cheap payments for light-wallet users and power payment channel\\n  use cases from business-to-business (B2B) in the short-term.\\n\\n- **Hydra for Voting project** kicked off this joint project between IOG\\n  Research, Catalyst & Hydra Tribes, and the Cardano Foundation. The goal is to\\n  assess suitability of Hydra Head to support voting use cases by implementing\\n  parts of Catalyst voting system on Hydra Head and benchmark execution at\\n  scale. The kick-off meeting took place on December 15.\\n    \\n- **Blog post by CF**: To round off the year, Matthias wrote a nice\\n  [retrospective blog\\n  post](https://cardanofoundation.org/en/news/hydra-head-protocol-an-open-source-solution-for-scalability/)\\n  about Hydra at the CF. Besides summarizing our progress made in 2022 it also\\n  gives an outlook where Hydra is headed for in 2023.\\n\\n## Conclusion\\n\\nAlthough Hydra is in essence an open source project right now, we would love to\\nmake it \\"even more open source\\" in the coming months. Our vision of Hydra\\nrequires to have the builders of the Cardano ecosystem to be part of this\\njourney. For that matter, we want not only to open up these monthly reports, but\\nthe review meeting backing it as well!\\n\\nThis, besides our engagements with the community above, will allow the project\\nto grow beyond IOG & CF contributions. To become the true Cardano open source\\nproject we believe will be worthy to serve as the scalability component required\\nby the Cardano network."},{"id":"2022-11","metadata":{"permalink":"/monthly/2022-11","editUrl":"https://github.com/cardano-scaling/website/tree/master/monthly/2022-11-monthly.md","source":"@site/monthly/2022-11-monthly.md","title":"November 2022","description":"Introduction","date":"2022-12-05T09:19:28.000Z","formattedDate":"December 5, 2022","tags":[{"label":"monthly","permalink":"/monthly/tags/monthly"}],"readingTime":8.5,"hasTruncateMarker":false,"authors":[{"name":"Sebastian Nagel","title":"Software Engineering Lead, IOG","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"}],"frontMatter":{"title":"November 2022","slug":"2022-11","authors":"ch1bo","tags":["monthly"]},"unlisted":false,"prevItem":{"title":"December 2022","permalink":"/monthly/2022-12"}},"content":"## Introduction\\n\\nThis report summarizes the activities of the Hydra team since October 2022 and also serves as a preparation & write-up of the monthly review meeting, in which we update major stakeholders of the project on recent developments and gather their feedback on our proposed plan forward each month.\\n\\n## Roadmap update\\n\\nLooking at our [roadmap](https://github.com/orgs/input-output-hk/projects/21) we can report the following releases and updates:\\n\\n#### Release `0.8.0`\\n\\n- Long overdue feature release adding persistence to the hydra-node\\n- Backup & restore the state of a Hydra Head [#187](https://github.com/input-output-hk/hydra/issues/187)\\n- Improve user experience following hydraw experiment [#518](https://github.com/input-output-hk/hydra/issues/518) from being only a discussion to a (to-be-groomed & planned) feature\\n- [Full release notes](https://github.com/input-output-hk/hydra/releases/tag/0.8.0)\\n\\n#### Release `0.8.1`\\n\\n- Follow-up release addressing user feedback on persistence from `0.8.0`\\n- Allow clients to see latest state after restart [#580](https://github.com/input-output-hk/hydra/issues/580)\\n- Bug fixes of following chain state [#599](https://github.com/input-output-hk/hydra/issues/599)\\n- [Full release notes](https://github.com/input-output-hk/hydra/releases/tag/0.8.1)\\n\\n#### Notable changes\\n\\n- Impact mapping from workshop (see below) and reviewing the starmap above had us discuss whether the scope for `1.0.0` is correct or not\\n- Need to be conscious of scope creep vs. getting something audited\\n- Focus on getting the spec done, `0.9.0` tagged and an audit under way now \u2192 minor re-ordering in priorities\\n- Iterative releases afterwards still - even while getting audited, non-contract changes first\\n- Promoted [https://github.com/input-output-hk/hydra/issues/635](https://github.com/input-output-hk/hydra/issues/635) from being only a discussion to a (to-be-groomed & planned) feature\\n\\n![](./img/2022-11-roadmap.png)\\n<small><center>\\nLatest roadmap with 0.8.0 and 0.8.1 already released and slight re-ordering on 0.9.0\\n\\n</center></small>\\n\\n## Development\\n\\nIssues closed since last report: [Issues - input-output-hk/hydra](https://github.com/input-output-hk/hydra/issues?page=1&q=is%3Aclosed+sort%3Aupdated-desc+closed%3A%3E%3D2022-10-19)\\n\\nBesides the things in the releases above (see roadmap update), we have\\nbeen working on:\\n\\n- **Flaky TUI CI tests:** We have sunk quite some time again in\\n  investigating cryptic CI failures in our TUI end-to-end tests. They\\n  have been crashing abruptly without any information and thus\\n  hard-to-debug. This investigation was unsuccessful and we realized\\n  at some point that the TUI tests are not that important anyways - we\\n  have API-level end-to-end tests. So we disabled these tests for now.\\n\\n- **Published** `hydra-cardano-api` **to CHaP:** With the Cardano\\n  Haskell Packages (CHaP) becoming available now and wanting to be a\\n  good citizen, we pushed for getting our flavor of the `cardano-api`\\n  also published there. This is non-trivial though, as we are at an\\n  integration point even \\"further up\\" than the `cardano-node`\\n  [#504](https://github.com/input-output-hk/hydra/issues/504)\\n\\n- **Implemented ADR18:** While the first stints on persistence already\\n  make it possible to restart `hydra-node` without needing to close a\\n  Head, we have implemented this in a nicer way now only keeping a\\n  single state (ground truth) for both L2 and L1 information\\n  [#541](https://github.com/input-output-hk/hydra/issues/541) of the Head protocol and the specification, we kept\\n  discovering bigger and bigger issues and hence realized the need for\\n  a discussion on transaction validity in context of closing /\\n  contesting Heads. [#615](https://github.com/input-output-hk/hydra/issues/615)\\n\\n## Formal verification & specification\\n\\nAn important part of the project right now is the formalization and\\naudit preparation:\\n\\n- **Internal audit** has started with involvement of two persons from IOG IT\\n  team, each one addressing different part of Hydra:\\n\\n  - One auditor is working on the project as a whole, targeting\\n    potential vulnerabilities with the off-chain code, the\\n    infrastructure, dependencies, etc. This has not lead to any\\n    significant issue nor action plan so far.\\n  - Another auditor is specifically targeting the formal\\n    specification and the on-chain code to identify vulnerabilities\\n    in the protocol itself.\\n\\n- Discussions with researchers have led to the development of a joint Coordinated Hydra Head V1 specification defining formally the protocol as it is actually implemented.\\n\\n  - Work on this document has already allowed us to identify gaps\\n  - It is the basis on which BCryptic\'s analyst is working to audit Hydra protocol\\n  - It allows us to make explicit a lot of implicit assumptions that are in the code but not in the original paper and \\"Shape\\" the language used to describe the protocol\\n\\n- We have drafted an RFP for submission to **external** auditors\\n  [https://github.com/input-output-hk/hydra/blob/audit/rfp/security/RFP.md](https://github.com/input-output-hk/hydra/blob/audit/rfp/security/RFP.md) defining the scope and targets of the audit\\n\\n- We are still unsure about whether our **approach** is the right one as having a \\"formal specification\\" in a manually checked document spanning a dozen pages seems quite brittle.\\n\\n  - Some progress has been made on \\"formalizing\\" properties to be automatically \\"QuickChecked\\" using an executable model of the expected behavior of the system but this approach seems more suited for \\"team-internal consumption\\", e.g. building confidence within the core committers and contributors\\n\\n  - Ideally, we would want a proper formalization of the protocol, using an existing theorem proving/model checking framework, through which properties could be asserted. Quite a lot of work has already been done in blockchain space, including some work on Lightning and TLA+ or some other state-machine/temporal logic based language appear promising:\\n\\n    - [https://www.youtube.com/watch?v=wecVT_4QDcU](https://www.youtube.com/watch?v=wecVT_4QDcU)\\n    - [https://github.com/rberenguel/tla_lightning](https://github.com/rberenguel/tla_lightning)\\n    - [https://www.amazon.com/Practical-TLA-Planning-Driven-Development/dp/1484238281](https://www.amazon.com/Practical-TLA-Planning-Driven-Development/dp/1484238281)\\n\\n  - This effort should be done in accordance to the DApps certification process\\n\\n## Product\\n\\nMost updates on the product side of things have been addressed in the\\nstarmap update above.\\n\\n- **Hydra for Payments lighthouse project**: Latest demonstration\\n  shown by Obsidian Systems on how to use payment channels in a \\"light\\n  way\\" from a web frontend. The API evolved and we were able to use\\n  the `preview` testnet now. The project is progressing very nicely\\n  and we are optimistic to close it successfully soon with improved\\n  documentation and usability.\\n\\n- **NFT auctions lighthouse project:** After doing surveys and\\n  interviews, MLabs is currently concluding the discovery phase with a\\n  light / white paper on how NFT auctions could be implemented using\\n  Hydra (today or in the future with more features).\\n\\n- **Drafting Voting on Hydra project**: Work has started on building a\\n  Proof-of-concept for voting on Hydra targeting Catalyst\u2019s use case but with an eye towards building a generic solution suitable for large scale voting systems based on Hydra Head\\n\\n  This development should be undertaken jointly with the Cardano Foundation and SundaeSwap who are also interested in building such a system and recently demonstrated their capacity of doing voting via the Cardano Summit voting system.\\n\\n- **TxPipe demonstrated integration with demeter.run:** Without our\\n  help nor even knowing of this effort, TxPipe has recently shown an\\n  early prototype of `hydra-node`s instrumented via their\\n  [demeter.run](https://demeter.run) platform. This has come a bit as a surprise and is exactly why we love open source :heart: \u2192 [Video](https://www.loom.com/share/c811360e60084f18ab9e9f16cc941432)\\n\\n## Team & open source\\n\\nSome notable developments this month have been:\\n\\n- **Renamed the repository:** from **hydra-poc** to\\n  [**hydra**](https://github.com/input-output-hk/hydra)! This was revealed in the summit presentation (see below) and should indicate that the project is not only a Proof of Concept (POC) anymore, but has become more - as also demonstrated by the various early adopters and demos lately. :dragon_face:\\n\\n- **Inner source (IOG) contribution:** The education team has been working on a Hydra Tutorial and we have been involved in reviewing and trying it out. This is a great effort and will help people get started with Hydra. Thanks folks :green_heart:\\n\\n## Cardano Summit & workshop\\n\\nThis month there was also the Cardano Summit, this time organized by the\\nCardano Foundation and the content was even voted on by the community!\\nWe have been both, invited and nominated as panelist and speakers and\\nthis makes us extremely proud! In general, the reception of Hydra seems\\nto be very positive in the community from what we could experience first\\nhand on the summit.\\n\\nAgenda items we participated in:\\n\\n- [Best of blockchain, best of open source - Open Source panel ](https://summit.cardano.org/agenda-day-1/best-of-blockchain-best-of-open-source/) with IOG, CF & TxPipe\\n\\n- [Cardano Ballot Speaker Winner: Dev Team](https://summit.cardano.org/agenda-day-2/cardano-ballot-speaker-winner-presentation-6/) Introduction to Hydra and\\n  reveal of the repository rename \ud83c\udf89\\n\\nAfter attending the summit, we also used the fact that the whole team is\\nin one location for a team workshop. We booked a coworking space and\\nspent 3 days together. Not much coding & hacking this time, but we are\\nhappy to have produced these results:\\n\\n- **Timeline / year in review:** As we had new team members with us,\\n  the request was to give a recap of how the Hydra project evolved\\n  over the last two years. The whole timeline can bee seen below, and\\n  this also sparked the idea of creating a \\"Year in review\\" blog post,\\n  which is currently in preparation.\\n\\n- **Retrospective**: In-person workshops are the perfect place for\\n  doing retrospectives to reflect on what was good, bad and collecting\\n  ideas & actions in how to improve our work environment and\\n  processes.\\n\\n  ![](./img/2022-11-retro.png)\\n  <small><center>\\n  Retrospective board from 2022-11-22\\n  </center></small>\\n\\n- **Impact map:** Conscious about the fact that the project got defined about one year ago in a first project plan, and inspired by timeline and (short-term) ideas, we also set off to reflect on the **Why**, **How** and **What** of this project.\\n\\n  After reviewing the project vision, we reached for the tool of our choice to ideate on tangible objectives / deliverables - impact maps! Also, we felt the need to use a different goal this time. One that is reflecting more closely (or, in fact, broadly) what our current mission is. So instead of the **% of Cardano transactions are done on L2**, we set a new goal: being the **number one DApp on Cardano** (by all known metrics: TVL, traffic, volume etc..) Fundamentally, both goals illustrate the same idea, but the latter better supports the narrative that Hydra is also just a DApp (not a network upgrade) and needs usage & adoption to reach our vision.\\n\\n  Below you see the result of our session. We checked back to the old impact map after creating this one, and many things are still relevant / similar on the new sample (it\'s never complete!) - some of the deliverables we even achieved.\\n\\n  ![](./img/2022-11-impact.png)\\n  <small><center>\\n  Impact map with new goal\\n  </center></small>\\n\\n# Conclusion\\n\\nReflecting on our original plans (about a year ago) and our current roadmap we can say we are behind our anticipated schedule. However, recent developments on the lighthouse projects and community members contributing & using Hydra are convincing us that we are on the right track. The summit paints a similar picture and we feel reinvigorated by the great people we met, discussions we had and relationships we created & solidified on the summit and during our Hydra workshop."}]}')}}]);